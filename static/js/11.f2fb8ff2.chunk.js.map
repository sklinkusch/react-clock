{"version":3,"sources":["pages/Home.js"],"names":["Clock","lazy","Home","useDebugState","timezonesRaw","allStates","filtVal","setFiltVal","timezones","setTimezones","currentLanguage","window","navigator","language","prepareZones","filterVal","timezoneObject","map","tz","Now","moment","utc","format","country","zone","flag","subdiv","cities","hasOwnProperty","offset","numericOffset","utcOffset","sort","a","b","reduce","acc","curr","obj","code","title","city","flags","push","concat","timezoneArray","Object","values","filterValue","filteredStates","filter","length","item","join","toLowerCase","includes","asciiname","useEffect","setInterval","className","style","textAlign","marginBottom","marginTop","type","placeholder","getPermLocale","onChange","e","target","value","time","index"],"mappings":"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","file":"static/js/11.f2fb8ff2.chunk.js","sourcesContent":["import React, { useEffect, lazy } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport timezonesRaw from \"../components/data\"\nimport moment from \"moment-timezone\"\nimport \"../styles/App.css\";\nimport { getPermLocale } from \"../components/getLocale\";\nconst Clock = lazy(() => import(\"../components/Clock\"));\n/* eslint-disable react-hooks/exhaustive-deps */\n\nexport default function Home() {\n  const [allStates] = useDebugState(\"allStates\", timezonesRaw)\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\", \"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\", null)\n  const currentLanguage = window.navigator.language\n  const prepareZones = (filterVal) => {\n    const unsortedStates = allStates.map(tz => {\n      const Now = moment().utc().format(\"x\")\n      const {country, zone, flag, subdiv = [], cities = [] } = tz\n      const namedCountry = typeof country == \"object\"\n        ? country.hasOwnProperty(currentLanguage)\n          ? country[currentLanguage]\n          : country[\"en\"]\n        : country\n      const offset = moment().tz(zone).format(\"Z\")\n      const numericOffset = -1 * moment.tz.zone(zone).utcOffset(Now)\n      return { country: namedCountry, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = numericOffset === 0 ? \"UTCÂ±00:00\" : \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal ? filterVal : filtVal\n    const filteredStates = filterValue !== \"\"  ? timezoneArray.filter(tz => {\n      const { flags, cities } = tz\n      const filteredFlags = flags.filter(flag => {\n        const { title: country, subdiv = [] } = flag\n        const title = subdiv.length > 0 ? `${country}: ${subdiv.map(item => item.title).join(\", \")}` : country\n        if(filterValue !== \"\"){\n          if(title.toLowerCase().includes(filterValue.toLowerCase())) return true\n          return false\n        }\n        return true\n      })\n      if(filteredFlags.length > 0) return true\n      const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n      if(filteredCities.length > 0) return true\n      return false\n    }) : timezoneArray\n    setTimezones(filteredStates)\n  }\n  useEffect(() => {\n    prepareZones()\n    setInterval(1000,prepareZones)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder={getPermLocale(\"FilterCountries\")} onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(e.target.value)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}
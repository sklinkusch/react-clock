{"version":3,"file":"static/js/266.28bd5b13.chunk.js","mappings":"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","sources":["pages/Home.js"],"sourcesContent":["import React, { useEffect, lazy } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport moment from \"moment-timezone\"\nimport \"../styles/App.css\";\nimport { getPermLocale } from \"../components/getLocale\";\nconst Clock = lazy(() => import(\"../components/Clock\"));\n/* eslint-disable react-hooks/exhaustive-deps */\n\nexport default function Home() {\n  const [allStates, setAllStates] = useDebugState(\"allStates\", [])\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\", \"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\", null)\n  const fetchData = (currentLanguage) => {\n    fetch(`https://worldtime-api.vercel.app/real?lang=${currentLanguage}`)\n    .then(response => response.json())\n    .then(data => setAllStates(data))\n    .catch(error => console.error(error))\n  } \n  const prepareZones = (filterVal, currentLanguage) => {\n    const unsortedStates = allStates.map(tz => {\n      const Now = moment().utc().format(\"x\")\n      const {country, zone, flag, subdiv = [], cities = [] } = tz\n      const namedCountry = typeof country == \"object\"\n        ? country.hasOwnProperty(currentLanguage)\n          ? country[currentLanguage]\n          : country[\"en\"]\n        : country\n      const offset = moment().tz(zone).format(\"Z\")\n      const numericOffset = -1 * moment.tz.zone(zone).utcOffset(Now)\n      return { country: namedCountry, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = numericOffset === 0 ? \"UTCÂ±00:00\" : \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal ? filterVal : filtVal\n    const filteredStates = filterValue !== \"\"  ? timezoneArray.filter(tz => {\n      const { flags, cities } = tz\n      const filteredFlags = flags.filter(flag => {\n        const { title: country, subdiv = [] } = flag\n        const title = subdiv.length > 0 ? `${country}: ${subdiv.map(item => item.title).join(\", \")}` : country\n        if(filterValue !== \"\"){\n          if(title.toLowerCase().includes(filterValue.toLowerCase())) return true\n          return false\n        }\n        return true\n      })\n      if(filteredFlags.length > 0) return true\n      const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n      if(filteredCities.length > 0) return true\n      return false\n    }) : timezoneArray\n    setTimezones(filteredStates)\n  }\n  useEffect(() => {\n    const currentLanguage = window.navigator.language.substring(0,2).toLowerCase()\n    fetchData(currentLanguage)\n    prepareZones(\"\", currentLanguage)\n    setInterval(1000,prepareZones)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder={getPermLocale(\"FilterCountries\")} onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(e.target.value)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n"],"names":["Clock","lazy","Home","useDebugState","allStates","setAllStates","filtVal","setFiltVal","timezones","setTimezones","prepareZones","filterVal","currentLanguage","timezoneObject","map","tz","Now","moment","utc","format","country","zone","flag","subdiv","cities","hasOwnProperty","offset","numericOffset","utcOffset","sort","a","b","reduce","acc","curr","obj","code","title","city","flags","push","concat","timezoneArray","Object","values","filterValue","filteredStates","filter","length","item","join","toLowerCase","includes","asciiname","useEffect","window","navigator","language","substring","fetch","then","response","json","data","catch","error","console","fetchData","setInterval","className","style","textAlign","marginBottom","marginTop","type","placeholder","getPermLocale","onChange","e","target","value","time","index"],"sourceRoot":""}
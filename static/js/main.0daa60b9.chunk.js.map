{"version":3,"sources":["components/Clock.js","components/App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","_super","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","react_default","a","createElement","Fragment","city","toLocaleString","timeZone","zone","setState","React","Component","times","App","className","map","time","index","Clock_Clock","key","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ytBAGqBA,0CACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CAAEC,KAAM,IAAIC,MAFRR,kEAIC,IAAAS,EAAAN,KAClBA,KAAKO,QAAUC,YAAY,kBAAMF,EAAKG,QAAQ,oDAG9CC,cAAcV,KAAKO,wCAEdX,GACL,OACEe,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,UAAKb,KAAKJ,MAAMmB,MAChBJ,EAAAC,EAAAC,cAAA,iBACQ,IACLb,KAAKG,MAAMC,KAAKY,eAAe,QAAS,CACvCC,SAAUjB,KAAKJ,MAAMsB,wCAO7BlB,KAAKmB,SAAS,CACZf,KAAM,IAAIC,cA1BmBe,IAAMC,WCCnCC,SAAQ,CACZ,CACEP,KAAM,iBACNG,KAAM,qBAER,CACEH,KAAM,SACNG,KAAM,oBAER,CACEH,KAAM,SACNG,KAAM,qBAER,CACEH,KAAM,0BACNG,KAAM,uBAER,CACEH,KAAM,2BACNG,KAAM,kBAER,CACEH,KAAM,0BACNG,KAAM,mBAER,CACEH,KAAM,0BACNG,KAAM,oBAER,CACEH,KAAM,2BACNG,KAAM,mBAER,CACEH,KAAM,YACNG,KAAM,wBAER,CACEH,KAAM,iBACNG,KAAM,iBAER,CACEH,KAAM,iBACNG,KAAM,iBAER,CACEH,KAAM,iBACNG,KAAM,oBAER,CACEH,KAAM,yBACNG,KAAM,iBAER,CACEH,KAAM,OACNG,KAAM,eAER,CACEH,KAAM,WACNG,KAAM,aAER,CACEH,KAAM,WACNG,KAAM,gBAER,CACEH,KAAM,QACNG,KAAM,gBAER,CACEH,KAAM,aACNG,KAAM,eAER,CACEH,KAAM,YACNG,KAAM,gBAER,CACEH,KAAM,QACNG,KAAM,iBAER,CACEH,KAAM,QACNG,KAAM,cAER,CACEH,KAAM,sBACNG,KAAM,oBAER,CACEH,KAAM,sBACNG,KAAM,oBAER,CACEH,KAAM,mBACNG,KAAM,0BAYK,SAASK,IACtB,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACZF,EAAMG,IAAI,SAACC,EAAMC,GAAP,OAAiBhB,EAAAC,EAAAC,cAACe,EAAD,CAAOC,IAAKF,EAAOZ,KAAMW,EAAKX,KAAMG,KAAMQ,EAAKR,UCtG7DY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0daa60b9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Clock.css\";\n\nexport default class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render(props) {\n    return (\n      <React.Fragment>\n        <h2>{this.props.city}</h2>\n        <p>\n          It is{\" \"}\n          {this.state.date.toLocaleString(\"en-GB\", {\n            timeZone: this.props.zone\n          })}\n        </p>\n      </React.Fragment>\n    );\n  }\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n}\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport \"../styles/App.css\";\n\nconst times = [\n  {\n    city: \"American Samoa\",\n    zone: \"Pacific/Pago_Pago\"\n  },\n  {\n    city: \"Hawaii\",\n    zone: \"Pacific/Honolulu\"\n  },\n  {\n    city: \"Alaska\",\n    zone: \"America/Anchorage\"\n  },\n  {\n    city: \"North America (Pacific)\",\n    zone: \"America/Los_Angeles\"\n  },\n  {\n    city: \"North America (Mountain)\",\n    zone: \"America/Denver\"\n  },\n  {\n    city: \"North America (Central)\",\n    zone: \"America/Chicago\"\n  },\n  {\n    city: \"North America (Eastern)\",\n    zone: \"America/New_York\"\n  },\n  {\n    city: \"North America (Atlantic)\",\n    zone: \"America/Halifax\"\n  },\n  {\n    city: \"Argentina\",\n    zone: \"America/Buenos_Aires\"\n  },\n  {\n    city: \"Western Europe\",\n    zone: \"Europe/London\"\n  },\n  {\n    city: \"Central Europe\",\n    zone: \"Europe/Berlin\"\n  },\n  {\n    city: \"Eastern Europe\",\n    zone: \"Europe/Bucharest\"\n  },\n  {\n    city: \"Russia (Moscow Region)\",\n    zone: \"Europe/Moscow\"\n  },\n  {\n    city: \"Iran\",\n    zone: \"Asia/Tehran\"\n  },\n  {\n    city: \"Caucasus\",\n    zone: \"Asia/Baku\"\n  },\n  {\n    city: \"Pakistan\",\n    zone: \"Asia/Karachi\"\n  },\n  {\n    city: \"India\",\n    zone: \"Asia/Kolkata\"\n  },\n  {\n    city: \"Kazakhstan\",\n    zone: \"Asia/Almaty\"\n  },\n  {\n    city: \"Indochina\",\n    zone: \"Asia/Bangkok\"\n  },\n  {\n    city: \"China\",\n    zone: \"Asia/Shanghai\"\n  },\n  {\n    city: \"Japan\",\n    zone: \"Asia/Tokyo\"\n  },\n  {\n    city: \"Australia (Central)\",\n    zone: \"Australia/Darwin\"\n  },\n  {\n    city: \"Australia (Eastern)\",\n    zone: \"Australia/Sydney\"\n  },\n  {\n    city: \"Papua New Guinea\",\n    zone: \"Pacific/Port_Moresby\"\n  },\n  // {\n  //   city: \"Fiji\",\n  //   zone: \"Pacific/Suva\"\n  // },\n  // {\n  //   city: \"Tonga\",\n  //   zone: \"Pacific/Nukualofa\"\n  // }\n]\n\nexport default function App() {\n  return (\n    <div className=\"app\">\n      {times.map((time, index) => <Clock key={index} city={time.city} zone={time.zone} />)}\n      {/* <Clock key=\"0\" city=\"Hawaii\" zone=\"Pacific/Honolulu\" />\n      <Clock key=\"1\" city=\"Los Angeles\" zone=\"America/Los_Angeles\" />\n      <Clock key=\"2\" city=\"Chicago\" zone=\"America/Chicago\" />\n      <Clock key=\"3\" city=\"New York\" zone=\"America/New_York\" />\n      <Clock key=\"4\" city=\"London\" zone=\"Europe/London\" />\n      <Clock key=\"5\" city=\"Berlin\" zone=\"Europe/Berlin\" />\n      <Clock key=\"6\" city=\"Moscow\" zone=\"Europe/Moscow\" />\n      <Clock key=\"7\" city=\"Kolkata\" zone=\"Asia/Kolkata\" />\n      <Clock key=\"8\" city=\"Beijing\" zone=\"Asia/Shanghai\" />\n      <Clock key=\"9\" city=\"Tokyo\" zone=\"Asia/Tokyo\" />\n      <Clock key=\"10\" city=\"Sydney\" zone=\"Australia/Sydney\" /> */}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
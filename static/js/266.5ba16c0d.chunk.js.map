{"version":3,"file":"static/js/266.5ba16c0d.chunk.js","mappings":"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","sources":["pages/Home.js"],"sourcesContent":["import React, { useEffect, lazy } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport moment from \"moment-timezone\"\nimport \"../styles/App.css\";\nimport { getPermLocale } from \"../components/getLocale\";\nconst Clock = lazy(() => import(\"../components/Clock\"));\n/* eslint-disable react-hooks/exhaustive-deps */\n\nexport default function Home() {\n  const [lang, setLang] = useDebugState(\"lang\", \"\")\n  const [allTz, setAllTz] = useDebugState(\"allTz\", [])\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\", \"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\", [])\n  const fetchData = (currentLanguage) => {\n    fetch(`https://worldtime-api.vercel.app/real?lang=${currentLanguage}`)\n    .then(response => response.json())\n    .then(data => {\n      setAllTz(data)\n      prepareZones(data, filtVal, currentLanguage)\n      setInterval(1000, () => prepareZones(allTz, filtVal, currentLanguage))\n    })\n    .catch(error => console.error(error))\n  } \n  const prepareZones = (data, filterVal = \"\", currentLanguage) => {\n    const myData = data ? data : allTz\n    const unsortedStates = myData.map(tz => {\n      const Now = moment().utc().format(\"x\")\n      const {country, zone, flag, subdiv = [], cities = [] } = tz\n      const offset = moment().tz(zone).format(\"Z\")\n      const numericOffset = -1 * moment.tz.zone(zone).utcOffset(Now)\n      return { country, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = numericOffset === 0 ? \"UTCÂ±00:00\" : \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal ? filterVal : filtVal\n    const filteredStates = filterValue !== \"\"  ? timezoneArray.filter(tz => {\n      const { flags, cities } = tz\n      const filteredFlags = flags.filter(flag => {\n        const { title: country, subdiv = [] } = flag\n        const title = subdiv.length > 0 ? `${country}: ${subdiv.map(item => item.title).join(\", \")}` : country\n        if(filterValue !== \"\"){\n          if(title.toLowerCase().includes(filterValue.toLowerCase())) return true\n          return false\n        }\n        return true\n      })\n      if(filteredFlags.length > 0) return true\n      const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n      if(filteredCities.length > 0) return true\n      return false\n    }) : timezoneArray\n    setTimezones(filteredStates)\n  }\n  useEffect(() => {\n    const currentLanguage = window.navigator.language.substring(0,2).toLowerCase()\n    setLang(currentLanguage)\n    fetchData(currentLanguage)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder={getPermLocale(\"FilterCountries\")} onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(allTz, e.target.value, lang)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n"],"names":["Clock","lazy","Home","useDebugState","lang","setLang","allTz","setAllTz","filtVal","setFiltVal","timezones","setTimezones","prepareZones","data","filterVal","myData","unsortedStates","map","tz","Now","moment","utc","format","country","zone","flag","subdiv","cities","offset","numericOffset","utcOffset","sortedStates","sort","a","b","timezoneObject","reduce","acc","curr","obj","code","title","city","hasOwnProperty","flags","push","concat","timezoneArray","Object","values","filterValue","filteredStates","filter","length","item","join","toLowerCase","includes","asciiname","useEffect","currentLanguage","window","navigator","language","substring","fetch","then","response","json","setInterval","catch","error","console","fetchData","className","style","textAlign","marginBottom","marginTop","type","placeholder","getPermLocale","onChange","e","target","value","time","index"],"sourceRoot":""}
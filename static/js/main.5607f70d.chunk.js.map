{"version":3,"sources":["components/Clock.js","components/data.js","components/timezones/MiddleEast.js","components/timezones/NorthAmerica.js","components/timezones/Oceania.js","components/timezones/Antilles.js","components/timezones/SouthAsia.js","components/timezones/LatinAmerica.js","components/timezones/Africa.js","components/timezones/Europe.js","components/timezones/Indonesia.js","components/timezones/EastAsia.js","components/timezones/Australia.js","components/timezones/Russia.js","components/App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","_super","call","state","date","Date","_this2","timerID","setInterval","tick","clearInterval","react_default","a","createElement","className","city","style","textAlign","flags","map","flag","index","arr","length","react_world_flags_default","key","code","title","height","maxWidth","marginRight","marginInline","toLocaleDateString","timeZone","zone","toLocaleTimeString","setState","React","Component","components_data","App","formatDate","data","_data$split","split","_data$split2","slicedToArray","time","_date$trim$split","trim","_date$trim$split2","day","month","year","_time$trim$split","_time$trim$split2","hour","minute","newMonth","concat","newDay","zones","times","sort","b","aCity","aZone","bCity","bZone","aDate","toLocaleString","bDate","toLowerCase","Clock_Clock","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kvBAIqBA,0CACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CAAEC,KAAM,IAAIC,MAFRR,kEAIC,IAAAS,EAAAN,KAClBA,KAAKO,QAAUC,YAAY,kBAAMF,EAAKG,QAAQ,oDAG9CC,cAAcV,KAAKO,wCAEdX,GACL,OACEe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAKb,KAAKJ,MAAMmB,MAChBJ,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEC,UAAW,WACtB,UAAWjB,KAAKJ,OAASI,KAAKJ,MAAMsB,OAASlB,KAAKJ,MAAMsB,MAAMC,IAAI,SAACC,EAAMC,EAAOC,GAC/E,OAAID,IAAWC,EAAIC,OAAS,EAExBZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAMa,IAAKJ,EAAOK,KAAMN,EAAKM,KAAMC,MAAOP,EAAKO,MAAOC,OAAO,KAAKZ,MAAO,CAAEa,SAAU,UAIzFlB,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAMa,IAAKJ,EAAOK,KAAMN,EAAKM,KAAMC,MAAOP,EAAKO,MAAOC,OAAO,KAAKZ,MAAO,CAACc,YAAa,MAAOC,aAAc,MAAOF,SAAU,aAIjIlB,EAAAC,EAAAC,cAAA,SAAIb,KAAKG,MAAMC,KAAK4B,mBAAmB,QAAS,CAACC,SAAUjC,KAAKJ,MAAMsC,QACtEvB,EAAAC,EAAAC,cAAA,SAAIb,KAAKG,MAAMC,KAAK+B,mBAAmB,QAAS,CAAEF,SAAUjC,KAAKJ,MAAMsC,yCAe7ElC,KAAKoC,SAAS,CACZhC,KAAM,IAAIC,cA7CmBgC,IAAMC,WCS1BC,EAAA,CCbY,CACzBxB,KAAM,cACNmB,KAAM,aACNhB,MAAO,CACL,CACES,MAAO,cACPD,KAAM,QCNU,CACpBX,KAAM,SACNmB,KAAM,oBACNhB,MAAO,CACL,CACES,MAAO,oBACPD,KAAM,QAKmB,CAC7BX,KAAM,mBACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,oBACPD,KAAM,QCjBiB,CAC3BX,KAAM,iBACNmB,KAAM,oBACNhB,MAAO,CACL,CACES,MAAO,iCACPD,KAAM,MAER,CACEC,MAAO,sEACPD,KAAM,MAER,CACEC,MAAO,qBACPD,KAAM,QCdY,CACtBX,KAAM,WACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,0CACPD,KAAM,MAER,CACEC,MAAO,4BACPD,KAAM,MAER,CACEC,MAAO,sBACPD,KAAM,MAER,CACEC,MAAO,sBACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,0CACPD,KAAM,MAER,CACEC,MAAO,2BACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,qBACPD,KAAM,MAER,CACEC,MAAO,wDACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,sBACPD,KAAM,MAER,CACEC,MAAO,8BACPD,KAAM,MAER,CACEC,MAAO,6CACPD,KAAM,MAER,CACEC,MAAO,8BACPD,KAAM,MAER,CACEC,MAAO,wBACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,mCACPD,KAAM,MAER,CACEC,MAAO,6BACPD,KAAM,MAER,CACEC,MAAO,sBACPD,KAAM,QHvEU,CACpBX,KAAM,SACNmB,KAAM,cACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,eACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,QCfW,CACrBX,KAAM,UACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,gBACPD,KAAM,MAER,CACEC,MAAO,wCACPD,KAAM,MAER,CACEC,MAAO,0DACPD,KAAM,QAKiB,CAC3BX,KAAM,iBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,uCACPD,KAAM,MAER,CACEC,MAAO,mBACPD,KAAM,QGnDc,CACxBX,KAAM,aACNmB,KAAM,aACNhB,MAAO,CACL,CACES,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,kDACPD,KAAM,QCdoB,CAC9BX,KAAM,oBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,6GACPD,KAAM,MAER,CACEC,MAAO,gEACPD,KAAM,QCVa,CACvBX,KAAM,aACNmB,KAAM,sBACNhB,MAAO,CACL,CACES,MAAO,aACPD,KAAM,QLkDW,CACrBX,KAAM,UACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,qCACPD,KAAM,MAER,CACEC,MAAO,oSACPD,KAAM,MAER,CACEC,MAAO,4FACPD,KAAM,QK3DiB,CAC3BX,KAAM,yBACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,qNACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,eACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,QD9DkB,CAC5BX,KAAM,kBACNmB,KAAM,sBACNhB,MAAO,CACL,CACES,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,uBACPD,KAAM,MAER,CACEC,MAAO,uBACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,wBACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,QErDiB,CAC3BX,KAAM,iBACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,yBACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,oBACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,6BACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,gBACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,kBACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,kBACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,eACPD,KAAM,QC9HoB,CAC9BX,KAAM,oBACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,+BACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,yHACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,QHgCuB,CACjCX,KAAM,wBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,yFACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,QHzDW,CACrBX,KAAM,UACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,+BACPD,KAAM,QGwDS,CACnBX,KAAM,QACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,kBACPD,KAAM,QIvFS,CACnBX,KAAM,QACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,oBACPD,KAAM,MAER,CACEC,MAAO,gBACPD,KAAM,MAER,CACEC,MAAO,sBACPD,KAAM,MAER,CACEC,MAAO,mCACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,QJkEY,CACtBX,KAAM,WACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,wCACPD,KAAM,MAER,CACEC,MAAO,iBACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,uBACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,QJnDY,CACtBX,KAAM,eACNmB,KAAM,uBACNhB,MAAO,CACL,CACES,MAAO,+BACPD,KAAM,QAKQ,CAClBX,KAAM,OACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,OACPD,KAAM,QAKW,CACrBX,KAAM,UACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,sCACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,4CACPD,KAAM,MAER,CACEC,MAAO,4GACPD,KAAM,QKrCiB,CAC3BX,KAAM,cACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,kBACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,QI5HoB,CAC9BX,KAAM,oBACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,+EACPD,KAAM,QH6HiB,CAC3BX,KAAM,iBACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QC9IoB,CAC9BX,KAAM,oBACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,qDACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,QNfmB,CAC7BX,KAAM,mBACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,qCACPD,KAAM,QG0GuB,CACjCX,KAAM,wBACNmB,KAAM,uBACNhB,MAAO,CACL,CACES,MAAO,YACPD,KAAM,MAER,CACEC,MAAO,uRACPD,KAAM,MAER,CACEC,MAAO,uCACPD,KAAM,MAER,CACEC,MAAO,mBACPD,KAAM,MAER,CACEC,MAAO,gBACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QHnIQ,CAClBX,KAAM,OACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,OACPD,KAAM,QAKkB,CAC5BX,KAAM,kBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,6CACPD,KAAM,QDkEU,CACpBX,KAAM,SACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,6BACPD,KAAM,MAER,CACEC,MAAO,wEACPD,KAAM,MAER,CACEC,MAAO,oBACPD,KAAM,MAER,CACEC,MAAO,uDACPD,KAAM,QG3HS,CACnBX,KAAM,QACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,QEoGe,CACzBX,KAAM,eACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,qBACPD,KAAM,MAER,CACEC,MAAO,YACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,uBACPD,KAAM,QN7GQ,CAClBX,KAAM,OACNmB,KAAM,cACNhB,MAAO,CACL,CACES,MAAO,OACPD,KAAM,QAKU,CACpBX,KAAM,SACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,SACPD,KAAM,QS5Bc,CACxBX,KAAM,cACNmB,KAAM,aACNhB,MAAO,CACL,CACES,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,MAER,CACEC,MAAO,8DACPD,KAAM,MAER,CACEC,MAAO,cACPD,KAAM,QTeU,CACpBX,KAAM,eACNmB,KAAM,aACNhB,MAAO,CACL,CACES,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,QW1Ee,CACzBX,KAAM,cACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,6BACPD,KAAM,QAKa,CACvBX,KAAM,YACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,+CACPD,KAAM,QAKe,CACzBX,KAAM,cACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,4DACPD,KAAM,MAER,CACEC,MAAO,wIACPD,KAAM,QX+CW,CACrBX,KAAM,UACNmB,KAAM,cACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,QU1EkB,CAC5BX,KAAM,mBACNmB,KAAM,sBACNhB,MAAO,CACL,CACES,MAAO,8BACPD,KAAM,QR8CoB,CAC9BX,KAAM,oBACNmB,KAAM,oBACNhB,MAAO,CACL,CACES,MAAO,+CACPD,KAAM,QIuFoB,CAC9BX,KAAM,yBACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,2BACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,MAER,CACEC,MAAO,+IACPD,KAAM,MAER,CACEC,MAAO,oBACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,wBACPD,KAAM,MAER,CACEC,MAAO,mCACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QKrLU,CACpBX,KAAM,SACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,isBACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,QVgGY,CACtBX,KAAM,WACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,oEACPD,KAAM,MAER,CACEC,MAAO,2DACPD,KAAM,MAER,CACEC,MAAO,qGACPD,KAAM,QG/HW,CACrBX,KAAM,UACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,4BACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QAKS,CACnBX,KAAM,QACNmB,KAAM,iBACNhB,MAAO,CACL,CACES,MAAO,QACPD,KAAM,QH+GgB,CAC1BX,KAAM,eACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,uBACPD,KAAM,QClGc,CACxBX,KAAM,cACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,cACPD,KAAM,QQ1DiB,CAC3BX,KAAM,iBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,4BACPD,KAAM,QHsJiB,CAC3BX,KAAM,iBACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,oCACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QG3JqB,CAC/BX,KAAM,qBACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,gCACPD,KAAM,QT0IwB,CAClCX,KAAM,wBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,2BACPD,KAAM,MAER,CACEC,MAAO,gFACPD,KAAM,MAER,CACEC,MAAO,4BACPD,KAAM,QC1GW,CACrBX,KAAM,UACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,oCACPD,KAAM,MAER,CACEC,MAAO,mBACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,6CACPD,KAAM,MAER,CACEC,MAAO,6BACPD,KAAM,QSvDQ,CAClBX,KAAM,OACNmB,KAAM,YACNhB,MAAO,CACL,CACES,MAAO,mMACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,sBACPD,KAAM,QV8HW,CACrBX,KAAM,UACNmB,KAAM,sBACNhB,MAAO,CACL,CACES,MAAO,kDACPD,KAAM,MAER,CACEC,MAAO,0BACPD,KAAM,MAER,CACEC,MAAO,oCACPD,KAAM,QGtJY,CACtBX,KAAM,WACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,QJoBa,CACvBX,KAAM,YACNmB,KAAM,cACNhB,MAAO,CACL,CACES,MAAO,YACPD,KAAM,QEoBkB,CAC5BX,KAAM,mBACNmB,KAAM,uBACNhB,MAAO,CACL,CACES,MAAO,uBACPD,KAAM,MAER,CACEC,MAAO,yBACPD,KAAM,MAER,CACEC,MAAO,2CACPD,KAAM,MAER,CACEC,MAAO,8BACPD,KAAM,QG2CY,CACtBX,KAAM,WACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,WACPD,KAAM,QH5CY,CACtBX,KAAM,mBACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,oCACPD,KAAM,QQrGc,CACxBX,KAAM,aACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,wBACPD,KAAM,QTqKuB,CACjCX,KAAM,yBACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,qCACPD,KAAM,QUlJU,CACpBX,KAAM,SACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,wGACPD,KAAM,QTyDS,CACnBX,KAAM,QACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,QACPD,KAAM,QS1DiB,CAC3BX,KAAM,gBACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,gEACPD,KAAM,QDjDkB,CAC5BX,KAAM,kBACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,6BACPD,KAAM,QRoGS,CACnBX,KAAM,QACNmB,KAAM,oBACNhB,MAAO,CACL,CACES,MAAO,4BACPD,KAAM,MAER,CACEC,MAAO,wBACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,QSlEe,CACzBX,KAAM,cACNmB,KAAM,mBACNhB,MAAO,CACL,CACES,MAAO,4FACPD,KAAM,QL4Gc,CACxBX,KAAM,cACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,eACPD,KAAM,MAER,CACEC,MAAO,mBACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,QACPD,KAAM,MAER,CACEC,MAAO,SACPD,KAAM,MAER,CACEC,MAAO,gBACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,mCACPD,KAAM,MAER,CACEC,MAAO,iCACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,eACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,MAER,CACEC,MAAO,8DACPD,KAAM,QC5FiB,CAC3BX,KAAM,iBACNmB,KAAM,gBACNhB,MAAO,CACL,CACES,MAAO,0BACPD,KAAM,MAER,CACEC,MAAO,4BACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,MAER,CACEC,MAAO,+BACPD,KAAM,MAER,CACEC,MAAO,0BACPD,KAAM,MAER,CACEC,MAAO,8BACPD,KAAM,MAER,CACEC,MAAO,wBACPD,KAAM,MAER,CACEC,MAAO,6DACPD,KAAM,QNUoB,CAC9BX,KAAM,oBACNmB,KAAM,kBACNhB,MAAO,CACL,CACES,MAAO,yCACPD,KAAM,QOjMoB,CAC9BX,KAAM,oBACNmB,KAAM,eACNhB,MAAO,CACL,CACES,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,+BACPD,KAAM,MAER,CACEC,MAAO,gEACPD,KAAM,MAER,CACEC,MAAO,OACPD,KAAM,MAER,CACEC,MAAO,WACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QNwGkB,CAC5BX,KAAM,kBACNmB,KAAM,uBACNhB,MAAO,CACL,CACES,MAAO,8BACPD,KAAM,MAER,CACEC,MAAO,yBACPD,KAAM,MAER,CACEC,MAAO,iCACPD,KAAM,MAER,CACEC,MAAO,kBACPD,KAAM,MAER,CACEC,MAAO,UACPD,KAAM,QSlFiB,CAC3BX,KAAM,gBACNmB,KAAM,qBACNhB,MAAO,CACL,CACES,MAAO,qFACPD,KAAM,MAER,CACEC,MAAO,0LACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,MAER,CACEC,MAAO,eACPD,KAAM,MAER,CACEC,MAAO,aACPD,KAAM,eCzIG,SAASc,IACtB,IAAMC,EAAa,SAAAC,GAAQ,IAAAC,EACJD,EAAKE,MAAM,KADPC,EAAA/C,OAAAgD,EAAA,EAAAhD,CAAA6C,EAAA,GAClBvC,EADkByC,EAAA,GACZE,EADYF,EAAA,GAAAG,EAEE5C,EAAK6C,OAAOL,MAAM,KAFpBM,EAAApD,OAAAgD,EAAA,EAAAhD,CAAAkD,EAAA,GAElBG,EAFkBD,EAAA,GAEbE,EAFaF,EAAA,GAENG,EAFMH,EAAA,GAAAI,EAGFP,EAAKE,OAAOL,MAAM,KAHhBW,EAAAzD,OAAAgD,EAAA,EAAAhD,CAAAwD,EAAA,GAGlBE,EAHkBD,EAAA,GAGZE,EAHYF,EAAA,GAInBG,EAAWN,EAAQ,GAAR,IAAAO,OAAiBP,GAAjB,GAAAO,OAA8BP,GACzCQ,EAAST,EAAM,GAAN,IAAAQ,OAAeR,GAAf,GAAAQ,OAA0BR,GACzC,SAAAQ,OAAUN,EAAV,KAAAM,OAAkBD,EAAlB,KAAAC,OAA8BC,EAA9B,KAAAD,OAAwCH,EAAxC,KAAAG,OAAgDF,IAE5CI,EAAQC,EAAMC,KAAK,SAACnD,EAAGoD,GAAM,IACnBC,EAAuBrD,EAA7BG,KAAmBmD,EAAUtD,EAAhBsB,KACPiC,EAAuBH,EAA7BjD,KAAmBqD,EAAUJ,EAAhB9B,KACfmC,EAAQ5B,GAAY,IAAIpC,MAAQiE,eAAe,QAAS,CAAErC,SAAUiC,KACpEK,EAAQ9B,GAAY,IAAIpC,MAAQiE,eAAe,QAAS,CAAErC,SAAUmC,KAC1E,OAAIC,EAAQE,GACF,EACCA,EAAQF,EACV,EACEJ,EAAMO,cAAgBL,EAAMK,eAC7B,EACCL,EAAMK,cAAgBP,EAAMO,cAC9B,EAEA,IAGX,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACd+C,EAAM1C,IAAI,SAAC4B,EAAM1B,GAAP,OAAiBV,EAAAC,EAAAC,cAAC4D,EAAD,CAAOhD,IAAKJ,EAAOH,MAAO6B,EAAK7B,MAAOH,KAAMgC,EAAKhC,KAAMmB,KAAMa,EAAKb,WCvBhFwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5607f70d.chunk.js","sourcesContent":["import React from \"react\";\nimport Flag from \"react-world-flags\";\nimport \"../styles/Clock.css\";\n\nexport default class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render(props) {\n    return (\n      <div>\n        <div className=\"album-item\">\n          <h2>{this.props.city}</h2>\n          <div style={{ textAlign: \"center\" }}>\n            {\"flags\" in this.props && this.props.flags && this.props.flags.map((flag, index, arr) => {\n              if (index === (arr.length - 1)) {\n                return (\n                  <Flag key={index} code={flag.code} title={flag.title} height=\"20\" style={{ maxWidth: \"35px\" }} />\n                )\n              }\n            return (\n              <Flag key={index} code={flag.code} title={flag.title} height=\"20\" style={{marginRight: \"5px\", marginInline: \"5px\", maxWidth: \"35px\"}} />\n            )\n            })}\n          </div>\n          <p>{this.state.date.toLocaleDateString(\"en-GB\", {timeZone: this.props.zone})}</p>\n          <p>{this.state.date.toLocaleTimeString(\"en-GB\", { timeZone: this.props.zone})}</p>\n        </div>\n      </div>\n      // <React.Fragment>\n      //   <h2>{this.props.city}</h2>\n      //   <p>\n      //     It is{\" \"}\n      //     {this.state.date.toLocaleString(\"en-GB\", {\n      //       timeZone: this.props.zone\n      //     })}\n      //   </p>\n      // </React.Fragment>\n    );\n  }\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n}\n","import { CaboVerde, CentralAfrica, EasternAfrica, IndianOcean, MiddleWestAfrica, WestAfrica } from \"./timezones/Africa\"\nimport { Antilles } from \"./timezones/Antilles\"\nimport { EasternAustralia, LordHoweIsland, NorfolkIsland, NorthernAustralia, Queensland, SouthAustralia } from \"./timezones/Australia\"\nimport { China, JapanKorea } from \"./timezones/EastAsia\"\nimport { CentralEurope, EasternEurope, NorthAtlantic, WesternEurope } from \"./timezones/Europe\"\nimport { CentralIndonesia, EasternIndonesia, WesternIndonesia } from \"./timezones/Indonesia\"\nimport { BrazilianIslands, CentralAmerica, CentralSouthAmerica, Chile, Colombia, EasternSouthAmerica, Paraguay } from \"./timezones/LatinAmerica\"\nimport { Afghanistan, Arabia, Iran, Israel, Jordan, Lebanon, Palestine } from \"./timezones/MiddleEast\"\nimport { Alaska, AleutianIslands, Arizona, AtlanticOcean, Central, CoteNord, Cuba, Eastern, Hawaii, Mountain, Newfoundland, NorthwesternAtlantic, Pacific, SaintPierreMiquelon, WesternGreenland } from \"./timezones/NorthAmerica\"\nimport { AmericanSamoa, Chatham, EasternKiribati, Fiji, GambierIslands, MarquesasIslands, NewZealand, Oceania, PapuaNewGuinea, Pitcairn, Samoa, Tonga, WesternOceania } from \"./timezones/Oceania\"\nimport { Kaliningrad, Kamchatka, Krasnoyarsk, Moscow, Omsk, Samara, Srednekolymsk, Vladivostok, Yekaterinburg } from \"./timezones/Russia\"\nimport { Bangladesh, India, Myanmar, Nepal, Pakistan } from \"./timezones/SouthAsia\"\n\nexport default [\n  Afghanistan,\n  Alaska,\n  AleutianIslands,\n  AmericanSamoa,\n  Antilles,\n  Arabia,\n  Arizona,\n  AtlanticOcean,\n  Bangladesh,\n  BrazilianIslands,\n  CaboVerde,\n  Central,\n  CentralAfrica,\n  CentralAmerica,\n  CentralEurope,\n  CentralIndonesia,\n  CentralSouthAmerica,\n  Chatham,\n  Chile,\n  China,\n  Colombia,\n  CoteNord,\n  Cuba,\n  Eastern,\n  EasternAfrica,\n  EasternAustralia,\n  EasternEurope,\n  EasternIndonesia,\n  EasternKiribati,\n  EasternSouthAmerica,\n  Fiji,\n  GambierIslands,\n  Hawaii,\n  India,\n  IndianOcean,\n  Iran,\n  Israel,\n  JapanKorea,\n  Jordan,\n  Kaliningrad,\n  Kamchatka,\n  Krasnoyarsk,\n  Lebanon,\n  LordHoweIsland,\n  MarquesasIslands,\n  MiddleWestAfrica,\n  Moscow,\n  Mountain,\n  Myanmar,\n  Nepal,\n  Newfoundland,\n  NewZealand,\n  NorfolkIsland,\n  NorthAtlantic,\n  NorthernAustralia,\n  NorthwesternAtlantic,\n  Oceania,\n  Omsk,\n  Pacific,\n  Pakistan,\n  Palestine,\n  PapuaNewGuinea,\n  Paraguay,\n  Pitcairn,\n  Queensland,\n  SaintPierreMiquelon,\n  Samara,\n  Samoa,\n  Srednekolymsk,\n  SouthAustralia,\n  Tonga,\n  Vladivostok,\n  WestAfrica,\n  WesternEurope,\n  WesternGreenland,\n  WesternIndonesia,\n  WesternOceania,\n  Yekaterinburg,\n]","export const Afghanistan = {\n  city: \"Afghanistan\",\n  zone: \"Asia/Kabul\",\n  flags: [\n    {\n      title: \"Afghanistan\",\n      code: \"AF\"\n    }\n  ]\n}\n\nexport const Arabia = {\n  city: \"Arabia\",\n  zone: \"Asia/Riyadh\",\n  flags: [\n    {\n      title: \"Bahrain\",\n      code: \"BH\"\n    },\n    {\n      title: \"Iraq\",\n      code: \"IQ\"\n    },\n    {\n      title: \"Kuwait\",\n      code: \"KW\"\n    },\n    {\n      title: \"Qatar\",\n      code: \"QA\"\n    },\n    {\n      title: \"Saudi Arabia\",\n      code: \"SA\"\n    },\n    {\n      title: \"Yemen\",\n      code: \"YE\"\n    }\n  ]\n}\n\nexport const Iran = {\n  city: \"Iran\",\n  zone: \"Asia/Tehran\",\n  flags: [\n    {\n      title: \"Iran\",\n      code: \"IR\"\n    }\n  ]\n}\n\nexport const Israel = {\n  city: \"Israel\",\n  zone: \"Asia/Jerusalem\",\n  flags: [\n    {\n      title: \"Israel\",\n      code: \"IL\"\n    },\n  ]\n}\n\nexport const Jordan = {\n  city: \"Jordan/Syria\",\n  zone: \"Asia/Amman\",\n  flags: [\n    {\n      title: \"Jordan\",\n      code: \"JO\"\n    },\n    {\n      title: \"Syria\",\n      code: \"SY\"\n    }\n  ]\n}\n\nexport const Lebanon = {\n  city: \"Lebanon\",\n  zone: \"Asia/Beirut\",\n  flags: [\n    {\n      title: \"Lebanon\",\n      code: \"LB\"\n    }\n  ]\n}\n\nexport const Palestine = {\n  city: \"Palestine\",\n  zone: \"Asia/Hebron\",\n  flags: [\n    {\n      title: \"Palestine\",\n      code: \"PS\"\n    },\n  ]\n}","export const Alaska = {\n  city: \"Alaska\",\n  zone: \"America/Anchorage\",\n  flags: [\n    {\n      title: \"United States: AK\",\n      code: \"US\"\n    },\n  ]\n}\n\nexport const AleutianIslands = {\n  city: \"Aleutian Islands\",\n  zone: \"America/Atka\",\n  flags: [\n    {\n      title: \"United States: AK\",\n      code: \"US\"\n    }\n  ]\n}\n\nexport const Arizona = {\n  city: \"Arizona\",\n  zone: \"America/Phoenix\",\n  flags: [\n    {\n      title: \"Canada: Yukon\",\n      code: \"CA\"\n    },\n    {\n      title: \"Mexico: Sonora, Revillagigedo Islands\",\n      code: \"MX\"\n    },\n    {\n      title: \"United States: AZ (excluding Navajo Nation Reservation)\",\n      code: \"US\"\n    }\n  ]\n}\n\nexport const AtlanticOcean = {\n  city: \"Atlantic Ocean\",\n  zone: \"Atlantic/Azores\",\n  flags: [\n    {\n      title: \"Greenland (Denmark): Ittoqqortoormit\",\n      code: \"GL\"\n    },\n    {\n      title: \"Portugal: Azores\",\n      code: \"PT\"\n    },\n  ]\n}\n\nexport const Central = {\n  city: \"Central\",\n  zone: \"America/Chicago\",\n  flags: [\n    {\n      title: \"Canada: Manitoba, Nunavut, Ontario\",\n      code: \"CA\"\n    },\n    {\n      title: \"Mexico: Aguascalientes, Campeche, Chiapas, Coahuila, Colima, Distrito Federal, Durango, Guanajuato, Guerrero, Hidalgo, Jalisco, México, Michoacán, Morelos, Nuevo León, Oaxaca, Puebla, Querétaro, San Luis Potosí, Tabasco, Tamaulipas, Tlaxcala, Veracruz, Yucatán, Zacatecas\",\n      code: \"MX\"\n    },\n    {\n      title: \"United States: AL, AR, FL, IA, IL, IN, KS, KY, LA, MN, MO, MS, ND, NE, OK, SD, TN, TX, WI\",\n      code: \"US\"\n    }\n  ]\n}\n\nexport const CoteNord = {\n  city: \"Côte-Nord\",\n  zone: \"America/Blanc-Sablon\",\n  flags: [\n    {\n      title: \"Canada: QC (east of 63°W)\",\n      code: \"CA\"\n    },\n  ]\n}\n\nexport const Cuba = {\n  city: \"Cuba\",\n  zone: \"America/Havana\",\n  flags: [\n    {\n      title: \"Cuba\",\n      code: \"CU\"\n    },\n  ]\n}\n\nexport const Eastern = {\n  city: \"Eastern\",\n  zone: \"America/New_York\",\n  flags: [\n    {\n      title: \"Bahamas\",\n      code: \"BS\"\n    },\n    {\n      title: \"Canada: Nunavut, Ontario, Québec\",\n      code: \"CA\"\n    },\n    {\n      title: \"Haiti\",\n      code: \"HT\"\n    },\n    {\n      title: \"Turks and Caicos Islands (United Kingdom)\",\n      code: \"TC\"\n    },\n    {\n      title: \"United States: CT, DC, DE, FL, GA, IN, KY, MA, MD, ME, MI, NC, NH, NJ, NY, OH, PA, RI, SC, TN, VA, VT, WV\",\n      code: \"US\"\n    },\n  ]\n}\n\nexport const Hawaii = {\n  city: \"Hawaii\",\n  zone: \"Pacific/Honolulu\",\n  flags: [\n    {\n      title: \"Cook Islands (New Zealand)\",\n      code: \"CK\"\n    },\n    {\n      title: \"French Polynesia (France): Austral Islands, Society Islands, Tuamotus\",\n      code: \"PF\"\n    },\n    {\n      title: \"United States: HI\",\n      code: \"US\"\n    },\n    {\n      title: \"United States Minor Outlying Islands: Johnston Atoll\",\n      code: \"UM\"\n    },\n  ]\n}\n\nexport const Mountain = {\n  city: \"Mountain\",\n  zone: \"America/Denver\",\n  flags: [\n    {\n      title: \"Canada: Alberta, British Columbia, Northwest Territories, Nunavut\",\n      code: \"CA\"\n    },\n    {\n      title: \"Mexico: Baja California Sur, Chihuahua, Nayarit, Sinaloa\",\n      code: \"MX\"\n    },\n    {\n      title: \"United States: AZ (only Navajo Nation Reservation), CO, ID, KS, MT, ND, NE, NM, OR, SD, TX, UT, WY\",\n      code: \"US\"\n    }\n  ]\n}\n\nexport const Newfoundland = {\n  city: \"Newfoundland\",\n  zone: \"America/St_Johns\",\n  flags: [\n    {\n      title: \"Canada: Newfoundland\",\n      code: \"CA\"\n    }\n  ]\n}\n\nexport const NorthwesternAtlantic = {\n  city: \"Northwestern Atlantic\",\n  zone: \"America/Halifax\",\n  flags: [\n    {\n      title: \"Bermuda (United Kingdom)\",\n      code: \"BM\"\n    },\n    {\n      title: \"Canada: New Brunswick, Labrador, Nova Scotia, Prince Edward Island, Québec\",\n      code: \"CA\"\n    },\n    {\n      title: \"Greenland: Thule Air Base\",\n      code: \"GL\"\n    }\n  ]\n}\n\nexport const Pacific = {\n  city: \"Pacific\",\n  zone: \"America/Los_Angeles\",\n  flags: [\n    {\n      title: \"Canada: British Columbia, Northwest Territories\",\n      code: \"CA\"\n    },\n    {\n      title: \"Mexico: Baja California\",\n      code: \"MX\"\n    },\n    {\n      title: \"United States: CA, ID, NV, OR, WA\",\n      code: \"US\"\n    }\n  ]\n}\n\nexport const SaintPierreMiquelon = {\n  city: \"St. Pierre et Miquelon\",\n  zone: \"America/Miquelon\",\n  flags: [\n    {\n      title: \"Saint-Pierre and Miquelon (France)\",\n      code: \"PM\"\n    },\n  ]\n}\n\nexport const Saskatchewan = {\n  city: \"Saskatchewan\",\n  zone: \"America/Regina\",\n  flags: [\n    {\n      title: \"Canada: Saskatchewan\",\n      code: \"CA\"\n    }\n  ]\n}\n\nexport const WesternGreenland = {\n  city: \"Western Greenland\",\n  zone: \"America/Godthab\",\n  flags: [\n    {\n      title: \"Greenland (Denmark): Western Greenland\",\n      code: \"GL\",\n    },\n  ]\n}","export const AmericanSamoa = {\n  city: \"American Samoa\",\n  zone: \"Pacific/Pago_Pago\",\n  flags: [\n    {\n      title: \"American Samoa (United States)\",\n      code: \"AS\"\n    },\n    {\n      title: \"United States Minor Outlying Islands: Midway Islands, Palmyra Atoll\",\n      code: \"UM\"\n    },\n    {\n      title: \"Niue (New Zealand)\",\n      code: \"NU\"\n    }\n  ]\n}\n\nexport const Chatham = {\n  city: \"Chatham\",\n  zone: \"Pacific/Chatham\",\n  flags: [\n    {\n      title: \"New Zealand: Chatham Islands\",\n      code: \"NZ\"\n    }\n  ]\n}\n\nexport const EasternKiribati = {\n  city: \"Eastern Kiribati\",\n  zone: \"Pacific/Kiritimati\",\n  flags: [\n    {\n      title: \"Kiribati: Kiritimati, Line Islands\",\n      code: \"KI\"\n    }\n  ]\n}\n\nexport const Fiji = {\n  city: \"Fiji\",\n  zone: \"Pacific/Fiji\",\n  flags: [\n    {\n      title: \"Fiji\",\n      code: \"FJ\"\n    },\n  ]\n}\n\nexport const GambierIslands = {\n  city: \"Gambier Islands\",\n  zone: \"Pacific/Gambier\",\n  flags: [\n    {\n      title: \"French Polynesia (France): Gambier Islands\",\n      code: \"PF\"\n    }\n  ]\n}\n\nexport const MarquesasIslands = {\n  city: \"Marquesas Islands\",\n  zone: \"Pacific/Marquesas\",\n  flags: [\n    {\n      title: \"French Polynesia (France): Marquesas Islands\",\n      code: \"PF\"\n    }\n  ]\n}\n\nexport const NewZealand = {\n  city: \"New Zealand\",\n  zone: \"Pacific/Auckland\",\n  flags: [\n    {\n      title: \"New Zealand\",\n      code: \"NZ\"\n    }\n  ]\n}\n\nexport const Oceania = {\n  city: \"Oceania\",\n  zone: \"Pacific/Wake\",\n  flags: [\n    {\n      title: \"Kiribati: Banaba, Gilbert Islands\",\n      code: \"KI\"\n    },\n    {\n      title: \"Marshall Islands\",\n      code: \"MH\"\n    },\n    {\n      title: \"Nauru\",\n      code: \"NR\"\n    },\n    {\n      title: \"Tuvalu\",\n      code: \"TV\"\n    },\n    {\n      title: \"United States Minor Outlying Islands: Wake\",\n      code: \"UM\"\n    },\n    {\n      title: \"Wallis and Futuna (France)\",\n      code: \"WF\"\n    }\n  ]\n}\n\nexport const PapuaNewGuinea = {\n  city: \"Papua New Guinea\",\n  zone: \"Pacific/Port_Moresby\",\n  flags: [\n    {\n      title: \"Guam (United States)\",\n      code: \"GU\"\n    },\n    {\n      title: \"Micronesia: Chuuk, Yap\",\n      code: \"FM\"\n    },\n    {\n      title: \"Northern Mariana Islands (United States)\",\n      code: \"MP\"\n    },\n    {\n      title: \"Papua New Guinea: main part\",\n      code: \"PG\"\n    }\n  ]\n}\n\nexport const Pitcairn = {\n  city: \"Pitcairn Islands\",\n  zone: \"Pacific/Pitcairn\",\n  flags: [\n    {\n      title: \"Pitcairn Islands (United Kingdom)\",\n      code: \"PN\"\n    }\n  ]\n}\n\nexport const Samoa = {\n  city: \"Samoa\",\n  zone: \"Pacific/Apia\",\n  flags: [\n    {\n      title: \"Samoa\",\n      code: \"WS\"\n    }\n  ]\n}\n\nexport const Tonga = {\n  city: \"Tonga\",\n  zone: \"Pacific/Tongatapu\",\n  flags: [\n    {\n      title: \"Kiribati: Phoenix Islands\",\n      code: \"KI\"\n    },\n    {\n      title: \"Tokelau (New Zealand)\",\n      code: \"TK\"\n    },\n    {\n      title: \"Tonga\",\n      code: \"TO\"\n    }\n  ]\n}\n\nexport const WesternOceania = {\n  city: \"Western Oceania\",\n  zone: \"Pacific/Bougainville\",\n  flags: [\n    {\n      title: \"Micronesia: Kosrae, Pohnpei\",\n      code: \"FM\"\n    },\n    {\n      title: \"New Caledonia (France)\",\n      code: \"NC\"\n    },\n    {\n      title: \"Papua New Guinea: Bougainville\",\n      code: \"PG\"\n    },\n    {\n      title: \"Solomon Islands\",\n      code: \"SB\"\n    },\n    {\n      title: \"Vanuatu\",\n      code: \"VU\"\n    }\n  ]\n}","export const Antilles = {\n  city: \"Antilles\",\n  zone: \"America/Barbados\",\n  flags: [\n    {\n      title: \"American Virgin Islands (United States)\",\n      code: \"VI\"\n    },\n    {\n      title: \"Anguilla (United Kingdom)\",\n      code: \"AI\"\n    },\n    {\n      title: \"Antigua and Barbuda\",\n      code: \"AG\"\n    },\n    {\n      title: \"Aruba (Netherlands)\",\n      code: \"AW\"\n    },\n    {\n      title: \"Barbados\",\n      code: \"BB\"\n    },\n    {\n      title: \"British Virgin Islands (United Kingdom)\",\n      code: \"VG\"\n    },\n    {\n      title: \"Curaçao (Netherlands)\",\n      code: \"CW\",\n    },\n    {\n      title: \"Dominica\",\n      code: \"DM\"\n    },\n    {\n      title: \"Dominican Republic\",\n      code: \"DO\"\n    },\n    {\n      title: \"France: Guadeloupe, Saint Martin, Saint Barthélemy\",\n      code: \"GP\"\n    },\n    {\n      title: \"Grenada\",\n      code: \"GD\"\n    },\n    {\n      title: \"Martinique (France)\",\n      code: \"MQ\"\n    },\n    {\n      title: \"Montserrat (United Kingdom)\",\n      code: \"MS\"\n    },\n    {\n      title: \"Netherlands: Bonaire, Saba, Sint Eustatius\",\n      code: \"BQ\"\n    },\n    {\n      title: \"Puerto Rico (United States)\",\n      code: \"PR\"\n    },\n    {\n      title: \"Saint Kitts and Nevis\",\n      code: \"KN\"\n    },\n    {\n      title: \"Saint Lucia\",\n      code: \"LC\"\n    },\n    {\n      title: \"Saint Vincent and the Grenadines\",\n      code: \"VC\"\n    },\n    {\n      title: \"Sint Maarten (Netherlands)\",\n      code: \"SX\"\n    },\n    {\n      title: \"Trinidad and Tobago\",\n      code: \"TT\"\n    },\n  ]\n}","export const Bangladesh = {\n  city: \"Bangladesh\",\n  zone: \"Asia/Dhaka\",\n  flags: [\n    {\n      title: \"Bangladesh\",\n      code: \"BD\"\n    },\n    {\n      title: \"Bhutan\",\n      code: \"BT\"\n    },\n    {\n      title: \"British Indian Ocean Territory (United Kingdom)\",\n      code: \"IO\"\n    }\n  ]\n}\n\nexport const India = {\n  city: \"India\",\n  zone: \"Asia/Kolkata\",\n  flags: [\n    {\n      title: \"India\",\n      code: \"IN\"\n    },\n    {\n      title: \"Sri Lanka\",\n      code: \"LK\"\n    }\n  ]\n}\n\nexport const Myanmar = {\n  city: \"Myanmar\",\n  zone: \"Asia/Rangoon\",\n  flags: [\n    {\n      title: \"Cocos Islands (Australia)\",\n      code: \"CC\"\n    },\n    {\n      title: \"Myanmar\",\n      code: \"MM\"\n    }\n  ]\n}\n\nexport const Nepal = {\n  city: \"Nepal\",\n  zone: \"Asia/Kathmandu\",\n  flags: [\n    {\n      title: \"Nepal\",\n      code: \"NP\"\n    }\n  ]\n}\n\nexport const Pakistan = {\n  city: \"Pakistan\",\n  zone: \"Asia/Karachi\",\n  flags: [\n    {\n      title: \"Maldives\",\n      code: \"MV\"\n    },\n    {\n      title: \"Pakistan\",\n      code: \"PK\"\n    },\n  ]\n}","export const BrazilianIslands = {\n  city: \"Brazilian Islands\",\n  zone: \"America/Noronha\",\n  flags: [\n    {\n      title: \"Brazil: Atol das Rocas, Fernando de Noronha, Martim Vaz, Trinidade, Saint Peter and Saint Paul Archipelago\",\n      code: \"BR\"\n    },\n    {\n      title: \"South Georgia and the South Sandwich Islands (United Kingdom)\",\n      code: \"GS\"\n    }\n  ]\n}\n\nexport const CentralAmerica = {\n  city: \"Central America\",\n  zone: \"America/El_Salvador\",\n  flags: [\n    {\n      title: \"Belize\",\n      code: \"BZ\"\n    },\n    {\n      title: \"Canada: Saskatchewan\",\n      code: \"CA\"\n    },\n    {\n      title: \"Chile: Easter Island\",\n      code: \"CL\"\n    },\n    {\n      title: \"Costa Rica\",\n      code: \"CR\"\n    },\n    {\n      title: \"Ecuador: Galápagos\",\n      code: \"EC\"\n    },\n    {\n      title: \"El Salvador\",\n      code: \"SV\"\n    },\n    {\n      title: \"Guatemala\",\n      code: \"GT\"\n    },\n    {\n      title: \"Honduras\",\n      code: \"HN\"\n    },\n    {\n      title: \"Nicaragua\",\n      code: \"NI\"\n    },\n  ]\n}\n\nexport const CentralSouthAmerica = {\n  city: \"Central South America\",\n  zone: \"America/Caracas\",\n  flags: [\n    {\n      title: \"Bolivia\",\n      code: \"BO\"\n    },\n    {\n      title: \"Brazil: Amazonas (eastern part), Mato Grosso, Mato Grosso do Sul, Rondônia, Roraima\",\n      code: \"BR\"\n    },\n    {\n      title: \"Guyana\",\n      code: \"GY\"\n    },\n    {\n      title: \"Venezuela\",\n      code: \"VE\"\n    }\n  ]\n}\n\nexport const Chile = {\n  city: \"Chile\",\n  zone: \"America/Santiago\",\n  flags: [\n    {\n      title: \"Chile: mainland\",\n      code: \"CL\"\n    },\n  ]\n}\n\nexport const Colombia = {\n  city: \"Colombia\",\n  zone: \"America/Bogota\",\n  flags: [\n    {\n      title: \"Brazil: Acre, Amazonas (western part)\",\n      code: \"BR\"\n    },\n    {\n      title: \"Cayman Islands\",\n      code: \"KY\"\n    },\n    {\n      title: \"Colombia\",\n      code: \"CO\"\n    },\n    {\n      title: \"Ecuador\",\n      code: \"EC\"\n    },\n    {\n      title: \"Jamaica\",\n      code: \"JM\"\n    },\n    {\n      title: \"Mexico: Quintana Roo\",\n      code: \"MX\"\n    },\n    {\n      title: \"Panama\",\n      code: \"PA\"\n    },\n    {\n      title: \"Peru\",\n      code: \"PE\"\n    },\n  ]\n}\n\nexport const EasterIsland = {\n  city: \"Easter Island\",\n  zone: \"Pacific/Easter\",\n  flags: [\n    {\n      title: \"Chile: Easter Island\",\n      code: \"CL\"\n    },\n  ]\n}\n\nexport const EasternSouthAmerica = {\n  city: \"Eastern South America\",\n  zone: \"America/Buenos_Aires\",\n  flags: [\n    {\n      title: \"Argentina\",\n      code: \"AR\"\n    },\n    {\n      title: \"Brazil: Alagoas, Amapá, Bahia, Ceará, Distrito Federal, Espírito Santo, Goiás, Maranhão, Minas Gerais, Pará, Paraíba, Paraná, Pernambuco, Piauí, Rio de Janeiro, Rio Grande do Norte, Rio Grande do Sul, Santa Catarina, São Paulo, Sergipe, Tocantins\",\n      code: \"BR\"\n    },\n    {\n      title: \"Chile: Magellan and Antarctic region\",\n      code: \"CL\"\n    },\n    {\n      title: \"Falkland Islands\",\n      code: \"FK\"\n    },\n    {\n      title: \"French Guiana\",\n      code: \"GF\"\n    },\n    {\n      title: \"Suriname\",\n      code: \"SR\"\n    },\n    {\n      title: \"Uruguay\",\n      code: \"UY\"\n    }\n  ]\n}\n\nexport const Paraguay = {\n  city: \"Paraguay\",\n  zone: \"America/Asuncion\",\n  flags: [\n    {\n      title: \"Paraguay\",\n      code: \"PY\"\n    },\n  ]\n}","export const CaboVerde = {\n  city: \"Cabo Verde\",\n  zone: \"Atlantic/Cape_Verde\",\n  flags: [\n    {\n      title: \"Cabo Verde\",\n      code: \"CV\"\n    }\n  ]\n}\n\nexport const CentralAfrica = {\n  city: \"Eastern Central Africa\",\n  zone: \"Africa/Cairo\",\n  flags: [\n    {\n      title: \"Botswana\",\n      code: \"BW\"\n    },\n    {\n      title: \"Burundi\",\n      code: \"BI\"\n    },\n    {\n      title: \"Democratic Republic of the Congo: Bas-Uele, Haut-Katanga, Haut-Lomami, Haut-Uele, Ituri, Kasaï, Kasaï-Central, Kasaï-Oriental, Lomami, Lualaba, Maniema, Nord-Kivu, Sankuru, Sud-Kivu, Tanganjika, Tshopo\",\n      code: \"CD\"\n    },\n    {\n      title: \"Egypt\",\n      code: \"EG\"\n    },\n    {\n      title: \"eSwatini\",\n      code: \"SZ\"\n    },\n    {\n      title: \"Lesotho\",\n      code: \"LS\"\n    },\n    {\n      title: \"Libya\",\n      code: \"LY\"\n    },\n    {\n      title: \"Malawi\",\n      code: \"MW\"\n    },\n    {\n      title: \"Mozambique\",\n      code: \"MZ\"\n    },\n    {\n      title: \"Namibia\",\n      code: \"NA\"\n    },\n    {\n      title: \"Rwanda\",\n      code: \"RW\"\n    },\n    {\n      title: \"South Africa\",\n      code: \"ZA\"\n    },\n    {\n      title: \"South Sudan\",\n      code: \"SS\"\n    },\n    {\n      title: \"Sudan\",\n      code: \"SD\"\n    },\n    {\n      title: \"Zambia\",\n      code: \"ZM\"\n    },\n    {\n      title: \"Zimbabwe\",\n      code: \"ZW\"\n    }\n  ]\n}\n\nexport const EasternAfrica = {\n  city: \"East Africa\",\n  zone: \"Africa/Addis_Ababa\",\n  flags: [\n    {\n      title: \"Comoros\",\n      code: \"KM\"\n    },\n    {\n      title: \"Djibouti\",\n      code: \"DJ\"\n    },\n    {\n      title: \"Eritrea\",\n      code: \"ER\"\n    },\n    {\n      title: \"Ethiopia\",\n      code: \"ET\"\n    },\n    {\n      title: \"France: Mayotte\",\n      code: \"YT\"\n    },\n    {\n      title: \"Kenya\",\n      code: \"KE\"\n    },\n    {\n      title: \"Madagascar\",\n      code: \"MG\"\n    },\n    {\n      title: \"Somalia\",\n      code: \"SO\"\n    },\n    {\n      title: \"Tanzania\",\n      code: \"TZ\"\n    },\n    {\n      title: \"Uganda\",\n      code: \"UG\"\n    }\n  ]\n}\n\nexport const IndianOcean = {\n  city: \"Indian Ocean\",\n  zone: \"Indian/Reunion\",\n  flags: [\n    {\n      title: \"France: Réunion\",\n      code: \"RE\"\n    },\n    {\n      title: \"Mauritius\",\n      code: \"MU\"\n    },\n    {\n      title: \"Oman\",\n      code: \"OM\"\n    },\n    {\n      title: \"Seychelles\",\n      code: \"SC\"\n    },\n    {\n      title: \"United Arab Emirates\",\n      code: \"AE\"\n    }\n  ]\n}\n\nexport const MiddleWestAfrica = {\n  city: \"Western Central Africa\",\n  zone: \"Africa/Luanda\",\n  flags: [\n    {\n      title: \"Algeria\",\n      code: \"DZ\"\n    },\n    {\n      title: \"Angola\",\n      code: \"AO\"\n    },\n    {\n      title: \"Benin\",\n      code: \"BJ\"\n    },\n    {\n      title: \"Cameroon\",\n      code: \"CM\"\n    },\n    {\n      title: \"Central African Republic\",\n      code: \"CF\"\n    },\n    {\n      title: \"Chad\",\n      code: \"TD\"\n    },\n    {\n      title: \"Democratic Republic of the Congo: Équateur, Kinshasa, Kongo Central, Kwango, Kwilu, Mai-Ndombe, Mongala, Nord-Ubangi, Sud-Ubangi, Tshuapa\",\n      code: \"CD\"\n    },\n    {\n      title: \"Equatorial Guinea\",\n      code: \"GQ\"\n    },\n    {\n      title: \"Gabon\",\n      code: \"GA\"\n    },\n    {\n      title: \"Morocco\",\n      code: \"MA\"\n    },\n    {\n      title: \"Niger\",\n      code: \"NE\"\n    },\n    {\n      title: \"Nigeria\",\n      code: \"NG\"\n    },\n    {\n      title: \"Republic of the Congo\",\n      code: \"CG\"\n    },\n    {\n      title: \"Sahrawi Arab Democratic Republic\",\n      code: \"EH\"\n    },\n    {\n      title: \"Tunisia\",\n      code: \"TN\"\n    },\n  ]\n}\n\nexport const WestAfrica = {\n  city: \"West Africa\",\n  zone: \"Africa/Bamako\",\n  flags: [\n    {\n      title: \"Burkina Faso\",\n      code: \"BF\"\n    },\n    {\n      title: \"Côte d'Ivoire\",\n      code: \"CI\"\n    },\n    {\n      title: \"The Gambia\",\n      code: \"GM\"\n    },\n    {\n      title: \"Ghana\",\n      code: \"GH\"\n    },\n    {\n      title: \"Guinea\",\n      code: \"GN\"\n    },\n    {\n      title: \"Guinea-Bissau\",\n      code: \"GW\"\n    },\n    {\n      title: \"Liberia\",\n      code: \"LR\"\n    },\n    {\n      title: \"Mali\",\n      code: \"ML\"\n    },\n    {\n      title: \"Mauritania\",\n      code: \"MR\"\n    },\n    {\n      title: \"Sahrawi Arab Democratic Republic\",\n      code: \"EH\"\n    },\n    {\n      title: \"São Tomé and Príncipe\",\n      code: \"ST\"\n    },\n    {\n      title: \"Senegal\",\n      code: \"SN\"\n    },\n    {\n      title: \"Sierra Leone\",\n      code: \"SL\"\n    },\n    {\n      title: \"Togo\",\n      code: \"TG\"\n    },\n    {\n      title: \"United Kingdom: St. Helena, Ascension, and Tristan da Cunha\",\n      code: \"SH\"\n    }\n  ]\n}","export const CentralEurope = {\n  city: \"Central Europe\",\n  zone: \"Europe/Berlin\",\n  flags: [\n    {\n      title: \"Albania\",\n      code: \"AL\"\n    },\n    {\n      title: \"Andorra\",\n      code: \"AD\"\n    },\n    {\n      title: \"Austria\",\n      code: \"AT\"\n    },\n    {\n      title: \"Belgium\",\n      code: \"BE\"\n    },\n    {\n      title: \"Bosnia and Herzegovina\",\n      code: \"BA\"\n    },\n    {\n      title: \"Croatia\",\n      code: \"HR\"\n    },\n    {\n      title: \"Czechia\",\n      code: \"CZ\"\n    },\n    {\n      title: \"Denmark: mainland\",\n      code: \"DK\"\n    },\n    {\n      title: \"France\",\n      code: \"FR\"\n    },\n    {\n      title: \"Germany\",\n      code: \"DE\"\n    },\n    {\n      title: \"Gibraltar (United Kingdom)\",\n      code: \"GI\"\n    },\n    {\n      title: \"Hungary\",\n      code: \"HU\"\n    },\n    {\n      title: \"Italy\",\n      code: \"IT\"\n    },\n    {\n      title: \"Kosovo\",\n      code: \"XK\"\n    },\n    {\n      title: \"Liechtenstein\",\n      code: \"LI\"\n    },\n    {\n      title: \"Luxembourg\",\n      code: \"LU\"\n    },\n    {\n      title: \"Malta\",\n      code: \"MT\"\n    },\n    {\n      title: \"Monaco\",\n      code: \"MC\"\n    },\n    {\n      title: \"Montenegro\",\n      code: \"ME\"\n    },\n    {\n      title: \"Netherlands\",\n      code: \"NL\"\n    },\n    {\n      title: \"North Macedonia\",\n      code: \"MK\"\n    },\n    {\n      title: \"Norway\",\n      code: \"NO\"\n    },\n    {\n      title: \"Poland\",\n      code: \"PL\"\n    },\n    {\n      title: \"San Marino\",\n      code: \"SM\"\n    },\n    {\n      title: \"Serbia\",\n      code: \"RS\"\n    },\n    {\n      title: \"Slovakia\",\n      code: \"SK\"\n    },\n    {\n      title: \"Slovenia\",\n      code: \"SI\"\n    },\n    {\n      title: \"Spain: mainland\",\n      code: \"ES\"\n    },\n    {\n      title: \"Sweden\",\n      code: \"SE\"\n    },\n    {\n      title: \"Switzerland\",\n      code: \"CH\"\n    },\n    {\n      title: \"Vatican City\",\n      code: \"VA\"\n    }\n  ]\n}\n\nexport const EasternEurope = {\n  city: \"Eastern Europe\",\n  zone: \"Europe/Bucharest\",\n  flags: [\n    {\n      title: \"Bulgaria\",\n      code: \"BG\"\n    },\n    {\n      title: \"Cyprus\",\n      code: \"CY\"\n    },\n    {\n      title: \"Estonia\",\n      code: \"EE\"\n    },\n    {\n      title: \"Finland\",\n      code: \"FI\"\n    },\n    {\n      title: \"Greece\",\n      code: \"GR\"\n    },\n    {\n      title: \"Latvia\",\n      code: \"LV\"\n    },\n    {\n      title: \"Lithuania\",\n      code: \"LT\"\n    },\n    {\n      title: \"Moldova\",\n      code: \"MD\"\n    },\n    {\n      title: \"Romania\",\n      code: \"RO\"\n    },\n    {\n      title: \"Ukraine\",\n      code: \"UA\"\n    },\n  ]\n}\n\nexport const NorthAtlantic = {\n  city: \"North Atlantic\",\n  zone: \"Atlantic/Reykjavik\",\n  flags: [\n    {\n      title: \"Greenland (Denmark): Danmarkshavn\",\n      code: \"GL\"\n    },\n    {\n      title: \"Iceland\",\n      code: \"IS\"\n    },\n  ]\n}\n\nexport const WesternEurope = {\n  city: \"Western Europe\",\n  zone: \"Europe/London\",\n  flags: [\n    {\n      title: \"Faroe Islands (Denmark)\",\n      code: \"FO\"\n    },\n    {\n      title: \"Guernsey (United Kingdom)\",\n      code: \"GG\"\n    },\n    {\n      title: \"Ireland\",\n      code: \"IE\"\n    },\n    {\n      title: \"Isle of Man (United Kingdom)\",\n      code: \"IM\"\n    },\n    {\n      title: \"Jersey (United Kingdom)\",\n      code: \"JE\"\n    },\n    {\n      title: \"Portugal: mainland, Madeira\",\n      code: \"PT\"\n    },\n    {\n      title: \"Spain: Canary Islands\",\n      code: \"ES\"\n    },\n    {\n      title: \"United Kingdom: England, Scotland, Northern Ireland, Wales\",\n      code: \"GB\"\n    }\n  ]\n}\n","export const CentralIndonesia = {\n  city: \"Central Indonesia\",\n  zone: \"Asia/Makassar\",\n  flags: [\n    {\n      title: \"Australia: Western Australia\",\n      code: \"AU\"\n    },\n    {\n      title: \"Brunei\",\n      code: \"BN\"\n    },\n    {\n      title: \"Indonesia: Bali, East Kalimantan, East Nusa Tenggara, North Kalimantan, South Kalimantan, Sulawesi, West Nusa Tenggara\",\n      code: \"ID\"\n    },\n    {\n      title: \"Malaysia\",\n      code: \"MY\"\n    },\n    {\n      title: \"Philippines\",\n      code: \"PH\"\n    },\n    {\n      title: \"Singapore\",\n      code: \"SG\"\n    }\n  ]\n}\n\nexport const EasternIndonesia = {\n  city: \"Eastern Indonesia\",\n  zone: \"Asia/Jayapura\",\n  flags: [\n    {\n      title: \"Indonesia: Maluku, North Maluku, Papua, West Papua\",\n      code: \"ID\"\n    },\n    {\n      title: \"Palau\",\n      code: \"PW\"\n    },\n    {\n      title: \"Timor-Leste\",\n      code: \"TL\"\n    }\n  ]\n}\n\nexport const WesternIndonesia = {\n  city: \"Western Indonesia\",\n  zone: \"Asia/Jakarta\",\n  flags: [\n    {\n      title: \"Cambodia\",\n      code: \"KH\"\n    },\n    {\n      title: \"Christmas Island (Australia)\",\n      code: \"CX\"\n    },\n    {\n      title: \"Indonesia: Central Kalimantan, Java, Sumatra, West Kalimantan\",\n      code: \"ID\"\n    },\n    {\n      title: \"Laos\",\n      code: \"LA\"\n    },\n    {\n      title: \"Thailand\",\n      code: \"TH\"\n    },\n    {\n      title: \"Vietnam\",\n      code: \"VN\"\n    }\n  ]\n}","export const China = {\n  city: \"China\",\n  zone: \"Asia/Shanghai\",\n  flags: [\n    {\n      title: \"China\",\n      code: \"CN\"\n    },\n    {\n      title: \"Hong Kong (China)\",\n      code: \"HK\"\n    },\n    {\n      title: \"Macau (China)\",\n      code: \"MO\"\n    },\n    {\n      title: \"Mongolia: main part\",\n      code: \"MN\"\n    },\n    {\n      title: \"Russia: Buryatia, Irkutsk Oblast\",\n      code: \"RU\"\n    },\n    {\n      title: \"Taiwan\",\n      code: \"TW\"\n    }\n  ]\n}\n\nexport const JapanKorea = {\n  city: \"Japan/Korea\",\n  zone: \"Asia/Tokyo\",\n  flags: [\n    {\n      title: \"Japan\",\n      code: \"JP\"\n    },\n    {\n      title: \"North Korea\",\n      code: \"KP\"\n    },\n    {\n      title: \"Russia: Sakha (western part), Zabaykalsky Krai, Amur Oblast\",\n      code: \"RU\"\n    },\n    {\n      title: \"South Korea\",\n      code: \"KR\"\n    }\n  ]\n}","export const EasternAustralia = {\n  city: \"Eastern Australia\",\n  zone: \"Australia/Sydney\",\n  flags: [\n    {\n      title: \"Australia: Australian Capital Territory, New South Wales, Tasmania, Victoria\",\n      code: \"AU\"\n    }\n  ]\n}\n\nexport const LordHoweIsland = {\n  city: \"Lord Howe Island\",\n  zone: \"Australia/Lord_Howe\",\n  flags: [\n    {\n      title: \"Australia: Lord Howe Island\",\n      code: \"AU\"\n    }\n  ]\n}\n\nexport const NorfolkIsland = {\n  city: \"Norfolk Island\",\n  zone: \"Pacific/Norfolk\",\n  flags: [\n    {\n      title: \"Australia: Norfolk Island\",\n      code: \"AU\"\n    },\n  ]\n}\n\nexport const NorthernAustralia = {\n  city: \"Northern Australia\",\n  zone: \"Australia/Darwin\",\n  flags: [\n    {\n      title: \"Australia: Northern Territory\",\n      code: \"AU\"\n    }\n  ]\n}\n\nexport const Queensland = {\n  city: \"Queensland\",\n  zone: \"Australia/Brisbane\",\n  flags: [\n    {\n      title: \"Australia: Queensland\",\n      code: \"AU\"\n    }\n  ]\n}\n\nexport const SouthAustralia = {\n  city: \"South Australia\",\n  zone: \"Australia/Adelaide\",\n  flags: [\n    {\n      title: \"Australia: South Australia\",\n      code: \"AU\"\n    }\n  ]\n}","export const Kaliningrad = {\n  city: \"Kaliningrad\",\n  zone: \"Europe/Kaliningrad\",\n  flags: [\n    {\n      title: \"Russia: Oblast Kaliningrad\",\n      code: \"RU\"\n    },\n  ]\n}\n\nexport const Kamchatka = {\n  city: \"Kamchatka\",\n  zone: \"Asia/Kamchatka\",\n  flags: [\n    {\n      title: \"Russia: Kamchatka, Chukotka Autonomous Okrug\",\n      code: \"RU\"\n    }\n  ]\n}\n\nexport const Krasnoyarsk = {\n  city: \"Krasnoyarsk\",\n  zone: \"Asia/Krasnoyarsk\",\n  flags: [\n    {\n      title: \"Mongolia: Bayan-Ölgii, Govi-Altai, Khovd, Uvs, Zavkhan\",\n      code: \"MN\"\n    },\n    {\n      title: \"Russia: Altai Republic, Khakassia, Tuva Republic, Altai Region, Krasnoyarsk Region, Kemerovo Oblast, Novosibirsk Oblast, Tomsk Oblast\",\n      code: \"RU\"\n    }\n  ]\n}\n\nexport const Moscow = {\n  city: \"Moscow\",\n  zone: \"Europe/Moscow\",\n  flags: [\n    {\n      title: \"Belarus\",\n      code: \"BY\"\n    },\n    {\n      title: \"Russia: Moscow, Saint Petersburg, Sevastopol, Adygea, Chechnya, Chuvashia, Dagestan, Ingushetia, Kabardino-Balkaria, Kalmykia, Karachay-Cherkessia, Karelia, Komi, Mari El, Mordovia, North Ossetia-Alania, Tatarstan, Krasnodar Region, Stavropol Region, Arkhangelsk Oblast, Belgorod Oblast, Bryansk Oblast, Ivanovo Oblast, Kaluga Oblast, Kirov Oblast, Kostroma Oblast, Kursk Oblast, Leningrad Oblast, Lipetsk Oblast, Moscow Oblast, Murmansk Oblast, Nizhnyi Novgorod Oblast, Novgorod Oblast, Oryol Oblast, Penza Oblast, Pskov Oblast, Ryazan Oblast, Smolensk Oblast, Tambov Oblast, Tula Oblast, Tver Oblast, Vladimir Oblast, Vologda Oblast, Voronezh Oblast, Yaroslavl Oblast, Nenets Autonomous Okrug, Crimea\",\n      code: \"RU\"\n    },\n    {\n      title: \"Turkey\",\n      code: \"TR\"\n    }\n  ]\n}\n\nexport const Omsk = {\n  city: \"Omsk\",\n  zone: \"Asia/Omsk\",\n  flags: [\n    {\n      title: \"Kazakhstan: Akmola Region, Almaty Region, East Kazakhstan Region, Jambyl Region, Karaganda Region, Kostanay Region, Kyzylorda Region, North Kazakhstan Region, Pavlodar Region, Turkistan Region\",\n      code: \"KZ\"\n    },\n    {\n      title: \"Kyrgyzstan\",\n      code: \"KG\"\n    },\n    {\n      title: \"Russia: Omsk Oblast\",\n      code: \"RU\"\n    },\n  ]\n}\n\nexport const Samara = {\n  city: \"Samara\",\n  zone: \"Europe/Samara\",\n  flags: [\n    {\n      title: \"Armenia\",\n      code: \"AM\"\n    },\n    {\n      title: \"Azerbaijan\",\n      code: \"AZ\"\n    },\n    {\n      title: \"Georgia\",\n      code: \"GE\"\n    },\n    {\n      title: \"Russia: Udmurtia, Astrakhan Oblast, Samara Oblast, Saratov Oblast, Ulyanovsk Oblast, Volgograd Oblast\",\n      code: \"RU\"\n    },\n  ]\n}\n\nexport const Srednekolymsk = {\n  city: \"Srednekolymsk\",\n  zone: \"Asia/Srednekolymsk\",\n  flags: [\n    {\n      title: \"Russia: Sakha (eastern part), Magadan Oblast, Sakhalin Oblast\",\n      code: \"RU\"\n    }\n  ]\n}\n\nexport const Vladivostok = {\n  city: \"Vladivostok\",\n  zone: \"Asia/Vladivostok\",\n  flags: [\n    {\n      title: \"Russia: Sakha (central part), Khabarovsk Region, Primorsky Krai, Jewish Autonomous Oblast\",\n      code: \"RU\"\n    }\n  ]\n}\n\nexport const Yekaterinburg = {\n  city: \"Yekaterinburg\",\n  zone: \"Asia/Yekaterinburg\",\n  flags: [\n    {\n      title: \"Kazakhstan: Aktobe Region, Atyrau Region, Mangystau Region, West Kazakhstan Region\",\n      code: \"KZ\"\n    },\n    {\n      title: \"Russia: Bashkortostan, Perm Region, Chelyabinsk Oblast, Kurgan Oblast, Orenburg Oblast, Sverdlovsk Oblast, Tyumen Oblast, Khanty-Mansi Autonomous Okrug, Yamalo-Nenets Autonomous Okrug\",\n      code: \"RU\"\n    },\n    {\n      title: \"Tajikistan\",\n      code: \"TJ\"\n    },\n    {\n      title: \"Turkmenistan\",\n      code: \"TM\"\n    },\n    {\n      title: \"Uzbekistan\",\n      code: \"UZ\"\n    }\n  ]\n}","import React from \"react\";\nimport Clock from \"./Clock\";\nimport times from \"./data\"\nimport \"../styles/App.css\";\n\nexport default function App() {\n  const formatDate = data => {\n    const [date, time] = data.split(\",\")\n    const [day, month, year] = date.trim().split(\".\")\n    const [hour, minute] = time.trim().split(\":\")\n    const newMonth = month < 10 ? `0${month}` : `${month}`\n    const newDay = day < 10 ? `0${day}` : `${day}`\n    return `${year}-${newMonth}-${newDay}T${hour}:${minute}`\n  }\n  const zones = times.sort((a, b) => {\n    const { city: aCity, zone: aZone } = a\n    const { city: bCity, zone: bZone } = b\n    const aDate = formatDate((new Date()).toLocaleString(\"de-DE\", { timeZone: aZone }))\n    const bDate = formatDate((new Date()).toLocaleString(\"de-DE\", { timeZone: bZone }))\n    if( aDate < bDate ){\n      return -1;\n    } else if( bDate < aDate ){\n      return +1;\n    } else if( aCity.toLowerCase() < bCity.toLowerCase() ){\n      return -1;\n    } else if( bCity.toLowerCase() < aCity.toLowerCase() ){\n      return +1;\n    } else {\n      return 0;\n    }\n  })\n  return (\n    <div className=\"app\">\n      <h1>World Time Clock</h1>\n      <div className=\"row album sk-album\"> \n      {zones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} />)}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
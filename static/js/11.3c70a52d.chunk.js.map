{"version":3,"sources":["pages/Home.js"],"names":["Clock","lazy","__webpack_require__","e","then","bind","pad","num","concat","getOffset","number","sign","offset","Math","abs","hours","floor","minutes","Home","_useDebugState","useDebugState","timezonesRaw","allStates","Object","_development_stefan_react_react_clock_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","_useDebugState3","_useDebugState4","filtVal","setFiltVal","_useDebugState5","_useDebugState6","timezones","setTimezones","prepareZones","filterVal","timezoneObject","map","tz","country","zone","flag","_tz$subdiv","subdiv","_tz$cities","cities","timezone","findTimeZone","numericOffset","getZonedTime","Date","now","sort","a","b","reduce","acc","curr","obj","_development_stefan_react_react_clock_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","code","title","_curr$subdiv","_curr$cities","city","hasOwnProperty","flags","push","timezoneArray","values","filterValue","filteredStates","filter","_flag$subdiv","length","item","join","toLowerCase","includes","asciiname","useEffect","setInterval","react__WEBPACK_IMPORTED_MODULE_2___default","createElement","className","style","textAlign","marginBottom","marginTop","type","placeholder","onChange","target","value","time","index","key"],"mappings":"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","file":"static/js/11.3c70a52d.chunk.js","sourcesContent":["import React, { useEffect, lazy } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport timezonesRaw from \"../components/data\"\nimport { findTimeZone, getZonedTime } from \"timezone-support\"\nimport \"../styles/App.css\";\nconst Clock = lazy(() => import(\"../components/Clock\"));\n\nconst pad = (num) => (num < 10 ? `0${num}` : `${num}`)\n\nconst getOffset = (number) => {\n  const sign = (number > 0) ? \"+\" : (number < 0) ? \"-\" : \"Â±\"\n  const offset = Math.abs(number)\n  const hours = pad(Math.floor(offset/60))\n  const minutes = pad(offset % 60)\n  return `${sign}${hours}:${minutes}`\n}\n\nexport default function Home() {\n  const [allStates] = useDebugState(\"allStates\", timezonesRaw)\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\", \"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\", null)\n  const prepareZones = (filterVal) => {\n    const unsortedStates = allStates.map(tz => {\n      const {country, zone, flag, subdiv = [], cities = [] } = tz\n      const timezone = findTimeZone(zone)\n      const now = getZonedTime(Date.now(), timezone)\n      const numericOffset = -1 * now.zone.offset\n      const offset = getOffset(numericOffset)\n      return { country, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal ? filterVal : filtVal\n    const filteredStates = filterValue !== \"\"  ? timezoneArray.filter(tz => {\n      const { flags, cities } = tz\n      const filteredFlags = flags.filter(flag => {\n        const { title: country, subdiv = [] } = flag\n        const title = subdiv.length > 0 ? `${country}: ${subdiv.map(item => item.title).join(\", \")}` : country\n        if(filterValue !== \"\"){\n          if(title.toLowerCase().includes(filterValue.toLowerCase())) return true\n          return false\n        }\n        return true\n      })\n      if(filteredFlags.length > 0) return true\n      const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n      if(filteredCities.length > 0) return true\n      return false\n    }) : timezoneArray\n    setTimezones(filteredStates)\n  }\n  useEffect(() => {\n    prepareZones()\n    setInterval(1000,prepareZones)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder=\"Filter countries\" onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(e.target.value)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}
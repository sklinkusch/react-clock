{"version":3,"sources":["components/Header.js","components/Clock.js","components/timezones/cityList.js","components/timezones/Africa.js","components/timezones/Antarctica.js","components/timezones/Australia.js","components/timezones/Canada.js","components/timezones/Caribbean.js","components/timezones/CentralAmerica.js","components/timezones/CentralAsia.js","components/timezones/EastAsia.js","components/timezones/Europe.js","components/timezones/Indonesia.js","components/timezones/MiddleEast.js","components/timezones/Oceania.js","components/timezones/Russia.js","components/timezones/SouthAmerica.js","components/timezones/SouthAsia.js","components/timezones/SouthEastAsia.js","components/timezones/UnitedStates.js","components/data.js","pages/Home.js","components/IdealClock.js","components/timezones-ideal/cityList.js","components/timezones-ideal/Africa.js","components/timezones-ideal/Antarctica.js","components/timezones-ideal/Australia.js","components/timezones-ideal/Canada.js","components/timezones-ideal/Caribbean.js","components/timezones-ideal/CentralAmerica.js","components/timezones-ideal/CentralAsia.js","components/timezones-ideal/EastAsia.js","components/timezones-ideal/Europe.js","components/timezones-ideal/Indonesia.js","components/timezones-ideal/MiddleEast.js","components/timezones-ideal/Oceania.js","components/timezones-ideal/Russia.js","components/timezones-ideal/SouthAmerica.js","components/timezones-ideal/SouthAsia.js","components/timezones-ideal/SouthEastAsia.js","components/timezones-ideal/UnitedStates.js","components/data-ideal.js","pages/Ideal.js","components/App.js","serviceWorker.js","index.js"],"names":["withRouter","_useDebugState","useDebugState","_useDebugState2","Object","slicedToArray","isOpen","setOpen","react_default","a","createElement","reactstrap_module","color","dark","expand","href","onClick","navbar","className","to","activeClassName","tag","RRNavLink","ClockTitle","_ref","correctedCity","city","replace","ClockFlags","_ref2","flags","Array","isArray","length","map","flag","index","flagTitle","subdiv","flagSubdiv","title","extra","concat","text","sort","b","localeCompare","sensitivy","item","join","getMultiTitle","react_world_flags_default","key","code","height","ClockDate","_ref3","date","ClockTime","_ref4","Clock","props","_this","classCallCheck","this","_super","call","state","moment","formattedDate","offset","utcOffset","format","tz","zone","formattedTime","formattedZone","_this2","timerID","setInterval","tick","clearInterval","_this$props","cities","_this$state","reducedFlags","reduce","acc","curr","arr","toConsumableArray","flagIndexes","includes","indexOf","element","forEach","push","sortedSubdiv","Clock_ClockTitle","Clock_ClockFlags","style","width","paddingLeft","paddingRight","asciiname","toLowerCase","country","adminCode","display","flexDirection","justifyContent","Clock_ClockDate","Clock_ClockTime","setState","React","Component","cities500k","citiesRaw","filter","population","Africa","cityList","Antarctica","Australia","Canada","Caribbean","citites","CentralAmerica","CentralAsia","EastAsia","Europe","Indonesia","MiddleEast","Oceania","Russia","SouthAmerica","startsWith","SouthAsia","SouthEastAsia","UnitedStates","data","esm_toConsumableArray","Home","timezonesRaw","allStates","_useDebugState3","_useDebugState4","filtVal","setFiltVal","_useDebugState5","_useDebugState6","timezones","setTimezones","prepareZones","filterVal","timezoneObject","Now","utc","_tz$subdiv","_tz$cities","numericOffset","obj","objectSpread","_curr$subdiv","_curr$cities","hasOwnProperty","timezoneArray","values","filterValue","filteredZones","timezone","_timezone$subdiv","_timezone$cities","useEffect","textAlign","marginBottom","marginTop","type","placeholder","onChange","e","target","value","time","Clock_Clock","IdealClock","_this$props$city","_this$props$flags","_this$props$cities","uniqueCities","Set","IdealClock_ClockTitle","IdealClock_ClockFlags","flexBasis","offsetRaw","lon","offsetSign","offsetHours","Math","floor","abs","offsetMins","getSunTime","IdealClock_ClockDate","IdealClock_ClockTime","timezones_ideal_Africa","timezones_ideal_Antarctica","timezones_ideal_Australia","timezones_ideal_Canada","timezones_ideal_Caribbean","timezones_ideal_CentralAmerica","timezones_ideal_CentralAsia","timezones_ideal_EastAsia","timezones_ideal_Europe","timezones_ideal_Indonesia","timezones_ideal_MiddleEast","timezones_ideal_Oceania","timezones_ideal_Russia","timezones_ideal_SouthAmerica","timezones_ideal_SouthAsia","timezones_ideal_SouthEastAsia","timezones_ideal_UnitedStates","data_ideal","Ideal","_tz$utcOffset","undefined","prefix","hours","formattedHours","minutes","formattedMinutes","filteredStates","_flag$subdiv","IdealClock_IdealClock","App","react_router_dom","basename","process","components_Header","react_router","path","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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WACR,CAACA,MAAO,SACR,CAACA,MAAO,cACR,CAACA,MAAO,UACR,CAACA,MAAO,cACR,CAACA,MAAO,iBACR,CAACA,MAAO,cACR,CAACA,MAAO,YACR,CAACA,MAAO,WACR,CAACA,MAAO,UACR,CAACA,MAAO,SACR,CAACA,MAAO,SACR,CAACA,MAAO,iBACR,CAACA,MAAO,SACR,CAACA,MAAO,aACR,CAACA,MAAO,UACR,CAACA,MAAO,UACR,CAACA,MAAO,cAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKib,OAAO,KAGX,CACED,QAAS,SACTpE,OAAQ,CACN,CAACE,MAAO,iBACR,CAACA,MAAO,kBACR,CAACA,MAAO,WACR,CAACA,MAAO,UACR,CAACA,MAAO,UACR,CAACA,MAAO,WACR,CAACA,MAAO,aACR,CAACA,MAAO,UACR,CAACA,MAAO,mBACR,CAACA,MAAO,oBACR,CAACA,MAAO,YACR,CAACA,MAAO,WACR,CAACA,MAAO,aACR,CAACA,MAAO,WACR,CAACA,MAAO,wBACR,CAACA,MAAO,WACR,CAACA,MAAO,mBACR,CAACA,MAAO,QACR,CAACA,MAAO,SACR,CAACA,MAAO,WACR,CAACA,MAAO,UACR,CAACA,MAAO,YACR,CAACA,MAAO,QACR,CAACA,MAAO,QACR,CAACA,MAAO,uBACR,CAACA,MAAO,SACR,CAACA,MAAO,oBACR,CAACA,MAAO,WACR,CAACA,MAAO,WACR,CAACA,MAAO,QAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,uBACTnC,UAAW,IACXpC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,QACThC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,YC/S1B8G,GAAA,CACb,CACE9G,QAAS,iCACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,6BACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,OACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,4BACTpE,OAAQ,CACN,CAACE,MAAO,mBACR,CAACA,MAAO,mBACR,CAACA,MAAO,aAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,4BACTpE,OAAQ,CACN,CAACE,MAAO,oBAEVkC,KAAM,YACNvC,KAAM,MAER,CACEuE,QAAS,4BACTpE,OAAQ,CACN,CAACE,MAAO,sBAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,SAAuC,OAAnBhF,EAAKiF,aAEhE,CACED,QAAS,uBACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,WACTpE,OAAQ,CACN,CAACE,MAAO,WAEVkC,KAAM,aACNvC,KAAM,MAER,CACEuE,QAAS,WACTpE,OAAQ,CACN,CAACE,MAAO,oBAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,SAAuC,OAAnBhF,EAAKiF,aAEhE,CACED,QAAS,WACTpE,OAAQ,CACN,CAACE,MAAO,oBAEVkC,KAAM,aACNvC,KAAM,MAER,CACEuE,QAAS,WACTpE,OAAQ,CACN,CAACE,MAAO,cACR,CAACA,MAAO,iBAEVkC,KAAM,aACNvC,KAAM,MAER,CACEuE,QAAS,mBACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,aACTpE,OAAQ,CACN,CAACE,MAAO,SACR,CAACA,MAAO,QAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,aACTpE,OAAQ,CACN,CAACE,MAAO,UACR,CAACA,MAAO,YAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,QACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,yBACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,cACTpE,OAAQ,CACN,CAACE,MAAO,cACR,CAACA,MAAO,eACR,CAACA,MAAO,UACR,CAACA,MAAO,SACR,CAACA,MAAO,aACR,CAACA,MAAO,cACR,CAACA,MAAO,WAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,cACTpE,OAAQ,CACN,CAACE,MAAO,YACR,CAACA,MAAO,iBACR,CAACA,MAAO,YACR,CAACA,MAAO,eACR,CAACA,MAAO,qBACR,CAACA,MAAO,aACR,CAACA,MAAO,YACR,CAACA,MAAO,WACR,CAACA,MAAO,eAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,cACTpE,OAAQ,CACN,CAACE,MAAO,oBAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,SAAuC,OAAnBhF,EAAKiF,aAEhE,CACED,QAAS,aACThC,KAAM,eACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,2CACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,QACThC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,mBACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,oCACThC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,QACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,kBACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,wBACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,QACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,SACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,gBACTpE,OAAQ,CACN,CAACE,MAAO,WAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,SAAuC,OAAnBhF,EAAKiF,aAEhE,CACED,QAAS,gBACTpE,OAAQ,CACN,CAACE,MAAO,kBACR,CAACA,MAAO,kBAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,MACL,IAAK,MACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,gBACTpE,OAAQ,CACN,CAACE,MAAO,SAEVkC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,SAAuC,QAAnBhF,EAAKiF,aAEhE,CACED,QAAS,UACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,WAEvC,CACEA,QAAS,6BACThC,KAAM,aACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,YCtV1B+G,GAAA,CACb,CACE/G,QAAS,SACTpE,OAAQ,CACN,CAACE,MAAO,uBAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,MAAqB,OAAjBA,EAAKgF,SAAuC,OAAnBhF,EAAKiF,aAEhE,CACED,QAAS,SACTpE,OAAQ,CACN,CAACE,MAAO,oBACR,CAACA,MAAO,WACR,CAACA,MAAO,mBACR,CAACA,MAAO,kBACR,CAACA,MAAO,iBACR,CAACA,MAAO,gBACR,CAACA,MAAO,oBACR,CAACA,MAAO,mBACR,CAACA,MAAO,mBACR,CAACA,MAAO,gBACR,CAACA,MAAO,gBACR,CAACA,MAAO,mBACR,CAACA,MAAO,eACR,CAACA,MAAO,gBAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,SACTpE,OAAQ,CACN,CAACE,MAAO,UACR,CAACA,MAAO,UACR,CAACA,MAAO,YACR,CAACA,MAAO,aACR,CAACA,MAAO,YACR,CAACA,MAAO,cACR,CAACA,MAAO,sBACR,CAACA,MAAO,YACR,CAACA,MAAO,uBACR,CAACA,MAAO,WACR,CAACA,MAAO,YACR,CAACA,MAAO,wBACR,CAACA,MAAO,aACR,CAACA,MAAO,YACR,CAACA,MAAO,oBACR,CAACA,MAAO,oBACR,CAACA,MAAO,sBACR,CAACA,MAAO,oBACR,CAACA,MAAO,kBACR,CAACA,MAAO,gBACR,CAACA,MAAO,mBACR,CAACA,MAAO,kBACR,CAACA,MAAO,iBACR,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ACA,MAAO,UACR,CAACA,MAAO,kBACR,CAACA,MAAO,eACR,CAACA,MAAO,UACR,CAACA,MAAO,aACR,CAACA,MAAO,cACR,CAACA,MAAO,aACR,CAACA,MAAO,eACR,CAACA,MAAO,iBACR,CAACA,MAAO,2CACR,CAACA,MAAO,SACR,CAACA,MAAO,qBACR,CAACA,MAAO,UACR,CAACA,MAAO,eACR,CAACA,MAAO,eAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,QACTpE,OAAQ,CACN,CAACE,MAAO,qBACR,CAACA,MAAO,SACR,CAACA,MAAO,SACR,CAACA,MAAO,aACR,CAACA,MAAO,WACR,CAACA,MAAO,aACR,CAACA,MAAO,WACR,CAACA,MAAO,YACR,CAACA,MAAO,UACR,CAACA,MAAO,UACR,CAACA,MAAO,WACR,CAACA,MAAO,eACR,CAACA,MAAO,+BACR,CAACA,MAAO,eAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,UACTnC,UAAW,IACXpC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GAAI,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,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,2BACTpE,OAAQ,CACN,CAACE,MAAO,WACR,CAACA,MAAO,YACR,CAACA,MAAO,UACR,CAACA,MAAO,WACR,CAACA,MAAO,YACR,CAACA,MAAO,cACR,CAACA,MAAO,gBACR,CAACA,MAAO,YACR,CAACA,MAAO,gBACR,CAACA,MAAO,SACR,CAACA,MAAO,QACR,CAACA,MAAO,YAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,QACE,OAAO,EAGb,OAAO,KAGX,CACED,QAAS,2BACTpE,OAAQ,CACN,CAACE,MAAO,WACR,CAACA,MAAO,YACR,CAACA,MAAO,UAAWC,MAAO,eAC1B,CAACD,MAAO,YACR,CAACA,MAAO,WACR,CAACA,MAAO,QACR,CAACA,MAAO,YACR,CAACA,MAAO,aACR,CAACA,MAAO,YACR,CAACA,MAAO,aACR,CAACA,MAAO,eACR,CAACA,MAAO,YACR,CAACA,MAAO,aACR,CAACA,MAAO,cAEVkC,KAAM,YACNvC,KAAM,KACNgD,OAAQsC,GAASH,OAAO,SAAA5F,GACtB,GAAoB,OAAjBA,EAAKgF,QACN,OAAOhF,EAAKiF,WACV,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACH,OAAO,EACT,IAAK,KACH,OAAGjF,EAAKyK,KAAO,GAEjB,QACE,OAAO,EAGb,OAAO,KAGX,CACEzF,QAAS,2BACTpE,OAAQ,CACN,CAACE,MAAO,eACR,CAACA,MAAO,YACR,CAACA,MAAO,w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","file":"static/js/main.3c417933.chunk.js","sourcesContent":["import React from \"react\"\nimport { useDebugState } from \"use-named-state\";\nimport { Collapse, Navbar, NavbarBrand, NavbarToggler, Nav, NavItem, NavLink } from \"reactstrap\";\nimport { NavLink as RRNavLink, withRouter } from \"react-router-dom\"\n\nfunction Header() {\n  const [isOpen, setOpen] = useDebugState(\"isOpen\",false) \n  const toggle = () => {\n    setOpen(!isOpen)\n  }\n  return (\n    <Navbar color=\"dark\" dark expand=\"lg\">\n        <NavbarBrand href=\"#\">World Time Clock</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink to=\"\" activeClassName=\"active\" tag={RRNavLink}>Real Time zones</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/ideal\" activeClassName=\"active\" tag={RRNavLink}>Ideal Time zones</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n  )\n}\n\nexport default withRouter(Header)","import React from \"react\";\nimport Flag from \"react-world-flags\";\nimport moment from \"moment-timezone\";\nimport \"../styles/Clock.css\";\n\nconst ClockTitle = ({ city }) => {\n  const correctedCity = city.replace(\"-\",\"–\")\n  return (\n    <h2>\n      <span>\n        {correctedCity}\n      </span>\n    </h2>\n  )\n}\n\nfunction getMultiTitle(flagTitle, flagSubdiv){\n  if(flagSubdiv.length === 1) {\n    const [subdiv] = flagSubdiv\n    const {title, extra} = subdiv\n    if(extra) {\n      return `${flagTitle}: ${title} ${extra}`\n    } else {\n      return `${flagTitle}: ${title}`\n    }\n  } else {\n    const sortedSubdiv = flagSubdiv.sort((a,b) => a.title.localeCompare(b.title,\"de\",{sensitivy: \"base\"}))\n    const text = sortedSubdiv.map(item => item.extra ? `${item.title} ${item.extra}` : `${item.title}`).join(\", \")\n    return `${flagTitle}: ${text}`\n  }\n}\n\nconst ClockFlags = ({flags}) => (\n    <div>\n      {flags && Array.isArray(flags) && flags.length > 0 && flags.map((flag, index) => {\n        const flagTitle = flag.subdiv.length > 0 \n          ? getMultiTitle(flag.title, flag.subdiv)\n          : flag.title\n        return (\n          <Flag key={index} code={flag.code} title={flagTitle} height=\"20\" />\n        )\n      })}\n    </div>\n  )\n\nconst ClockDate = ({date}) => (<p>{date}</p>)\n\nconst ClockTime = ({date}) => (<p>{date}</p>)\n\nexport default class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      date: moment(),\n      formattedDate: this.props.offset ? moment().utcOffset(this.props.offset).format(\"DD/MM/YYYY\") : moment().tz(this.props.zone).format(\"DD/MM/YYYY\"),\n      formattedTime: this.props.offset ? moment().utcOffset(this.props.offset).format(\"HH:mm:ss\") : moment().tz(this.props.zone).format(\"HH:mm:ss\"),\n      formattedZone: \"UTC\" + moment.tz(this.props.zone).format(\"Z\"),\n    };\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render() {\n    const { city, flags, cities } = this.props\n    const { formattedDate, formattedTime } = this.state\n    const sortedFlags = flags.sort((a, b) => a.title.localeCompare(b.title, \"de\", {sensitivy: \"base\"}))\n    const reducedFlags = sortedFlags.reduce((acc, curr) => {\n      const arr = [...acc]\n      const flagIndexes = arr.map(flag => flag.code)\n      if(flagIndexes.includes(curr.code)) {\n        const index = flagIndexes.indexOf(curr.code)\n        const element = arr[index]\n        curr.subdiv.forEach(item => {\n          if(!element.subdiv.includes(item)) {\n            element.subdiv.push(item)\n          }\n        })\n        const sortedSubdiv = element.subdiv.sort((a,b) => a.title.localeCompare(b.title,\"de\",{ sensitivy: \"base\"}))\n        arr[index].subdiv = sortedSubdiv\n      } else {\n        arr.push(curr)\n      }\n      return arr\n    }, [])\n    return (\n      <div>\n        <div className=\"album-item\">\n          <ClockTitle city={city} />\n          <ClockFlags flags={reducedFlags} />\n          {cities && cities.length > 0 ? (\n            <details style={{ width: \"95%\", paddingLeft: \"2.5%\", paddingRight: \"2.5%\"}}>\n              <summary>Major cities</summary>\n              <ul>\n                {cities.sort((a,b) => {\n                  if(a.asciiname.toLowerCase() < b.asciiname.toLowerCase()) return -1\n                  if(b.asciiname.toLowerCase() < a.asciiname.toLowerCase()) return +1\n                  if(a.country.toLowerCase() < b.country.toLowerCase()) return -1\n                  if(b.country.toLowerCase() < a.country.toLowerCase()) return +1\n                  if(a.adminCode.toLowerCase() < b.adminCode.toLowerCase()) return -1\n                  if(b.adminCode.toLowerCase() < a.adminCode.toLowerCase()) return +1\n                  return 0\n                }).map((city, index) => (\n                <li key={`city-${index}`} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\n                  <span>{city.asciiname}</span>\n                  <Flag code={city.country} />\n                </li>\n                ))}\n              </ul>\n            </details>\n          ) : (\n            <div style={{ height: \"24.5px\"}} />\n          )}\n          <ClockDate date={formattedDate} />\n          <ClockTime date={formattedTime} />\n        </div>\n      </div>\n    );\n  }\n  tick() {\n    this.setState({\n      date: moment(),\n      formattedDate: this.props.offset ? moment().utcOffset(this.props.offset).format(\"DD/MM/YYYY\") : moment().tz(this.props.zone).format(\"DD/MM/YYYY\"),\n      formattedTime: this.props.offset ? moment().utcOffset(this.props.offset).format(\"HH:mm:ss\") : moment().tz(this.props.zone).format(\"HH:mm:ss\"),\n      formattedZone: \"UTC\" + moment.tz(this.props.zone).format(\"Z\")\n    });\n  }\n}\n","import citiesRaw from \"cities15000-json\"\n\nconst cities500k = citiesRaw.filter(city => city.population >= 500000)\n\nexport default cities500k","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Algeria\",\n    zone: \"Africa/Algiers\",\n    flag: \"DZ\",\n    cities: cityList.filter(city => city.country === \"DZ\" && city.tz === \"Africa/Algiers\")\n  },\n  {\n    country: \"Angola\",\n    zone: \"Africa/Luanda\",\n    flag: \"AO\",\n    cities: cityList.filter(city => city.country === \"AO\" && city.tz === \"Africa/Luanda\")\n  },\n  {\n    country: \"Benin\",\n    zone: \"Africa/Porto-Novo\",\n    flag: \"BJ\",\n    cities: cityList.filter(city => city.country === \"BJ\" && city.tz === \"Africa/Porto-Novo\")\n  },\n  {\n    country: \"Botswana\",\n    zone: \"Africa/Gaborone\",\n    flag: \"BW\",\n    cities: cityList.filter(city => city.country === \"BW\" && city.tz === \"Africa/Gaborone\")\n  },\n  {\n    country: \"Burkina Faso\",\n    zone: \"Africa/Ouagadougou\",\n    flag: \"BF\",\n    cities: cityList.filter(city => city.country === \"BF\" && city.tz === \"Africa/Ouagadougou\")\n  },\n  {\n    country: \"Burundi\",\n    zone: \"Africa/Bujumbura\",\n    flag: \"BI\",\n    cities: cityList.filter(city => city.country === \"BI\" && city.tz === \"Africa/Bujumbura\")\n  },\n  {\n    country: \"Cabo Verde\",\n    zone: \"Atlantic/Cape_Verde\",\n    flag: \"CV\",\n    cities: cityList.filter(city => city.country === \"CV\" && city.tz === \"Atlantic/Cape_Verde\")\n  },\n  {\n    country: \"Cameroon\",\n    zone: \"Africa/Douala\",\n    flag: \"CM\",\n    cities: cityList.filter(city => city.country === \"CM\" && city.tz === \"Africa/Douala\")\n  },\n  {\n    country: \"Central African Republic\",\n    zone: \"Africa/Bangui\",\n    flag: \"CF\",\n    cities: cityList.filter(city => city.country === \"CF\" && city.tz === \"Africa/Bangui\")\n  },\n  {\n    country: \"Chad\",\n    zone: \"Africa/Ndjamena\",\n    flag: \"TD\",\n    cities: cityList.filter(city => city.country === \"TD\" && city.tz === \"Africa/Ndjamena\")\n  },\n  {\n    country: \"Comoros\",\n    zone: \"Indian/Comoro\",\n    flag: \"KM\",\n    cities: cityList.filter(city => city.country === \"KM\" && city.tz === \"Indian/Comoro\")\n  },\n  {\n    country: \"Côte d'Ivoire\",\n    zone: \"Africa/Abidjan\",\n    flag: \"CI\",\n    cities: cityList.filter(city => city.country === \"CI\" && city.tz === \"Africa/Abidjan\")\n  },\n  {\n    country: \"Democratic Republic of the Congo\",\n    subdiv: [\n      {title: \"Équateur\"}, \n      {title: \"Kinshasa\"}, \n      {title: \"Kongo Central\"}, \n      {title: \"Kwango\"}, \n      {title: \"Kwilu\"}, \n      {title: \"Mai-Ndombe\"}, \n      {title: \"Mongala\"}, \n      {title: \"Nord-Ubangi\"}, \n      {title: \"Sud-Ubangi\"}, \n      {title: \"Tshuapa\"}\n    ],\n    zone: \"Africa/Kinshasa\",\n    flag: \"CD\",\n    cities: cityList.filter(city => city.country === \"CD\" && city.tz === \"Africa/Kinshasa\")\n  },\n  {\n    country: \"Democratic Republic of the Congo\",\n    subdiv: [\n      {title: \"Bas-Uele\"}, \n      {title: \"Haut-Katanga\"}, \n      {title: \"Haut-Lomami\"}, \n      {title: \"Haut-Uele\"},\n      {title: \"Ituri\"}, \n      {title: \"Kasaï\"}, \n      {title: \"Kasaï-Central\"}, \n      {title: \"Kasaï-Oriental\"}, \n      {title: \"Lomami\"}, \n      {title: \"Lualaba\"}, \n      {title: \"Maniema\"}, \n      {title: \"Nord-Kivu\"}, \n      {title: \"Sankuru\"}, \n      {title: \"Sud-Kivu\"}, \n      {title: \"Tanganjika\"}, \n      {title: \"Tshopo\"}\n    ],\n    zone: \"Africa/Lubumbashi\",\n    flag: \"CD\",\n    cities: cityList.filter(city => city.country === \"CD\" && city.tz === \"Africa/Lubumbashi\")\n  },\n  {\n    country: \"Djibouti\",\n    zone: \"Africa/Djibouti\",\n    flag: \"DJ\",\n    cities: cityList.filter(city => city.country === \"DJ\" && city.tz === \"Africa/Djibouti\")\n  },\n  {\n    country: \"Egypt\",\n    zone: \"Africa/Cairo\",\n    flag: \"EG\",\n    cities: cityList.filter(city => city.country === \"EG\" && city.tz === \"Africa/Cairo\")\n  },\n  {\n    country: \"Equatorial Guinea\",\n    zone: \"Africa/Malabo\",\n    flag: \"GQ\",\n    cities: cityList.filter(city => city.country === \"GQ\" && city.tz === \"Africa/Malabo\")\n  },\n  {\n    country: \"Eritrea\",\n    zone: \"Africa/Asmara\",\n    flag: \"ER\",\n    cities: cityList.filter(city => city.country === \"ER\" && city.tz === \"Africa/Asmara\")\n  },\n  {\n    country: \"eSwatini\",\n    zone: \"Africa/Mbabane\",\n    flag: \"SZ\",\n    cities: cityList.filter(city => city.country === \"SZ\" && city.tz === \"Africa/Mbabane\")\n  },\n  {\n    country: \"Ethiopia\",\n    zone: \"Africa/Addis_Ababa\",\n    flag: \"ET\",\n    cities: cityList.filter(city => city.country === \"ET\" && city.tz === \"Africa/Addis_Ababa\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Mayotte\"}\n    ],\n    zone: \"Indian/Mayotte\",\n    flag: \"FR\", // eigentlich YT aber gleiche Flagge\n    cities: cityList.filter(city => city.country === \"YT\" && city.tz === \"Indian/Mayotte\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Réunion\"}\n    ],\n    zone: \"Indian/Reunion\",\n    flag: \"FR\", // eigentlich RE aber gleiche Flagge\n    cities: cityList.filter(city => city.country === \"RE\" && city.tz === \"Indian/Reunion\")\n  },\n  {\n    country: \"French Southern and Antarctic Lands (France)\",\n    zone: \"Indian/Kerguelen\",\n    flag: \"TF\",\n    cities: cityList.filter(city => city.country === \"TF\" && city.tz === \"Indian/Kerguelen\")\n  },\n  {\n    country: \"Gabon\",\n    zone: \"Africa/Libreville\",\n    flag: \"GA\",\n    cities: cityList.filter(city => city.country === \"GA\" && city.tz === \"Africa/Libreville\")\n  },\n  {\n    country: \"The Gambia\",\n    zone: \"Africa/Banjul\",\n    flag: \"GM\",\n    cities: cityList.filter(city => city.country === \"GM\" && city.tz === \"Africa/Banjul\")\n  },\n  {\n    country: \"Ghana\",\n    zone: \"Africa/Accra\",\n    flag: \"GH\",\n    cities: cityList.filter(city => city.country === \"GH\" && city.tz === \"Africa/Accra\")\n  },\n  {\n    country: \"Guinea\",\n    zone: \"Africa/Conakry\",\n    flag: \"GN\",\n    cities: cityList.filter(city => city.country === \"GN\" && city.tz === \"Africa/Conakry\")\n  },\n  {\n    country: \"Guinea-Bissau\",\n    zone: \"Africa/Bissau\",\n    flag: \"GW\",\n    cities: cityList.filter(city => city.country === \"GW\" && city.tz === \"Africa/Bissau\")\n  },\n  {\n    country: \"Kenya\",\n    zone: \"Africa/Nairobi\",\n    flag: \"KE\",\n    cities: cityList.filter(city => city.country === \"KE\" && city.tz === \"Africa/Nairobi\")\n  },\n  {\n    country: \"Lesotho\",\n    zone: \"Africa/Maseru\",\n    flag: \"LS\",\n    cities: cityList.filter(city => city.country === \"LS\" && city.tz === \"Africa/Maseru\")\n  },\n  {\n    country: \"Liberia\",\n    zone: \"Africa/Monrovia\",\n    flag: \"LR\",\n    cities: cityList.filter(city => city.country === \"LR\" && city.tz === \"Africa/Monrovia\")\n  },\n  {\n    country: \"Libya\",\n    zone: \"Africa/Tripoli\",\n    flag: \"LY\",\n    cities: cityList.filter(city => city.country === \"LY\" && city.tz === \"Africa/Tripoli\")\n  },\n  {\n    country: \"Madagascar\",\n    zone: \"Indian/Antananarivo\",\n    flag: \"MG\",\n    cities: cityList.filter(city => city.country === \"MG\" && city.tz === \"Indian/Antananarivo\")\n  },\n  {\n    country: \"Malawi\",\n    zone: \"Africa/Blantyre\",\n    flag: \"MW\",\n    cities: cityList.filter(city => city.country === \"MW\" && city.tz === \"Africa/Blantyre\")\n  },\n  {\n    country: \"Mali\",\n    zone: \"Africa/Bamako\",\n    flag: \"ML\",\n    cities: cityList.filter(city => city.country === \"ML\" && city.tz === \"Africa/Bamako\")\n  },\n  {\n    country: \"Mauritania\",\n    zone: \"Africa/Nouakchott\",\n    flag: \"MR\",\n    cities: cityList.filter(city => city.country === \"MR\" && city.tz === \"Africa/Nouakchott\")\n  },\n  {\n    country: \"Mauritius\",\n    zone: \"Indian/Mauritius\",\n    flag: \"MU\",\n    cities: cityList.filter(city => city.country === \"MU\" && city.tz === \"Indian/Mauritius\")\n  },\n  {\n    country: \"Morocco\",\n    zone: \"Africa/Casablanca\",\n    flag: \"MA\",\n    cities: cityList.filter(city => city.country === \"MA\" && city.tz === \"Africa/Casablanca\")\n  },\n  {\n    country: \"Mozambique\",\n    zone: \"Africa/Maputo\",\n    flag: \"MZ\",\n    cities: cityList.filter(city => city.country === \"MZ\" && city.tz === \"Africa/Maputo\")\n  },\n  {\n    country: \"Namibia\",\n    zone: \"Africa/Windhoek\",\n    flag: \"NA\",\n    cities: cityList.filter(city => city.country === \"NA\" && city.tz === \"Africa/Windhoek\")\n  },\n  {\n    country: \"Niger\",\n    zone: \"Africa/Niamey\",\n    flag: \"NE\",\n    cities: cityList.filter(city => city.country === \"NE\" && city.tz === \"Africa/Niamey\")\n  },\n  {\n    country: \"Nigeria\",\n    zone: \"Africa/Lagos\",\n    flag: \"NG\",\n    cities: cityList.filter(city => city.country === \"NG\" && city.tz === \"Africa/Lagos\")\n  },\n  {\n    country: \"Republic of the Congo\",\n    zone: \"Africa/Brazzaville\",\n    flag: \"CG\",\n    cities: cityList.filter(city => city.country === \"CG\" && city.tz === \"Africa/Brazzaville\")\n  },\n  {\n    country: \"Rwanda\",\n    zone: \"Africa/Kigali\",\n    flag: \"RW\",\n    cities: cityList.filter(city => city.country === \"RW\" && city.tz === \"Africa/Kigali\")\n  },\n  {\n    country: \"São Tomé and Príncipe\",\n    zone: \"Africa/Sao_Tome\",\n    flag: \"ST\",\n    cities: cityList.filter(city => city.country === \"ST\" && city.tz === \"Africa/Sao_Tome\")\n  },\n  {\n    country: \"Sahrawi Arab Democratic Republic\",\n    zone: \"Africa/El_Aaiun\",\n    flag: \"EH\",\n    cities: cityList.filter(city => city.country === \"EH\" && city.tz === \"Africa/El_Aaiun\")\n  },\n  {\n    country: \"Senegal\",\n    zone: \"Africa/Dakar\",\n    flag: \"SN\",\n    cities: cityList.filter(city => city.country === \"SN\" && city.tz === \"Africa/Dakar\")\n  },\n  {\n    country: \"Seychelles\",\n    zone: \"Indian/Mahe\",\n    flag: \"SC\",\n    cities: cityList.filter(city => city.country === \"SC\" && city.tz === \"Indian/Mahe\")\n  },\n  {\n    country: \"Sierra Leone\",\n    zone: \"Africa/Freetown\",\n    flag: \"SL\",\n    cities: cityList.filter(city => city.country === \"SL\" && city.tz === \"Africa/Freetown\")\n  },\n  {\n    country: \"Somalia\",\n    zone: \"Africa/Mogadishu\",\n    flag: \"SO\",\n    cities: cityList.filter(city => city.country === \"SO\" && city.tz === \"Africa/Mogadishu\")\n  },\n  {\n    country: \"South Africa\",\n    zone: \"Africa/Johannesburg\",\n    flag: \"ZA\",\n    cities: cityList.filter(city => city.country === \"ZA\" && city.tz === \"Africa/Johannesburg\")\n  },\n  {\n    country: \"South Sudan\",\n    zone: \"Africa/Juba\",\n    flag: \"SS\",\n    cities: cityList.filter(city => city.country === \"SS\" && city.tz === \"Africa/Juba\")\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Ceuta\"}, \n      {title: \"Melilla\"}\n    ],\n    zone: \"Africa/Ceuta\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.tz === \"Africa/Ceuta\")\n  },\n  {\n    country: \"Sudan\",\n    zone: \"Africa/Khartoum\",\n    flag: \"SD\",\n    cities: cityList.filter(city => city.country === \"SD\" && city.tz === \"Africa/Khartoum\")\n  },\n  {\n    country: \"Tanzania\",\n    zone: \"Africa/Dar_es_Salaam\",\n    flag: \"TZ\",\n    cities: cityList.filter(city => city.country === \"TZ\" && city.tz === \"Africa/Dar_es_Salaam\")\n  },\n  {\n    country: \"Togo\",\n    zone: \"Africa/Lome\",\n    flag: \"TG\",\n    cities: cityList.filter(city => city.country === \"TG\" && city.tz === \"Africa/Lome\")\n  },\n  {\n    country: \"Tunisia\",\n    zone: \"Africa/Tunis\",\n    flag: \"TN\",\n    cities: cityList.filter(city => city.country === \"TN\" && city.tz === \"Africa/Tunis\")\n  },\n  {\n    country: \"Uganda\",\n    zone: \"Africa/Kampala\",\n    flag: \"UG\",\n    cities: cityList.filter(city => city.country === \"UG\" && city.tz === \"Africa/Kampala\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"Ascension\"}, \n      {title: \"St. Helena\"}, \n      {title: \"Tristan da Cunha\"}\n    ],\n    zone: \"Atlantic/St_Helena\",\n    flag: \"GB\", // eigentlich SH, aber Flagge hier die gleiche\n    cities: cityList.filter(city => city.country === \"SH\" && city.tz === \"Atlantic/St_Helena\")\n  },\n  {\n    country: \"Zambia\",\n    zone: \"Africa/Lusaka\",\n    flag: \"ZM\",\n    cities: cityList.filter(city => city.country === \"ZM\" && city.tz === \"Africa/Lusaka\")\n  },\n  {\n    country: \"Zimbabwe\",\n    zone: \"Africa/Harare\",\n    flag: \"ZW\",\n    cities: cityList.filter(city => city.country === \"ZW\" && city.tz === \"Africa/Harare\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Casey (Australia)\"}\n    ],\n    zone: \"Antarctica/Casey\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Casey\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Davis (Australia)\"}\n    ],\n    zone: \"Antarctica/Davis\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Davis\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Dumont-d'Urville (France)\"}\n    ],\n    zone: \"Antarctica/DumontDUrville\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/DumontDUrville\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Mawson (Australia)\"}\n    ],\n    zone: \"Antarctica/Mawson\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Mawson\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"McMurdo (United States)\"}\n    ],\n    zone: \"Antarctica/McMurdo\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/McMurdo\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Palmer (United States)\"}\n    ],\n    zone: \"Antarctica/Palmer\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Palmer\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Rothera (United Kingdom)\"}\n    ],\n    zone: \"Antarctica/Rothera\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Rothera\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Shōwa (Japan)\"}\n    ],\n    zone: \"Antarctica/Syowa\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Syowa\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Troll (Norway)\"}\n    ],\n    zone: \"Antarctica/Troll\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Troll\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Vostok (Russia)\"}\n    ],\n    zone: \"Antarctica/Vostok\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Vostok\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Western Australia\", extra: \"(most of state)\"}\n    ],\n    zone: \"Australia/Perth\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Perth\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Western Australia\", extra: \"(Eucla)\"}\n    ],\n    zone: \"Australia/Eucla\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Eucla\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Northern Territory\"}\n    ],\n    zone: \"Australia/Darwin\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Darwin\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Queensland\"}\n    ],\n    zone: \"Australia/Brisbane\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Brisbane\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"South Australia\"}\n    ],\n    zone: \"Australia/Adelaide\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Adelaide\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"New South Wales\", extra: \"(most of state)\"}\n    ],\n    zone: \"Australia/Sydney\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Sydney\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Australian Capital Territory\"}\n    ],\n    zone: \"Australia/Canberra\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Canberra\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"New South Wales\", extra: \"(Yancowinna)\"}\n    ],\n    zone: \"Australia/Broken_Hill\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Broken_Hill\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Victoria\"}\n    ],\n    zone: \"Australia/Melbourne\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Melbourne\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Tasmania\"}\n    ],\n    zone: \"Australia/Hobart\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Hobart\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Lord Howe Island\"}\n    ],\n    zone: \"Australia/Lord_Howe\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Lord_Howe\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Norfolk Island\"}\n    ],\n    zone: \"Pacific/Norfolk\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Norfolk\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Alberta\"}, \n      {title: \"British Columbia\", extra: \"(southeast)\"}\n    ],\n    zone: \"America/Edmonton\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Edmonton\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"British Columbia\", extra: \"(most of province)\"}\n    ],\n    zone: \"America/Vancouver\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Vancouver\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Labrador\", extra: \"(most of province)\"}\n    ],\n    zone: \"America/Goose_Bay\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Goose_Bay\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Manitoba\"}\n    ],\n    zone: \"America/Winnipeg\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Winnipeg\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"New Brunswick\"}\n    ],\n    zone: \"America/Moncton\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Moncton\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Newfoundland\"}, \n      {title: \"Labrador\", extra: \"(southeast)\"}\n    ],\n    zone: \"America/St_Johns\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/St_Johns\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Northwest Territories\"}\n    ],\n    zone: \"America/Yellowknife\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Yellowknife\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nova Scotia\"}, \n      {title: \"Prince Edward Island\"}\n    ],\n    zone: \"America/Halifax\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Halifax\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(west of 102° W, Kitikmeot Region)\"}\n    ],\n    zone: \"America/Cambridge_Bay\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Cambridge_Bay\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(102° W – 85° W, Resolute, Kivalliq Region)\"}\n    ],\n    zone: \"America/Rankin_Inlet\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Rankin_Inlet\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(east of 85° W, Qikiqtaaluk Region)\"}\n    ],\n    zone: \"America/Pangnirtung\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Pangnirtung\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(Coral Harbour)\"}, \n      {title: \"Ontario\", extra: \"(Atikokan)\"}\n    ],\n    zone: \"America/Atikokan\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Atikokan\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Ontario\", extra: \"(west of 90° W)\"}\n    ],\n    zone: \"America/Rainy_River\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Rainy_River\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Ontario\", extra: \"(most of province)\"}, \n      {title: \"Québec\", extra: \"(west of 63° W)\"}\n    ],\n    zone: \"America/Toronto\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Toronto\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Québec\", extra: \"(east of 63° W)\"}\n    ],\n    zone: \"America/Blanc-Sablon\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Blanc-Sablon\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Saskatchewan\"}\n    ],\n    zone: \"America/Regina\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Regina\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Yukon\"}\n    ],\n    zone: \"America/Whitehorse\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Whitehorse\")\n  },\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"American Virgin Islands (United States)\",\n    zone: \"America/St_Thomas\",\n    flag: \"VI\",\n    citites: cityList.filter(city => city.country === \"VI\" && city.tz === \"America/St_Thomas\")\n  },\n  {\n    country: \"Anguilla (United Kingdom)\",\n    zone: \"America/Anguilla\",\n    flag: \"AI\",\n    citites: cityList.filter(city => city.country === \"AI\" && city.tz === \"America/Anguilla\")\n  },\n  {\n    country: \"Antigua and Barbuda\",\n    zone: \"America/Antigua\",\n    flag: \"AG\",\n    citites: cityList.filter(city => city.country === \"AG\" && city.tz === \"America/Antigua\")\n  },\n  {\n    country: \"Aruba (Netherlands)\",\n    zone: \"America/Aruba\",\n    flag: \"AW\",\n    citites: cityList.filter(city => city.country === \"AW\" && city.tz === \"America/Aruba\")\n  },\n  {\n    country: \"Bahamas\",\n    zone: \"America/Nassau\",\n    flag: \"BS\",\n    citites: cityList.filter(city => city.country === \"BS\" && city.tz === \"America/Nassau\")\n  },\n  {\n    country: \"Barbados\",\n    zone: \"America/Barbados\",\n    flag: \"BB\",\n    citites: cityList.filter(city => city.country === \"BB\" && city.tz === \"America/Barbados\")\n  },\n  {\n    country: \"Bermuda (United Kingdom)\",\n    zone: \"Atlantic/Bermuda\",\n    flag: \"BM\",\n    citites: cityList.filter(city => city.country === \"BM\" && city.tz === \"America/Bermuda\")\n  },\n  {\n    country: \"British Virgin Islands (United Kingdom)\",\n    zone: \"America/Tortola\",\n    flag: \"VG\",\n    citites: cityList.filter(city => city.country === \"VG\" && city.tz === \"America/Tortola\")\n  },\n  {\n    country: \"Cayman Islands (United Kingdom)\",\n    zone: \"America/Cayman\",\n    flag: \"KY\",\n    citites: cityList.filter(city => city.country === \"KY\" && city.tz === \"America/Cayman\")\n  },\n  {\n    country: \"Cuba\",\n    zone: \"America/Havana\",\n    flag: \"CU\",\n    citites: cityList.filter(city => city.country === \"CU\" && city.tz === \"America/Havana\")\n  },\n  {\n    country: \"Curaçao (Netherlands)\",\n    zone: \"America/Curacao\",\n    flag: \"CW\",\n    citites: cityList.filter(city => city.country === \"CW\" && city.tz === \"America/Curacao\")\n  },\n  {\n    country: \"Dominica\",\n    zone: \"America/Dominica\",\n    flag: \"DM\",\n    citites: cityList.filter(city => city.country === \"DM\" && city.tz === \"America/Dominica\")\n  },\n  {\n    country: \"Dominican Republic\",\n    zone: \"America/Santo_Domingo\",\n    flag: \"DO\",\n    citites: cityList.filter(city => city.country === \"DO\" && city.tz === \"America/Santo_Domingo\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Guadeloupe\"}\n    ],\n    zone: \"America/Guadeloupe\",\n    flag: \"FR\", // eigentlich GP\n    citites: cityList.filter(city => city.country === \"GP\" && city.tz === \"America/Guadeloupe\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Saint-Martin\"}\n    ],\n    zone: \"America/Marigot\",\n    flag: \"FR\", // eigentlich MF\n    citites: cityList.filter(city => city.country === \"MF\" && city.tz === \"America/Marigot\")\n  },\n  {\n    country: \"Saint-Barthélemy (France)\",\n    zone: \"America/St_Barthelemy\",\n    flag: \"BL\",\n    citites: cityList.filter(city => city.country === \"BL\" && city.tz === \"America/St_Barthelemy\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Saint-Pierre and Miquelon\"}\n    ],\n    zone: \"America/Miquelon\",\n    flag: \"FR\", // eigentlich DF\n    citites: cityList.filter(city => city.country === \"DF\" && city.tz === \"America/Miquelon\")\n  },\n  {\n    country: \"Grenada\",\n    zone: \"America/Grenada\",\n    flag: \"GD\",\n    citites: cityList.filter(city => city.country === \"GD\" && city.tz === \"America/Grenada\")\n  },\n  {\n    country: \"Haiti\",\n    zone: \"America/Port-au-Prince\",\n    flag: \"HT\",\n    citites: cityList.filter(city => city.country === \"HT\" && city.tz === \"America/Port-au-Prince\")\n  },\n  {\n    country: \"Jamaica\",\n    zone: \"America/Jamaica\",\n    flag: \"JM\",\n    citites: cityList.filter(city => city.country === \"JM\" && city.tz === \"America/Jamaica\")\n  },\n  {\n    country: \"Martinique (France)\",\n    zone: \"America/Martinique\",\n    flag: \"MQ\",\n    citites: cityList.filter(city => city.country === \"MQ\" && city.tz === \"America/Martinique\")\n  },\n  {\n    country: \"Montserrat (United Kingdom)\",\n    zone: \"America/Montserrat\",\n    flag: \"MS\",\n    citites: cityList.filter(city => city.country === \"MS\" && city.tz === \"America/Montserrat\")\n  },\n  {\n    country: \"Netherlands\",\n    subdiv: [\n      {title: \"Bonaire\"}, \n      {title: \"Saba\"}, \n      {title: \"Sint Eustatius\"}\n    ],\n    zone: \"America/Kralendijk\",\n    flag: \"NL\", // eigentlich BQ\n    citites: cityList.filter(city => city.country === \"BQ\" && city.tz === \"America/Kralendijk\")\n  },\n  {\n    country: \"Puerto Rico (United States)\",\n    zone: \"America/Puerto_Rico\",\n    flag: \"PR\",\n    citites: cityList.filter(city => city.country === \"PR\" && city.tz === \"America/Puerto_Rico\")\n  },\n  {\n    country: \"Saint Kitts and Nevis\",\n    zone: \"America/St_Kitts\",\n    flag: \"KN\",\n    citites: cityList.filter(city => city.country === \"KN\" && city.tz === \"America/St_Kitts\")\n  },\n  {\n    country: \"Saint Lucia\",\n    zone: \"America/St_Lucia\",\n    flag: \"LC\",\n    citites: cityList.filter(city => city.country === \"LC\" && city.tz === \"America/St_Lucia\")\n  },\n  {\n    country: \"Saint Vincent and the Grenadines\",\n    zone: \"America/St_Vincent\",\n    flag: \"VC\",\n    citites: cityList.filter(city => city.country === \"VC\" && city.tz === \"America/St_Vincent\")\n  },\n  {\n    country: \"Sint Maarten (Netherlands)\",\n    zone: \"America/Lower_Princes\",\n    flag: \"SX\",\n    citites: cityList.filter(city => city.country === \"SX\" && city.tz === \"America/Lower_Princes\")\n  },\n  {\n    country: \"Trinidad and Tobago\",\n    zone: \"America/Port_of_Spain\",\n    flag: \"TT\",\n    citites: cityList.filter(city => city.country === \"TT\" && city.tz === \"America/Port_of_Spain\")\n  },\n  {\n    country: \"Turks and Caicos Islands (United Kingdom)\",\n    zone: \"America/Grand_Turk\",\n    flag: \"TC\",\n    citites: cityList.filter(city => city.country === \"TC\" && city.tz === \"America/Grand_Turk\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Belize\",\n    zone: \"America/Belize\",\n    flag: \"BZ\",\n    cities: cityList.filter(city => city.country === \"BZ\" && city.tz === \"America/Belize\")\n  },\n  {\n    country: \"Costa Rica\",\n    zone: \"America/Costa_Rica\",\n    flag: \"CR\",\n    cities: cityList.filter(city => city.country === \"CR\" && city.tz === \"America/Costa_Rica\")\n  },\n  {\n    country: \"El Salvador\",\n    zone: \"America/El_Salvador\",\n    flag: \"SV\",\n    cities: cityList.filter(city => city.country === \"SV\" && city.tz === \"America/El_Salvador\")\n  },\n  {\n    country: \"Guatemala\",\n    zone: \"America/Guatemala\",\n    flag: \"GT\",\n    cities: cityList.filter(city => city.country === \"GT\" && city.tz === \"America/Guatemala\")\n  },\n  {\n    country: \"Honduras\",\n    zone: \"America/Tegucigalpa\",\n    flag: \"HN\",\n    cities: cityList.filter(city => city.country === \"HN\" && city.tz === \"America/Tegucigalpa\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Aguascalientes\"}, \n      {title: \"Campeche\"}, \n      {title: \"Chiapas\"}, \n      {title: \"Coahuila\"}, \n      {title: \"Colima\"}, \n      {title: \"Distrito Federal\"}, \n      {title: \"Durango\"}, \n      {title: \"Guanajuato\"}, \n      {title: \"Guerrero\"}, \n      {title: \"Hidalgo\"}, \n      {title: \"Jalisco\"}, \n      {title: \"México\"}, \n      {title: \"Michoacán\"}, \n      {title: \"Morelos\"}, \n      {title: \"Nuevo León\"}, \n      {title: \"Oaxaca\"}, \n      {title: \"Puebla\"}, \n      {title: \"Querétaro\"}, \n      {title: \"San Luis Potosí\"}, \n      {title: \"Tabasco\"}, \n      {title: \"Tamaulipas\"}, \n      {title: \"Tlaxcala\"}, \n      {title: \"Veracruz\"}, \n      {title: \"Yucatán\"}, \n      {title: \"Zacatecas\"}\n    ],\n    zone: \"America/Mexico_City\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Mexico_City\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Baja California\"}\n    ],\n    zone: \"America/Tijuana\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Tijuana\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Baja California Sur\"},\n      {title: \"Chihuahua\"},\n      {title: \"Nayarit\"},\n      {title: \"Sinaloa\"}\n    ],\n    zone: \"America/Mazatlan\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Mazatlan\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Quintana Roo\"}\n    ],\n    zone: \"America/Cancun\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Cancun\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Sonora\"},\n      {title: \"Revillagigedo Islands\"}\n    ],\n    zone: \"America/Hermosillo\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Hermosillo\")\n  },\n  {\n    country: \"Nicaragua\",\n    zone: \"America/Managua\",\n    flag: \"NI\",\n    cities: cityList.filter(city => city.country === \"NI\" && city.tz === \"America/Managua\")\n  },\n  {\n    country: \"Panama\",\n    zone: \"America/Panama\",\n    flag: \"PA\",\n    cities: cityList.filter(city => city.country === \"PA\" && city.tz === \"America/Panama\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Akmola Region\"}, \n      {title: \"Almaty Region\"}, \n      {title: \"East Kazakhstan Region\"}, \n      {title: \"Jambyl Region\"}, \n      {title: \"Karaganda Region\"}, \n      {title: \"North Kazakhstan Region\"}, \n      {title: \"Pavlodar Region\"}, \n      {title: \"Turkistan Region\"}\n    ],\n    zone: \"Asia/Almaty\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Almaty\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Kostanay Region\"}\n    ],\n    zone: \"Asia/Qostanay\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Qostanay\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Kyzylorda Region\"}\n    ],\n    zone: \"Asia/Qyzylorda\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Qyzylorda\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Aktobe Region\"}\n    ],\n    zone: \"Asia/Aqtobe\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Aqtobe\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Atyrau Region\"}\n    ],\n    zone: \"Asia/Atyrau\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Atyrau\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Mangystau Region\"}\n    ],\n    zone: \"Asia/Aqtau\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Aqtau\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"West Kazakhstan Region\"}\n    ],\n    zone: \"Asia/Oral\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Oral\")\n  },\n  {\n    country: \"Kyrgyzstan\",\n    zone: \"Asia/Bishkek\",\n    flag: \"KG\",\n    cities: cityList.filter(city => city.country === \"KG\" && city.tz === \"Asia/Bishkek\")\n  },\n  {\n    country: \"Tajikistan\",\n    zone: \"Asia/Dushanbe\",\n    flag: \"TJ\",\n    cities: cityList.filter(city => city.country === \"TJ\" && city.tz === \"Asia/Dushanbe\")\n  },\n  {\n    country: \"Turkmenistan\",\n    zone: \"Asia/Ashgabat\",\n    flag: \"TM\",\n    cities: cityList.filter(city => city.country === \"TM\" && city.tz === \"Asia/Ashgabat\")\n  },\n  {\n    country: \"Uzbekistan\",\n    zone: \"Asia/Tashkent\",\n    flag: \"UZ\",\n    cities: cityList.filter(city => city.country === \"UZ\" && city.tz === \"Asia/Tashkent\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"China\",\n    zone: \"Asia/Shanghai\",\n    flag: \"CN\",\n    cities: cityList.filter(city => city.country === \"CN\" && city.tz === \"Asia/Shanghai\")\n  },\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Xinjiang\"}\n    ],\n    zone: \"Asia/Urumqi\",\n    flag: \"CN\",\n    cities: cityList.filter(city => city.country === \"CN\" && city.tz === \"Asia/Urumqi\")\n  },\n  {\n    country: \"Hong Kong (China)\",\n    zone: \"Asia/Hong_Kong\",\n    flag: \"HK\",\n    cities: cityList.filter(city => city.country === \"HK\" && city.tz === \"Asia/Hong_Kong\")\n  },\n  {\n    country: \"Japan\",\n    zone: \"Asia/Tokyo\",\n    flag: \"JP\",\n    cities: cityList.filter(city => city.country === \"JP\" && city.tz === \"Asia/Tokyo\")\n  },\n  {\n    country: \"Macau (China)\",\n    zone: \"Asia/Macau\",\n    flag: \"MO\",\n    cities: cityList.filter(city => city.country === \"MO\" && city.tz === \"Asia/Macau\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Arkhangai\"}, \n      {title: \"Bayankhongor\"}, \n      {title: \"Bulgan\"}, \n      {title: \"Darkhan-Uul\"}, \n      {title: \"Dornogovi\"}, \n      {title: \"Dundgovi\"}, \n      {title: \"Govisümber\"}, \n      {title: \"Khentii\"}, \n      {title: \"Khövsgöl\"}, \n      {title: \"Orkhon\"}, \n      {title: \"Selenge\"}, \n      {title: \"Töv\"}, \n      {title: \"Ömnögovi\"}, \n      {title: \"Övörkhanghai\"}\n    ],\n    zone: \"Asia/Ulaanbaatar\",\n    flag: \"MN\",\n    cities: cityList.filter(city => city.country === \"MN\" && city.tz === \"Asia/Ulaanbaatar\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Dornod\"}, \n      {title: \"Sükhbaatar\"}\n    ],\n    zone: \"Asia/Choibalsan\",\n    flag: \"MN\",\n    cities: cityList.filter(city => city.country === \"MN\" && city.tz === \"Asia/Choibalsan\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Bayan-Ölgii\"}, \n      {title: \"Govi-Altai\"}, \n      {title: \"Khovd\"}, \n      {title: \"Uvs\"}, \n      {title: \"Zavkhan\"}\n    ],\n    zone: \"Asia/Hovd\",\n    flag: \"MN\",\n    cities: cityList.filter(city => city.country === \"MN\" && city.tz === \"Asia/Hovd\")\n  },\n  {\n    country: \"North Korea\",\n    zone: \"Asia/Pyongyang\",\n    flag: \"KP\",\n    cities: cityList.filter(city => city.country === \"KP\" && city.tz === \"Asia/Pyongyang\")\n  },\n  {\n    country: \"South Korea\",\n    zone: \"Asia/Seoul\",\n    flag: \"KR\",\n    cities: cityList.filter(city => city.country === \"KR\" && city.tz === \"Asia/Seoul\")\n  },\n  {\n    country: \"Taiwan\",\n    zone: \"Asia/Taipei\",\n    flag: \"TW\",\n    cities: cityList.filter(city => city.country === \"TW\" && city.tz === \"Asia/Taipei\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Åland (Finland)\",\n    zone: \"Europe/Mariehamn\",\n    flag: \"AX\",\n    cities: cityList.filter(city => city.country === \"AX\" && city.tz === \"Europe/Mariehamn\")\n  },\n  {\n    country: \"Albania\",\n    zone: \"Europe/Tirane\",\n    flag: \"AL\",\n    cities: cityList.filter(city => city.country === \"AL\" && city.tz === \"Europe/Tirane\")\n  },\n  {\n    country: \"Andorra\",\n    zone: \"Europe/Andorra\",\n    flag: \"AD\",\n    cities: cityList.filter(city => city.country === \"AD\" && city.tz === \"Europe/Andorra\")\n  },\n  {\n    country: \"Austria\",\n    zone: \"Europe/Vienna\",\n    flag: \"AT\",\n    cities: cityList.filter(city => city.country === \"AT\" && city.tz === \"Europe/Vienna\")\n  },\n  {\n    country: \"Belarus\",\n    zone: \"Europe/Minsk\",\n    flag: \"BY\",\n    cities: cityList.filter(city => city.country === \"BY\" && city.tz === \"Europe/Minsk\")\n  },\n  {\n    country: \"Belgium\",\n    zone: \"Europe/Brussels\",\n    flag: \"BE\",\n    cities: cityList.filter(city => city.country === \"BE\" && city.tz === \"Europe/Brussels\")\n  },\n  {\n    country: \"Bosnia and Herzegovina\",\n    zone: \"Europe/Sarajevo\",\n    flag: \"BA\",\n    cities: cityList.filter(city => city.country === \"BA\" && city.tz === \"Europe/Sarajevo\")\n  },\n  {\n    country: \"Bulgaria\",\n    zone: \"Europe/Sofia\",\n    flag: \"BG\",\n    cities: cityList.filter(city => city.country === \"BG\" && city.tz === \"Europe/Sofia\")\n  },\n  {\n    country: \"Croatia\",\n    zone: \"Europe/Zagreb\",\n    flag: \"HR\",\n    cities: cityList.filter(city => city.country === \"HR\" && city.tz === \"Europe/Zagreb\")\n  },\n  {\n    country: \"Cyprus\",\n    subdiv: [\n      {title: \"Republic of Cyprus\"}\n    ],\n    zone: \"Asia/Nicosia\",\n    flag: \"CY\",\n    cities: cityList.filter(city => city.country === \"CY\" && city.tz === \"Asia/Nicosia\")\n  },\n  {\n    country: \"Cyprus\",\n    subdiv: [\n      {title: \"Turkish Republic of Northern Cyprus\"}\n    ],\n    zone: \"Asia/Famagusta\",\n    flag: \"CY\",\n    cities: cityList.filter(city => city.country === \"CY\" && city.tz === \"Asia/Famagusta\")\n  },\n  {\n    country: \"Czechia\",\n    zone: \"Europe/Prague\",\n    flag: \"CZ\",\n    cities: cityList.filter(city => city.country === \"CZ\" && city.tz === \"Europe/Prague\")\n  },\n  {\n    country: \"Denmark\",\n    subdiv: [\n      {title: \"Hovedstaden\"},\n      {title: \"Midtjylland\"},\n      {title: \"Nordjylland\"},\n      {title: \"Sjælland\"},\n      {title: \"Syddanmark\"},\n    ],\n    zone: \"Europe/Copenhagen\",\n    flag: \"DK\",\n    cities: cityList.filter(city => city.country === \"DK\" && city.tz === \"Europe/Copenhagen\")\n  },\n  {\n    country: \"Estonia\",\n    zone: \"Europe/Tallinn\",\n    flag: \"EE\",\n    cities: cityList.filter(city => city.country === \"EE\" && city.tz === \"Europe/Tallinn\")\n  },\n  {\n    country: \"Faroe Islands (Denmark)\",\n    zone: \"Atlantic/Faroe\",\n    flag: \"FO\",\n    cities: cityList.filter(city => city.country === \"FO\" && city.tz === \"Atlantic/Faroe\")\n  },\n  {\n    country: \"Finland\",\n    zone: \"Europe/Helsinki\",\n    flag: \"FI\",\n    cities: cityList.filter(city => city.country === \"FI\" && city.tz === \"Europe/Helsinki\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Auvergne-Rhône-Alpes\"},\n      {title: \"Bourgogne-Franche-Comté\"},\n      {title: \"Bretagne\"},\n      {title: \"Centre-Val de Loire\"},\n      {title: \"Corse\"},\n      {title: \"Grand Est\"},\n      {title: \"Hauts-de-France\"},\n      {title: \"Île-de-France\"},\n      {title: \"Normandie\"},\n      {title: \"Nouvelle-Aquitaine\"},\n      {title: \"Occitanie\"},\n      {title: \"Pays de la Loire\"},\n      {title: \"Provence-Alpes-Côte d'Azur\"}\n    ],\n    zone: \"Europe/Paris\",\n    flag: \"FR\",\n    cities: cityList.filter(city => city.country === \"FR\" && city.tz === \"Europe/Paris\")\n  },\n  {\n    country: \"Germany\",\n    zone: \"Europe/Berlin\",\n    flag: \"DE\",\n    cities: cityList.filter(city => city.country === \"DE\" && city.tz === \"Europe/Berlin\")\n  },\n  {\n    country: \"Gibraltar (United Kingdom)\",\n    zone: \"Europe/Gibraltar\",\n    flag: \"GI\",\n    cities: cityList.filter(city => city.country === \"GI\" && city.tz === \"Europe/Gibraltar\")\n  },\n  {\n    country: \"Greece\",\n    zone: \"Europe/Athens\",\n    flag: \"GR\",\n    cities: cityList.filter(city => city.country === \"GR\" && city.tz === \"Europe/Athens\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Danmarkshavn\"}\n    ],\n    zone: \"America/Danmarkshavn\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Danmarkshavn\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Ittoqqortoormit\"}, \n      {title: \"Scoresbysund\"}\n    ],\n    zone: \"America/Scoresbysund\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Scoresbysund\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Thule\"}, \n      {title: \"Pituffik\"}\n    ],\n    zone: \"America/Thule\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Thule\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Western Greenland\"}\n    ],\n    zone: \"America/Nuuk\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Nuuk\")\n  },\n  {\n    country: \"Guernsey (United Kingdom)\",\n    zone: \"Europe/Guernsey\",\n    flag: \"GG\",\n    cities: cityList.filter(city => city.country === \"GG\" && city.tz === \"Europe/Guernsey\")\n  },\n  {\n    country: \"Hungary\",\n    zone: \"Europe/Budapest\",\n    flag: \"HU\",\n    cities: cityList.filter(city => city.country === \"HU\" && city.tz === \"Europe/Budapest\")\n  },\n  {\n    country: \"Iceland\",\n    zone: \"Atlantic/Reykjavik\",\n    flag: \"IS\",\n    cities: cityList.filter(city => city.country === \"IS\" && city.tz === \"Atlantic/Reykjavik\")\n  },\n  {\n    country: \"Ireland\",\n    zone: \"Europe/Dublin\",\n    flag: \"IE\",\n    cities: cityList.filter(city => city.country === \"IE\" && city.tz === \"Europe/Dublin\")\n  },\n  {\n    country: \"Isle of Man (United Kingdom)\",\n    zone: \"Europe/Isle_of_Man\",\n    flag: \"IM\",\n    cities: cityList.filter(city => city.country === \"IM\" && city.tz === \"Europe/Isle_of_Man\")\n  },\n  {\n    country: \"Italy\",\n    zone: \"Europe/Rome\",\n    flag: \"IT\",\n    cities: cityList.filter(city => city.country === \"IT\" && city.tz === \"Europe/Rome\")\n  },\n  {\n    country: \"Jersey (United Kingdom)\",\n    zone: \"Europe/Jersey\",\n    flag: \"JE\",\n    cities: cityList.filter(city => city.country === \"JE\" && city.tz === \"Europe/Jersey\")\n  },\n  {\n    country: \"Kosovo\",\n    zone: \"Europe/Belgrade\",  // no explicit timezone for Kosovo/Pristina\n    flag: \"XK\",\n    cities: cityList.filter(city => city.country === \"XK\" && city.tz === \"Europe/Belgrade\")\n  },\n  {\n    country: \"Latvia\",\n    zone: \"Europe/Riga\",\n    flag: \"LV\",\n    cities: cityList.filter(city => city.country === \"LV\" && city.tz === \"Europe/Riga\")\n  },\n  {\n    country: \"Liechtenstein\",\n    zone: \"Europe/Vaduz\",\n    flag: \"LI\",\n    cities: cityList.filter(city => city.country === \"LI\" && city.tz === \"Europe/Vaduz\")\n  },\n  {\n    country: \"Lithuania\",\n    zone: \"Europe/Vilnius\",\n    flag: \"LT\",\n    cities: cityList.filter(city => city.country === \"LT\" && city.tz === \"Europe/Vilnius\")\n  },\n  {\n    country: \"Luxembourg\",\n    zone: \"Europe/Luxembourg\",\n    flag: \"LU\",\n    cities: cityList.filter(city => city.country === \"LU\" && city.tz === \"Europe/Luxembourg\")\n  },\n  {\n    country: \"Malta\",\n    zone: \"Europe/Malta\",\n    flag: \"MT\",\n    cities: cityList.filter(city => city.country === \"MT\" && city.tz === \"Europe/Malta\")\n  },\n  {\n    country: \"Moldova\",\n    subdiv: [\n      {title: \"Bălți\"}, \n      {title: \"Chişinău\"}, \n      {title: \"Comrat\"}\n    ],\n    zone: \"Europe/Chisinau\",\n    flag: \"MD\",\n    cities: cityList.filter(city => city.country === \"MD\" && city.tz === \"Europe/Chisinau\")\n  },\n  {\n    country: \"Moldova\",\n    subdiv: [\n      {title: \"Bender\"}, \n      {title: \"Tiraspol\"}\n    ],\n    zone: \"Europe/Tiraspol\",\n    flag: \"MD\",\n    cities: cityList.filter(city => city.country === \"MD\" && city.tz === \"Europe/Tiraspol\")\n  },\n  {\n    country: \"Monaco\",\n    zone: \"Europe/Monaco\",\n    flag: \"MC\",\n    cities: cityList.filter(city => city.country === \"MC\" && city.tz === \"Europe/Monaco\")\n  },\n  {\n    country: \"Montenegro\",\n    zone: \"Europe/Podgorica\",\n    flag: \"ME\",\n    cities: cityList.filter(city => city.country === \"ME\" && city.tz === \"Europe/Podgorica\")\n  },\n  {\n    country: \"Netherlands\",\n    zone: \"Europe/Amsterdam\",\n    flag: \"NL\",\n    cities: cityList.filter(city => city.country === \"NL\" && city.tz === \"Europe/Amsterdam\")\n  },\n  {\n    country: \"North Macedonia\",\n    zone: \"Europe/Skopje\",\n    flag: \"MK\",\n    cities: cityList.filter(city => city.country === \"MK\" && city.tz === \"Europe/Skopje\")\n  },\n  {\n    country: \"Norway\",\n    subdiv: [\n      {title: \"Agder\"},\n      {title: \"Innlandet\"},\n      {title: \"Møre og Romsdal\"},\n      {title: \"Nordland\"},\n      {title: \"Oslo\"},\n      {title: \"Rogaland\"},\n      {title: \"Troms og Finnmark\"},\n      {title: \"Trøndelag\"},\n      {title: \"Vestfold og Telemark\"},\n      {title: \"Vestland\"},\n      {title: \"Viken\"},\n    ],\n    zone: \"Europe/Oslo\",\n    flag: \"NO\",\n    cities: cityList.filter(city => city.country === \"NO\" && city.tz === \"Europe/Oslo\")\n  },\n  {\n    country: \"Svalbard and Jan Mayen (Norway)\",\n    subdiv: [\n      {title: \"Jan Mayen\"}\n    ],\n    zone: \"Atlantic/Jan_Mayen\",\n    flag: \"NO\", // eigentlich SJ\n    cities: cityList.filter(city => city.country === \"SV\" && city.tz === \"Atlantic/Jan_Mayen\")\n  },\n  {\n    country: \"Svalbard and Jan Mayen (Norway)\",\n    subdiv: [\n      {title: \"Svalbard\"}\n    ],\n    zone: \"Arctic/Longyearbyen\",\n    flag: \"NO\", // eigentlich SJ\n    cities: cityList.filter(city => city.country === \"SV\" && city.tz === \"Arctic/Longyearbyen\")\n  },\n  {\n    country: \"Poland\",\n    zone: \"Europe/Warsaw\",\n    flag: \"PL\",\n    cities: cityList.filter(city => city.country === \"PL\" && city.tz === \"Europe/Warsaw\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Alentejo Region\"},\n      {title: \"Algarve\"},\n      {title: \"Central Portugal\"},\n      {title: \"Lisboa Region\"},\n      {title: \"Northern Portugal\"},\n    ],\n    zone: \"Europe/Lisbon\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.tz === \"Europe/Lisbon\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Madeira\"}\n    ],\n    zone: \"Atlantic/Madeira\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.tz === \"Atlantic/Madeira\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Azores\"}\n    ],\n    zone: \"Atlantic/Azores\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.tz === \"Atlantic/Azores\")\n  },\n  {\n    country: \"Romania\",\n    zone: \"Europe/Bucharest\",\n    flag: \"RO\",\n    cities: cityList.filter(city => city.country === \"RO\" && city.tz === \"Europe/Bucharest\")\n  },\n  {\n    country: \"San Marino\",\n    zone: \"Europe/San_Marino\",\n    flag: \"SM\",\n    cities: cityList.filter(city => city.country === \"SM\" && city.tz === \"Europe/San_Marino\")\n  },\n  {\n    country: \"Serbia\",\n    zone: \"Europe/Belgrade\",\n    flag: \"RS\",\n    cities: cityList.filter(city => city.country === \"RS\" && city.tz === \"Europe/Belgrade\")\n  },\n  {\n    country: \"Slovakia\",\n    zone: \"Europe/Bratislava\",\n    flag: \"SK\",\n    cities: cityList.filter(city => city.country === \"SK\" && city.tz === \"Europe/Bratislava\")\n  },\n  {\n    country: \"Slovenia\",\n    zone: \"Europe/Ljubljana\",\n    flag: \"SI\"\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Andalusia\"},\n      {title: \"Aragon\"},\n      {title: \"Balearic Islands\"},\n      {title: \"Basque Country\"},\n      {title: \"Cantabria\"},\n      {title: \"Castile and León\"},\n      {title: \"Castilla-La Mancha\"},\n      {title: \"Catalonia\"},\n      {title: \"Chartered Community of Navarre\"},\n      {title: \"Community of Madrid\"},\n      {title: \"Extremadura\"},\n      {title: \"Galicia\"},\n      {title: \"La Rioja\"},\n      {title: \"Principality of Asturias\"},\n      {title: \"Region of Murcia\"},\n      {title: \"Valencian Community\"},\n    ],\n    zone: \"Europe/Madrid\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.tz === \"Europe/Madrid\")\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Canary Islands\"}\n    ],\n    zone: \"Atlantic/Canary\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.tz === \"Atlantic/Canary\")\n  },\n  {\n    country: \"Sweden\",\n    zone: \"Europe/Stockholm\",\n    flag: \"SE\",\n    cities: cityList.filter(city => city.country === \"SE\" && city.tz === \"Europe/Stockholm\")\n  },\n  {\n    country: \"Switzerland\",\n    zone: \"Europe/Zurich\",\n    flag: \"CH\",\n    cities: cityList.filter(city => city.country === \"CH\" && city.tz === \"Europe/Zurich\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"England\"}, \n      {title: \"Scotland\"}, \n      {title: \"Wales\"}\n    ],\n    zone: \"Europe/London\",\n    flag: \"GB\",\n    cities: cityList.filter(city => city.country === \"GB\" && city.tz === \"Europe/London\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"Northern Ireland\"}\n    ],\n    zone: \"Europe/Belfast\",\n    flag: \"GB\",\n    cities: cityList.filter(city => city.country === \"GB\" && city.tz === \"Europe/Belfast\")\n  },\n  {\n    country: \"Ukraine\",\n    subdiv: [\n      {title: \"Cherkasy Oblast\"}, // 01\n      {title: \"Chernihiv Oblast\"}, // 02\n      {title: \"Chernivtsi Oblast\"}, // 03\n      {title: \"Dnipro Oblast\"}, // 04\n      {title: \"Donetsk Oblast\", extra: \"(only partly controlled by Ukraine)\"}, // 05\n      {title: \"Ivano-Frankivsk Oblast\"}, // 06\n      {title: \"Kharkiv Oblast\"}, // 07\n      {title: \"Kherson Oblast\"}, // 08\n      {title: \"Khmelnytskyy Oblast\"}, // 09\n      {title: \"Kirovohrad Oblast\"}, // 10\n      {title: \"Kyyiv\"}, // 12\n      {title: \"Kyiv Oblast\"}, // 13\n      {title: \"Luhansk Oblast\", extra: \"(only partly controlled by Ukraine)\"}, // 14\n      {title: \"Lviv Oblast\"}, // 15\n      {title: \"Mykolayiv Oblast\"}, // 16\n      {title: \"Odesa Oblast\"}, // 17\n      {title: \"Poltava Oblast\"}, // 18\n      {title: \"Rivne Oblast\"}, // 19\n      {title: \"Sumy Oblast\"}, // 21\n      {title: \"Ternopil Oblast\"}, // 22\n      {title: \"Vinnitsya Oblast\"}, // 23\n      {title: \"Volyn Oblast\"}, // 24\n      {title: \"Zakarpattya Oblast\"}, // 25\n      {title: \"Zaporizhzhya Oblast\"}, // 26\n      {title: \"Zhytomyr Oblast\"}, // 27\n    ],\n    zone: \"Europe/Kiev\",\n    flag: \"UA\",\n    cities: cityList.filter(city => city.country === \"UA\" && city.tz === \"Europe/Kiev\")\n  },\n  {\n    country: \"Ukraine\",\n    subdiv: [\n      {title: \"Sevastopol\", extra: \"(controlled by Russia)\"}, \n      {title: \"Crimea Autonomous Republic\", extra: \"(controlled by Russia)\"}\n    ],\n    zone: \"Europe/Simferopol\",\n    flag: \"UA\",\n    cities: cityList.filter(city => city.country === \"UA\" && city.tz === \"Europe/Simferopol\")\n  },\n  {\n    country: \"Vatican City\",\n    zone: \"Europe/Vatican\",\n    flag: \"VA\",\n    cities: cityList.filter(city => city.country === \"VA\" && city.tz === \"Europe/Vatican\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Bali\"}, \n      {title: \"East Kalimantan\"}, \n      {title: \"East Nusa Tenggara\"}, \n      {title: \"North Kalimantan\"}, \n      {title: \"South Kalimantan\"}, \n      {title: \"Sulawesi\"}, \n      {title: \"West Nusa Tenggara\"}\n    ],\n    zone: \"Asia/Makassar\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Makassar\")\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Java\"}, \n      {title: \"Sumatra\"}\n    ],\n    zone: \"Asia/Jakarta\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Jakarta\")\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Central Kalimantan\"}, \n      {title: \"West Kalimantan\"}\n    ],\n    zone: \"Asia/Pontianak\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Pontianak\")\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Maluku\"}, \n      {title: \"North Maluku\"}, \n      {title: \"Papua\"}, \n      {title: \"West Papua\"}\n    ],\n    zone: \"Asia/Jayapura\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Jayapura\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Afghanistan\",\n    zone: \"Asia/Kabul\",\n    flag: \"AF\",\n    cities: cityList.filter(city => city.country === \"AF\" && city.tz === \"Asia/Kabul\")\n  },\n  {\n    country: \"Armenia\",\n    zone: \"Asia/Yerevan\",\n    flag: \"AM\",\n    cities: cityList.filter(city => city.country === \"AM\" && city.tz === \"Asia/Yerevan\")\n  },\n  {\n    country: \"Azerbaijan\",\n    zone: \"Asia/Baku\",\n    flag: \"AZ\",\n    cities: cityList.filter(city => city.country === \"AZ\" && city.tz === \"Asia/Baku\")\n  },\n  {\n    country: \"Bahrain\",\n    zone: \"Asia/Bahrain\",\n    flag: \"BH\",\n    cities: cityList.filter(city => city.country === \"BH\" && city.tz === \"Asia/Bahrain\")\n  },\n  {\n    country: \"Georgia\",\n    zone: \"Asia/Tbilisi\",\n    flag: \"GE\",\n    cities: cityList.filter(city => city.country === \"GE\" && city.tz === \"Asia/Tbilisi\")\n  },\n  {\n    country: \"Iran\",\n    zone: \"Asia/Tehran\",\n    flag: \"IR\",\n    cities: cityList.filter(city => city.country === \"IR\" && city.tz === \"Asia/Tehran\")\n  },\n  {\n    country: \"Iraq\",\n    zone: \"Asia/Baghdad\",\n    flag: \"IQ\",\n    cities: cityList.filter(city => city.country === \"IQ\" && city.tz === \"Asia/Baghdad\")\n  },\n  {\n    country: \"Israel\",\n    zone: \"Asia/Jerusalem\",\n    flag: \"IL\",\n    cities: cityList.filter(city => city.country === \"IL\" && city.tz === \"Asia/Jerusalem\")\n  },\n  {\n    country: \"Jordan\",\n    zone: \"Asia/Amman\",\n    flag: \"JO\",\n    cities: cityList.filter(city => city.country === \"JO\" && city.tz === \"Asia/Amman\")\n  },\n  {\n    country: \"Kuwait\",\n    zone: \"Asia/Kuwait\",\n    flag: \"KW\",\n    cities: cityList.filter(city => city.country === \"KW\" && city.tz === \"Asia/Kuwait\")\n  },\n  {\n    country: \"Lebanon\",\n    zone: \"Asia/Beirut\",\n    flag: \"LB\",\n    cities: cityList.filter(city => city.country === \"LB\" && city.tz === \"Asia/Beirut\")\n  },\n  {\n    country: \"Oman\",\n    zone: \"Asia/Muscat\",\n    flag: \"OM\",\n    cities: cityList.filter(city => city.country === \"OM\" && city.tz === \"Asia/Muscat\")\n  },\n  {\n    country: \"Palestine\",\n    subdiv: [\n      {title: \"Gaza Strip\"}\n    ],\n    zone: \"Asia/Gaza\",\n    flag: \"PS\",\n    cities: cityList.filter(city => city.country === \"PS\" && city.tz === \"Asia/Gaza\")\n  },\n  {\n    country: \"Palestine\",\n    subdiv: [\n      {title: \"West Bank\"}\n    ],\n    zone: \"Asia/Hebron\",\n    flag: \"PS\",\n    cities: cityList.filter(city => city.country === \"PS\" && city.tz === \"Asia/Hebron\")\n  },\n  {\n    country: \"Qatar\",\n    zone: \"Asia/Qatar\",\n    flag: \"QA\",\n    cities: cityList.filter(city => city.country === \"QA\" && city.tz === \"Asia/Qatar\")\n  },\n  {\n    country: \"Saudi Arabia\",\n    zone: \"Asia/Riyadh\",\n    flag: \"SA\",\n    cities: cityList.filter(city => city.country === \"SA\" && city.tz === \"Asia/Riyadh\")\n  },\n  {\n    country: \"Syria\",\n    zone: \"Asia/Damascus\",\n    flag: \"SY\",\n    cities: cityList.filter(city => city.country === \"SY\" && city.tz === \"Asia/Damascus\")\n  },\n  {\n    country: \"Turkey\",\n    zone: \"Europe/Istanbul\",\n    flag: \"TR\",\n    cities: cityList.filter(city => city.country === \"TR\" && city.tz === \"Asia/Istanbul\")\n  },\n  {\n    country: \"United Arab Emirates\",\n    zone: \"Asia/Dubai\",\n    flag: \"AE\",\n    cities: cityList.filter(city => city.country === \"AE\" && city.tz === \"Asia/Dubai\")\n  },\n  {\n    country: \"Yemen\",\n    zone: \"Asia/Aden\",\n    flag: \"YE\",\n    cities: cityList.filter(city => city.country === \"YE\" && city.tz === \"Asia/Aden\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"American Samoa (United States)\",\n    zone: \"Pacific/Pago_Pago\",\n    flag: \"AS\",\n    cities: cityList.filter(city => city.country === \"AS\" && city.tz === \"Pacific/Pago_Pago\")\n  },\n  {\n    country: \"Cook Islands (New Zealand)\",\n    zone: \"Pacific/Rarotonga\",\n    flag: \"CK\",\n    cities: cityList.filter(city => city.country === \"CK\" && city.tz === \"Pacific/Rarotonga\")\n  },\n  {\n    country: \"Fiji\",\n    zone: \"Pacific/Fiji\",\n    flag: \"FJ\",\n    cities: cityList.filter(city => city.country === \"FJ\" && city.tz === \"Pacific/Fiji\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Austral Islands\"}, \n      {title: \"Society Islands\"}, \n      {title: \"Tuamotus\"}\n    ],\n    zone: \"Pacific/Tahiti\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.tz === \"Pacific/Tahiti\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Gambier Islands\"}\n    ],\n    zone: \"Pacific/Gambier\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.tz === \"Pacific/Gambier\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Marquesas Islands\"}\n    ],\n    zone: \"Pacific/Marquesas\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.tz === \"Pacific/Marquesas\")\n  },\n  {\n    country: \"Guam (United States)\",\n    zone: \"Pacific/Guam\",\n    flag: \"GU\",\n    cities: cityList.filter(city => city.country === \"GU\" && city.tz === \"Pacific/Guam\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Banaba\"}, \n      {title: \"Gilbert Islands\"}\n    ],\n    zone: \"Pacific/Tarawa\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.tz === \"Pacific/Tarawa\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Kiritimati\"}, \n      {title: \"Line Islands\"}\n    ],\n    zone: \"Pacific/Kiritimati\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.tz === \"Pacific/Kiritimati\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Phoenix Islands\"}\n    ],\n    zone: \"Pacific/Enderbury\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.tz === \"Pacific/Enderbury\")\n  },\n  {\n    country: \"Marshall Islands\",\n    subdiv: [\n      {title: \"Kwajalein Atoll\"}\n    ],\n    zone: \"Pacific/Kwajalein\",\n    flag: \"MH\",\n    cities: cityList.filter(city => city.country === \"MH\" && city.tz === \"Pacific/Kwajalein\")\n  },\n  {\n    country: \"Marshall Islands\",\n    subdiv: [\n      {title: \"Ailanglaplap Atoll\"},\n      {title: \"Ailuk Atoll\"},\n      {title: \"Arno Atoll\"},\n      {title: \"Aur Atoll\"},\n      {title: \"Ebon Atoll\"},\n      {title: \"Enewetok / Ujelang\"},\n      {title: \"Jabat Island\"},\n      {title: \"Jaluit Atoll\"},\n      {title: \"Kili / Bikini / Ejit\"},\n      {title: \"Lae Atoll\"},\n      {title: \"Lib Island\"},\n      {title: \"Likiep Atoll\"},\n      {title: \"Majuro Atoll\"},\n      {title: \"Maloelap Atoll\"},\n      {title: \"Mejit Island\"},\n      {title: \"Mili Atoll\"},\n      {title: \"Namorik Atoll\"},\n      {title: \"Namu Atoll\"},\n      {title: \"Rongelap Atoll\"},\n      {title: \"Ujae Atoll\"},\n      {title: \"Utirik Atoll\"},\n      {title: \"Wotho Atoll\"},\n      {title: \"Wotje Atoll\"}\n    ],\n    zone: \"Pacific/Majuro\",\n    flag: \"MH\",\n    cities: cityList.filter(city => city.country === \"MH\" && city.tz === \"Pacific/Majuro\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Chuuk\"}, \n      {title: \"Yap\"}\n    ],\n    zone: \"Pacific/Chuuk\",\n    flag: \"FM\",\n    cities: cityList.filter(city => city.country === \"FM\" && city.tz === \"Pacific/Chuuk\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Kosrae\"}\n    ],\n    zone: \"Pacific/Kosrae\",\n    flag: \"FM\",\n    cities: cityList.filter(city => city.country === \"FM\" && city.tz === \"Pacific/Kosrae\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Pohnpei\"}\n    ],\n    zone: \"Pacific/Pohnpei\",\n    flag: \"FM\",\n    cities: cityList.filter(city => city.country === \"FM\" && city.tz === \"Pacific/Pohnpei\")\n  },\n  {\n    country: \"Nauru\",\n    zone: \"Pacific/Nauru\",\n    flag: \"NR\",\n    cities: cityList.filter(city => city.country === \"NR\" && city.tz === \"Pacific/Nauru\")\n  },\n  {\n    country: \"New Caledonia (France)\",\n    zone: \"Pacific/Noumea\",\n    flag: \"NC\",\n    cities: cityList.filter(city => city.country === \"NC\" && city.tz === \"Pacific/Noumea\")\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Auckland\"},\n      {title: \"Bay of Plenty\"},\n      {title: \"Canterbury\"},\n      {title: \"Gisborne\"},\n      {title: \"Hawke's Bay\"},\n      {title: \"Manawatu-Wanganui\"},\n      {title: \"Marlborough\"},\n      {title: \"Nelson\"},\n      {title: \"Northland\"},\n      {title: \"Otago\"},\n      {title: \"Southland\"},\n      {title: \"Taranaki\"},\n      {title: \"Tasman\"},\n      {title: \"Waikato\"},\n      {title: \"West Coast\"},\n      {title: \"Wellington\"}\n    ],\n    zone: \"Pacific/Auckland\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => city.country === \"NZ\" && city.tz === \"Pacific/Auckland\")\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Chatham Islands\"}\n    ],\n    zone: \"Pacific/Chatham\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => city.country === \"NZ\" && city.tz === \"Pacific/Chatham\")\n  },\n  {\n    country: \"Niue (New Zealand)\",\n    zone: \"Pacific/Niue\",\n    flag: \"NU\",\n    cities: cityList.filter(city => city.country === \"NU\" && city.tz === \"Pacific/Niue\")\n  },\n  {\n    country: \"Northern Mariana Islands (United States)\",\n    zone: \"Pacific/Saipan\",\n    flag: \"MP\",\n    cities: cityList.filter(city => city.country === \"MP\" && city.tz === \"Pacific/Saipan\")\n  },\n  {\n    country: \"Palau\",\n    zone: \"Pacific/Palau\",\n    flag: \"PW\",\n    cities: cityList.filter(city => city.country === \"PW\" && city.tz === \"Pacific/Palau\")\n  },\n  {\n    country: \"Papua New Guinea\",\n    subdiv: [\n      {title: \"Bougainville\"}\n    ],\n    zone: \"Pacific/Bougainville\",\n    flag: \"PG\",\n    cities: cityList.filter(city => city.country === \"PG\" && city.tz === \"Pacific/Bougainville\")\n  },\n  {\n    country: \"Papua New Guinea\",\n    subdiv: [\n      {title: \"Central\"},\n      {title: \"Chimbu\"},\n      {title: \"Eastern Highlands\"},\n      {title: \"East New Britain\"},\n      {title: \"East Sepik\"},\n      {title: \"Enga\"},\n      {title: \"Guff\"},\n      {title: \"Hela\"},\n      {title: \"Jiwaka\"},\n      {title: \"Madang\"},\n      {title: \"Manus\"},\n      {title: \"Milne Bay\"},\n      {title: \"Morobe\"},\n      {title: \"National Capital District\"},\n      {title: \"New Ireland\"},\n      {title: \"Northern\"},\n      {title: \"Southern Highlands\"},\n      {title: \"Western Highlands\"},\n      {title: \"Western Province\"},\n      {title: \"West New Britain\"},\n      {title: \"West Sepik\"},\n    ],\n    zone: \"Pacific/Port_Moresby\",\n    flag: \"PG\",\n    cities: cityList.filter(city => city.country === \"PG\" && city.tz === \"Pacific/Port_Moresby\")\n  },\n  {\n    country: \"Pitcairn Islands (United Kingdom)\",\n    zone: \"Pacific/Pitcairn\",\n    flag: \"PN\",\n    cities: cityList.filter(city => city.country === \"PN\" && city.tz === \"Pacific/Pitcairn\")\n  },\n  {\n    country: \"Samoa\",\n    zone: \"Pacific/Apia\",\n    flag: \"WS\",\n    cities: cityList.filter(city => city.country === \"WS\" && city.tz === \"Pacific/Apia\")\n  },\n  {\n    country: \"Solomon Islands\",\n    zone: \"Pacific/Guadalcanal\",\n    flag: \"SB\",\n    cities: cityList.filter(city => city.country === \"SB\" && city.tz === \"Pacific/Guadalcanal\")\n  },\n  {\n    country: \"Tokelau (New Zealand)\",\n    zone: \"Pacific/Fakaofo\",\n    flag: \"TK\",\n    cities: cityList.filter(city => city.country === \"TK\" && city.tz === \"Pacific/Fakaofo\")\n  },\n  {\n    country: \"Tonga\",\n    zone: \"Pacific/Tongatapu\",\n    flag: \"TO\",\n    cities: cityList.filter(city => city.country === \"TO\" && city.tz === \"Pacific/Tongatapu\")\n  },\n  {\n    country: \"Tuvalu\",\n    zone: \"Pacific/Funafuti\",\n    flag: \"TV\",\n    cities: cityList.filter(city => city.country === \"TV\" && city.tz === \"Pacific/Funafuti\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Hawaii\"}\n    ],\n    zone: \"Pacific/Honolulu\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"Pacific/Honolulu\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Johnston Atoll\"}\n    ],\n    zone: \"Pacific/Johnston\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.tz === \"Pacific/Johnston\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Midway Islands\"}, \n      {title: \"Palmyra Atoll\"}\n    ],\n    zone: \"Pacific/Midway\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.tz === \"Pacific/Midway\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Wake\"}\n    ],\n    zone: \"Pacific/Wake\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.tz === \"Pacific/Wake\")\n  },\n  {\n    country: \"Vanuatu\",\n    zone: \"Pacific/Efate\",\n    flag: \"VU\",\n    cities: cityList.filter(city => city.country === \"VU\" && city.tz === \"Pacific/Efate\")\n  },\n  {\n    country: \"Wallis and Futuna (France)\",\n    zone: \"Pacific/Wallis\",\n    flag: \"WF\",\n    cities: cityList.filter(city => city.country === \"WF\" && city.tz === \"Pacific/Wallis\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kaliningrad Oblast\"}\n    ],\n    zone: \"Europe/Kaliningrad\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Kaliningrad\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Moscow\"}, \n      {title: \"Saint Petersburg\"}, \n      {title: \"Karelia\"}, \n      {title: \"Komi\"}, \n      {title: \"Arkhangelsk Oblast\"}, \n      {title: \"Bryansk Oblast\"}, \n      {title: \"Ivanovo Oblast\"}, \n      {title: \"Kaluga Oblast\"}, \n      {title: \"Kostroma Oblast\"}, \n      {title: \"Leningrad Oblast\"}, \n      {title: \"Moscow Oblast\"}, \n      {title: \"Murmansk Oblast\"}, \n      {title: \"Novgorod Oblast\"}, \n      {title: \"Oryol Oblast\"}, \n      {title: \"Pskov Oblast\"}, \n      {title: \"Ryazan Oblast\"}, \n      {title: \"Smolensk Oblast\"}, \n      {title: \"Tula Oblast\"}, \n      {title: \"Tver Oblast\"}, \n      {title: \"Vladimir Oblast\"}, \n      {title: \"Vologda Oblast\"}, \n      {title: \"Yaroslavl Oblast\"}, \n      {title: \"Nenets Autonomous Okrug\"}\n    ],\n    zone: \"Europe/Moscow\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Moscow\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Adygea\"}, \n      {title: \"Chechnya\"}, \n      {title: \"Dagestan\"}, \n      {title: \"Ingushetia\"}, \n      {title: \"Kabardino-Balkaria\"}, \n      {title: \"Kalmykia\"}, \n      {title: \"Karachay-Cherkessia\"}, \n      {title: \"North Ossetia-Alania\"}, \n      {title: \"Krasnodar Region\"}, \n      {title: \"Stavropol Region\"}, \n      {title: \"Astrakhan Oblast\"}, \n      {title: \"Rostov Oblast\"}, \n      {title: \"Volgograd Oblast\"}\n    ],\n    zone: \"Europe/Astrakhan\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Astrakhan\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Chuvashia\"}, \n      {title: \"Tatarstan\"}, \n      {title: \"Mari El\"}, \n      {title: \"Mordovia\"}, \n      {title: \"Kirov Oblast\"}, \n      {title: \"Nizhnyi Novgorod Oblast\"}\n    ],\n    zone: \"Europe/Kirov\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Kirov\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Belgorod Oblast\"}, \n      {title: \"Kursk Oblast\"}, \n      {title: \"Lipetsk Oblast\"}, \n      {title: \"Penza Oblast\"}, \n      {title: \"Saratov Oblast\"}, \n      {title: \"Tambov Oblast\"}, \n      {title: \"Voronezh Oblast\"}\n    ],\n    zone: \"Europe/Saratov\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Saratov\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Udmurtia\"}, \n      {title: \"Samara Oblast\"}, \n      {title: \"Ulyanovsk Oblast\"}\n    ],\n    zone: \"Europe/Samara\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Samara\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Bashkortostan\"}, \n      {title: \"Perm Region\"}, \n      {title: \"Chelyabinsk Oblast\"}, \n      {title: \"Kurgan Oblast\"}, \n      {title: \"Orenburg Oblast\"}, \n      {title: \"Sverdlovsk Oblast\"}, \n      {title: \"Tyumen Oblast\"}, \n      {title: \"Khanty-Mansi Autonomous Okrug\"}, \n      {title: \"Yamalo-Nenets Autonomous Okrug\"}\n    ],\n    zone: \"Asia/Yekaterinburg\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Yekaterinburg\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Omsk Oblast\"}\n    ],\n    zone: \"Asia/Omsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Omsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Altai Republic\"}, \n      {title: \"Altai Region\"}\n    ],\n    zone: \"Asia/Barnaul\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Barnaul\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Khakassia\"}, \n      {title: \"Tuva Republic\"}, \n      {title: \"Krasnoyarsk Region\"}\n    ],\n    zone: \"Asia/Krasnoyarsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Krasnoyarsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kemerovo Oblast\"}\n    ],\n    zone: \"Asia/Novokuznetsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Novokuznetsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Novosibirsk Oblast\"}\n    ],\n    zone: \"Asia/Novosibirsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Novosibirsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Tomsk Oblast\"}\n    ],\n    zone: \"Asia/Tomsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Tomsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Buryatia\"}, \n      {title: \"Irkutsk Oblast\"}\n    ],\n    zone: \"Asia/Irkutsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Irkutsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(western part)\"}, \n      {title: \"Amur Oblast\"}\n    ],\n    zone: \"Asia/Yakutsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Yakutsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Zabaykalsky Krai\"}\n    ],\n    zone: \"Asia/Chita\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Chita\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Khabarovsk Region\"}, \n      {title: \"Primorsky Krai\"}, \n      {title: \"Jewish Autonomous Oblast\"}\n    ],\n    zone: \"Asia/Vladivostok\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Vladivostok\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(central part)\"}\n    ],\n    zone: \"Asia/Ust-Nera\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Ust-Nera\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(eastern part)\"}\n    ],\n    zone: \"Asia/Srednekolymsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Srednekolymsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Magadan Oblast\"}\n    ],\n    zone: \"Asia/Magadan\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Magadan\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakhalin Oblast\"}\n    ],\n    zone: \"Asia/Sakhalin\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Sakhalin\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kamchatka\"}\n    ],\n    zone: \"Asia/Kamchatka\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Kamchatka\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Chukotka Autonomous Okrug\"}\n    ],\n    zone: \"Asia/Anadyr\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Anadyr\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Argentina\",\n    zone: \"America/Argentina/Buenos_Aires\",\n    flag: \"AR\",\n    cities: cityList.filter(city => city.country === \"AR\" && city.tz.startsWith(\"America/Argentina\"))\n  },\n  {\n    country: \"Bolivia\",\n    zone: \"America/La_Paz\",\n    flag: \"BO\",\n    cities: cityList.filter(city => city.country === \"BO\" && city.tz === \"America/La_Paz\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Acre\"}\n    ],\n    zone: \"America/Rio_Branco\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Rio_Branco\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amazonas\", extra: \"(western part)\"}\n    ],\n    zone: \"America/Eirunepe\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Eirunepe\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Distrito Federal\"}, \n      {title: \"Espírito Santo\"}, \n      {title: \"Goiás\"}, \n      {title: \"Minas Gerais\"}, \n      {title: \"Paraná\"}, \n      {title: \"Rio de Janeiro\"}, \n      {title: \"Rio Grande do Sul\"}, \n      {title: \"Santa Catarina\"}, \n      {title: \"São Paulo\"}\n    ],\n    zone: \"America/Sao_Paulo\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Sao_Paulo\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Alagoas\"}, \n      {title: \"Sergipe\"}\n    ],\n    zone: \"America/Maceio\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Maceio\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amapá\"}\n    ],\n    zone: \"America/Belem\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Belem\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Bahia\"}\n    ],\n    zone: \"America/Bahia\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Bahia\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Ceará\"}, \n      {title: \"Maranhão\"}, \n      {title: \"Paraíba\"}, \n      {title: \"Piauí\"}, \n      {title: \"Rio Grande do Norte\"}\n    ],\n    zone: \"America/Fortaleza\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Fortaleza\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Pará\"}\n    ],\n    zone: \"America/Santarem\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Santarem\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Pernambuco\"}\n    ],\n    zone: \"America/Recife\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Recife\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Tocantins\"}\n    ],\n    zone: \"America/Araguaina\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Araguaina\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amazonas\", extra: \"(eastern part)\"}\n    ],\n    zone: \"America/Manaus\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Manaus\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Mato Grosso\"}\n    ],\n    zone: \"America/Cuiaba\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Cuiaba\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Mato Grosso do Sul\"}\n    ],\n    zone: \"America/Campo_Grande\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Campo_Grande\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Rondônia\"}\n    ],\n    zone: \"America/Porto_Velho\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Porto_Velho\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Roraima\"}\n    ],\n    zone: \"America/Boa_Vista\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Boa_Vista\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Atol das Rocas\"}, \n      {title: \"Fernando de Noronha\"}, \n      {title: \"Martim Vaz\"}, \n      {title: \"Trinidade\"}, \n      {title: \"Saint Peter and Saint Paul Archipelago\"}\n    ],\n    zone: \"America/Noronha\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Noronha\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Easter Island\"}\n    ],\n    zone: \"Pacific/Easter\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"Pacific/Easter\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Aisén\"},\n      {title: \"Antofagasta\"},\n      {title: \"Araucanía\"},\n      {title: \"Arica and Parinacota\"},\n      {title: \"Atacama\"},\n      {title: \"Biobío\"},\n      {title: \"Coquimbo\"},\n      {title: \"Los Lagos\"},\n      {title: \"Los Ríos\"},\n      {title: \"Maule\"},\n      {title: \"Ñuble\"},\n      {title: \"Región del Libertador Bernardo O'Higgins\"},\n      {title: \"Santiago\"},\n      {title: \"Tarapacá\"},\n      {title: \"Valparaíso\", extra: \"(continental part)\"},\n    ],\n    zone: \"America/Santiago\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"America/Santiago\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Magallanes and Antártica Chilena Region\"}\n    ],\n    zone: \"America/Punta_Arenas\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"America/Punta_Arenas\")\n  },\n  {\n    country: \"Colombia\",\n    zone: \"America/Bogota\",\n    flag: \"CO\",\n    cities: cityList.filter(city => city.country === \"CO\" && city.tz === \"America/Bogota\")\n  },\n  {\n    country: \"Ecuador\",\n    subdiv: [\n      {title: \"Azuay\"},\n      {title: \"Bolívar\"},\n      {title: \"Cañar\"},\n      {title: \"Carchi\"},\n      {title: \"Chimborazo\"},\n      {title: \"Cotopaxi\"},\n      {title: \"El Oro\"},\n      {title: \"Esmeraldas\"},\n      {title: \"Guayas\"},\n      {title: \"Imbabura\"},\n      {title: \"Loja\"},\n      {title: \"Los Ríos\"},\n      {title: \"Manabí\"},\n      {title: \"Morona Santiago\"},\n      {title: \"Napo\"},\n      {title: \"Orellana\"},\n      {title: \"Pastaza\"},\n      {title: \"Pichincha\"},\n      {title: \"Santa Elena\"},\n      {title: \"Santo Domingo de los Tsáchilas\"},\n      {title: \"Sucumbíos\"},\n      {title: \"Tungurahua\"},\n      {title: \"Zamora Chinchipe\"}\n    ],\n    zone: \"America/Guayaquil\",\n    flag: \"EC\",\n    cities: cityList.filter(city => city.country === \"EC\" && city.tz === \"America/Guayaquil\")\n  },\n  {\n    country: \"Ecuador\",\n    subdiv: [\n      {title: \"Galápagos\"}\n    ],\n    zone: \"Pacific/Galapagos\",\n    flag: \"EC\",\n    cities: cityList.filter(city => city.country === \"EC\" && city.tz === \"America/Galapagos\")\n  },\n  {\n    country: \"Falkland Islands (United Kingdom)\",\n    zone: \"Atlantic/Stanley\",\n    flag: \"FK\",\n    cities: cityList.filter(city => city.country === \"FK\" && city.tz === \"Atlantic/Stanley\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"French Guiana\"}\n    ],\n    zone: \"America/Cayenne\",\n    flag: \"FR\", // eigentlich GF\n    cities: cityList.filter(city => city.country === \"GF\" && city.tz === \"America/Cayenne\")\n  },\n  {\n    country: \"Guyana\",\n    zone: \"America/Guyana\",\n    flag: \"GY\",\n    cities: cityList.filter(city => city.country === \"GY\" && city.tz === \"America/Guyana\")\n  },\n  {\n    country: \"Paraguay\",\n    zone: \"America/Asuncion\",\n    flag: \"PY\",\n    cities: cityList.filter(city => city.country === \"PY\" && city.tz === \"America/Asuncion\")\n  },\n  {\n    country: \"Peru\",\n    zone: \"America/Lima\",\n    flag: \"PE\",\n    cities: cityList.filter(city => city.country === \"PE\" && city.tz === \"America/Lima\")\n  },\n  {\n    country: \"South Georgia and the South Sandwich Islands (United Kingdom)\",\n    zone: \"Atlantic/South_Georgia\",\n    flag: \"GS\",\n    cities: cityList.filter(city => city.country === \"GS\" && city.tz === \"Atlantic/South_Georgia\")\n  },\n  {\n    country: \"Suriname\",\n    zone: \"America/Paramaribo\",\n    flag: \"SR\",\n    cities: cityList.filter(city => city.country === \"SR\" && city.tz === \"America/Paramaribo\")\n  },\n  {\n    country: \"Uruguay\",\n    zone: \"America/Montevideo\",\n    flag: \"UY\",\n    cities: cityList.filter(city => city.country === \"UY\" && city.tz === \"America/Montevideo\")\n  },\n  {\n    country: \"Venezuela\",\n    zone: \"America/Caracas\",\n    flag: \"VE\",\n    cities: cityList.filter(city => city.country === \"VE\" && city.tz === \"America/Caracas\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Bangladesh\",\n    zone: \"Asia/Dhaka\",\n    flag: \"BD\",\n    cities: cityList.filter(city => city.country === \"BD\" && city.tz === \"Asia/Dhaka\")\n  },\n  {\n    country: \"Bhutan\",\n    zone: \"Asia/Thimphu\",\n    flag: \"BT\",\n    cities: cityList.filter(city => city.country === \"BT\" && city.tz === \"Asia/Thimphu\")\n  },\n  {\n    country: \"British Indian Ocean Territory (United Kingdom)\",\n    zone: \"Indian/Chagos\",\n    flag: \"IO\",\n    cities: cityList.filter(city => city.country === \"IO\" && city.tz === \"Indian/Chagos\")\n  },\n  {\n    country: \"Cocos Islands (Australia)\",\n    zone: \"Indian/Cocos\",\n    flag: \"CC\",\n    cities: cityList.filter(city => city.country === \"CC\" && city.tz === \"Indian/Cocos\")\n  },\n  {\n    country: \"India\",\n    zone: \"Asia/Kolkata\",\n    flag: \"IN\",\n    cities: cityList.filter(city => city.country === \"IN\" && city.tz === \"Asia/Kolkata\")\n  },\n  {\n    country: \"Myanmar\",\n    zone: \"Asia/Yangon\",\n    flag: \"MM\",\n    cities: cityList.filter(city => city.country === \"MM\" && city.tz === \"Asia/Yangon\")\n  },\n  {\n    country: \"Nepal\",\n    zone: \"Asia/Kathmandu\",\n    flag: \"NP\",\n    cities: cityList.filter(city => city.country === \"NP\" && city.tz === \"Asia/Kathmandu\")\n  },\n  {\n    country: \"Maldives\",\n    zone: \"Indian/Maldives\",\n    flag: \"MV\",\n    cities: cityList.filter(city => city.country === \"MV\" && city.tz === \"Indian/Maldives\")\n  },\n  {\n    country: \"Pakistan\",\n    zone: \"Asia/Karachi\",\n    flag: \"PK\",\n    cities: cityList.filter(city => city.country === \"PK\" && city.tz === \"Asia/Karachi\")\n  },\n  {\n    country: \"Sri Lanka\",\n    zone: \"Asia/Colombo\",\n    flag: \"LK\",\n    cities: cityList.filter(city => city.country === \"LK\" && city.tz === \"Asia/Colombo\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Brunei\",\n    zone: \"Asia/Brunei\",\n    flag: \"BN\",\n    cities: cityList.filter(city => city.country === \"BN\" && city.tz === \"Asia/Brunei\"),\n  },\n  {\n    country: \"Cambodia\",\n    zone: \"Asia/Phnom_Penh\",\n    flag: \"KH\",\n    cities: cityList.filter(city => city.country === \"KH\" && city.tz === \"Asia/Phnom_Penh\")\n  },\n  {\n    country: \"Christmas Island (Australia)\",\n    zone: \"Indian/Christmas\",\n    flag: \"CX\",\n    cities: cityList.filter(city => city.country === \"CX\" && city.tz === \"Indian/Christmas\")\n  },\n  {\n    country: \"Laos\",\n    zone: \"Asia/Vientiane\",\n    flag: \"LA\",\n    cities: cityList.filter(city => city.country === \"LA\" && city.tz === \"Asia/Vientiane\")\n  },\n  {\n    country: \"Malaysia\",\n    subdiv: [\n      {title: \"Johor\"},\n      {title: \"Kedah\"},\n      {title: \"Kelantan\"},\n      {title: \"Kuala Lumpur\"},\n      {title: \"Malacca\"},\n      {title: \"Negeri Sembilan\"},\n      {title: \"Pahang\"},\n      {title: \"Penang\"},\n      {title: \"Perak\"},\n      {title: \"Perlis\"},\n      {title: \"Putrajaya\"},\n      {title: \"Selangor\"},\n      {title: \"Terengganu\"},\n    ],\n    zone: \"Asia/Kuala_Lumpur\",\n    flag: \"MY\",\n    cities: cityList.filter(city => city.country === \"MY\" && city.tz === \"Asia/Kuala_Lumpur\")\n  },\n  {\n    country: \"Malaysia\",\n    subdiv: [\n      {title: \"Labuan\"},\n      {title: \"Sabah\"}, \n      {title: \"Sarawak\"}\n    ],\n    zone: \"Asia/Kuching\",\n    flag: \"MY\",\n    cities: cityList.filter(city => city.country === \"MY\" && city.tz === \"Asia/Kuching\")\n  },\n  {\n    country: \"Philippines\",\n    zone: \"Asia/Manila\",\n    flag: \"PH\",\n    cities: cityList.filter(city => city.country === \"PH\" && city.tz === \"Asia/Manila\")\n  },\n  {\n    country: \"Singapore\",\n    zone: \"Asia/Singapore\",\n    flag: \"SG\",\n    cities: cityList.filter(city => city.country === \"SG\" && city.tz === \"Asia/Singapore\")\n  },\n  {\n    country: \"Thailand\",\n    zone: \"Asia/Bangkok\",\n    flag: \"TH\",\n    cities: cityList.filter(city => city.country === \"TH\" && city.tz === \"Asia/Bangkok\")\n  },\n  {\n    country: \"Timor-Leste\",\n    zone: \"Asia/Dili\",\n    flag: \"TL\",\n    cities: cityList.filter(city => city.country === \"TL\" && city.tz === \"Asia/Dili\")\n  },\n  {\n    country: \"Vietnam\",\n    zone: \"Asia/Ho_Chi_Minh\",\n    flag: \"VN\",\n    cities: cityList.filter(city => city.country === \"VN\" && city.tz === \"Asia/Ho_Chi_Minh\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Alabama\"}, \n      {title: \"Arkansas\"}, \n      {title: \"Florida\", extra: \"(west of Appalachicola River)\"}, \n      {title: \"Illinois\"}, \n      {title: \"Iowa\"}, \n      {title: \"Kansas\", extra: \"(most of state)\"}, \n      {title: \"Kentucky\", extra: \"(western 40%)\"}, \n      {title: \"Louisiana\"}, \n      {title: \"Minnesota\"}, \n      {title: \"Mississippi\"}, \n      {title: \"Missouri\"}, \n      {title: \"Nebraska\", extra: \"(most of state)\"}, \n      {title: \"Oklahoma\"}, \n      {title: \"South Dakota\", extra: \"(eastern half)\"}, \n      {title: \"Tennessee\", extra: \"(most of state)\"}, \n      {title: \"Texas\", extra: \"(most of state)\"}, \n      {title: \"Wisconsin\"}\n    ],\n    zone: \"America/Chicago\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Chicago\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(west of 169°30' W)\"}\n    ],\n    zone: \"America/Adak\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Adak\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(east of 169°30' W)\"}\n    ],\n    zone: \"America/Anchorage\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Anchorage\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Arizona\", extra: \"(except Navajo Nation Reservation)\"}\n    ],\n    zone: \"America/Phoenix\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Phoenix\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Arizona\", extra: \"(Navajo Nation Reservation)\"}\n    ],\n    zone: \"America/Shiprock\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Shiprock\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"California\"}, \n      {title: \"Nevada\", extra: \"(most of state)\"}, \n      {title: \"Oregon\", extra: \"(most of state)\"}, \n      {title: \"Washington\"}\n    ],\n    zone: \"America/Los_Angeles\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Los_Angeles\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Colorado\"}, \n      {title: \"Kansas\", extra: \"(western border counties)\"}, \n      {title: \"Montana\"}, \n      {title: \"Nebraska\", extra: \"(western third)\"}, \n      {title: \"Nevada\", extra: \"(West Wendover)\"}, \n      {title: \"New Mexico\"}, \n      {title: \"North Dakota\", extra: \"(southwestern part)\"}, \n      {title: \"South Dakota\", extra: \"(western half)\"}, \n      {title: \"Texas\", extra: \"(El Paso, Hudspeth)\"}, \n      {title: \"Utah\"}, \n      {title: \"Wyoming\"}\n    ],\n    zone: \"America/Denver\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Denver\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Connecticut\"}, \n      {title: \"Delaware\"}, \n      {title: \"District of Columbia\"}, \n      {title: \"Florida\", extra: \"(east of Appalachicola River)\"}, \n      {title: \"Georgia\"}, \n      {title: \"Maine\"}, \n      {title: \"Maryland\"}, \n      {title: \"Massachusetts\"}, \n      {title: \"New Hampshire\"}, \n      {title: \"New Jersey\"}, \n      {title: \"New York\"}, \n      {title: \"North Carolina\"}, \n      {title: \"Ohio\"}, \n      {title: \"Pennsylvania\"}, \n      {title: \"Rhode Island\"}, \n      {title: \"South Carolina\"}, \n      {title: \"Tennessee\", extra: \"(eastern part)\"}, \n      {title: \"Vermont\"}, \n      {title: \"Virginia\"}, \n      {title: \"West Virginia\"}\n    ],\n    zone: \"America/New_York\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/New_York\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Idaho\", extra: \"(most of state)\"}, \n      {title: \"Oregon\", extra: \"(Malheur County)\"}\n    ],\n    zone: \"America/Boise\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Boise\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Indiana\", extra: \"(most of state)\"}\n    ],\n    zone: \"America/Indiana/Indianapolis\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Indiana/Indianapolis\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Indiana\", extra: \"(northwest and southwest)\"}\n    ],\n    zone: \"America/Indiana/Knox\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Indiana/Knox\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Kentucky\", extra: \"(eastern 60%)\"}\n    ],\n    zone: \"America/Kentucky/Louisville\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Kentucky/Louisville\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Michigan\", extra: \"(most of state)\"}\n    ],\n    zone: \"America/Detroit\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Detroit\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Michigan\", extra: \"(counties bordering Wisconsin)\"}\n    ],\n    zone: \"America/Menominee\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Menominee\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"North Dakota\", extra: \"(most of state)\"}\n    ],\n    zone: \"America/North_Dakota/Center\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/North_Dakota/Center\")\n  },\n]\n","import Africa from \"./timezones/Africa\"\nimport Antarctica from \"./timezones/Antarctica\"\nimport Australia from \"./timezones/Australia\"\nimport Canada from \"./timezones/Canada\"\nimport Caribbean from \"./timezones/Caribbean\"\nimport CentralAmerica from \"./timezones/CentralAmerica\"\nimport CentralAsia from \"./timezones/CentralAsia\"\nimport EastAsia from \"./timezones/EastAsia\"\nimport Europe from \"./timezones/Europe\"\nimport Indonesia from \"./timezones/Indonesia\"\nimport MiddleEast from \"./timezones/MiddleEast\"\nimport Oceania from \"./timezones/Oceania\"\nimport Russia from \"./timezones/Russia\"\nimport SouthAmerica from \"./timezones/SouthAmerica\"\nimport SouthAsia from \"./timezones/SouthAsia\"\nimport SouthEastAsia from \"./timezones/SouthEastAsia\"\nimport UnitedStates from \"./timezones/UnitedStates\"\n\nexport default [\n  ...Africa, \n  ...Antarctica,\n  ...Australia,\n  ...Canada,\n  ...Caribbean,\n  ...CentralAmerica,\n  ...CentralAsia, \n  ...EastAsia, \n  ...Europe, \n  ...Indonesia,\n  ...MiddleEast,\n  ...Oceania, \n  ...Russia, \n  ...SouthAmerica,\n  ...SouthAsia,\n  ...SouthEastAsia,\n  ...UnitedStates\n]\n","import React, { useEffect } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport moment from \"moment-timezone\";\nimport Clock from \"../components/Clock\";\nimport timezonesRaw from \"../components/data\"\nimport \"../styles/App.css\";\n\nexport default function Home() {\n  const [allStates] = useDebugState(\"allStates\", timezonesRaw)\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\", \"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\", null)\n  const prepareZones = (filterVal) => {\n    const unsortedStates = allStates.map(tz => {\n      const Now = moment().utc().format(\"x\")\n      const {country, zone, flag, subdiv = [], cities = [] } = tz\n      const offset = moment().tz(zone).format(\"Z\")\n      const numericOffset = -1 * moment.tz.zone(zone).utcOffset(Now)\n      return { country, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal ? filterVal : filtVal\n    const filteredZones = filterValue !== \"\"  ? timezoneArray.filter(timezone => {\n      const { country, subdiv = [], cities = [] } = timezone\n      const title = `${country}: ${subdiv.map(item => item.title).join(\", \")}`\n      if(filterVal !== \"\"){\n        if(title.toLowerCase().includes(filterValue.toLowerCase())) {\n          return true\n        }\n        const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n        if(filteredCities.length > 0) return true\n        return false\n      }\n      return true\n    }) : timezoneArray\n    setTimezones(filteredZones)\n  }\n  useEffect(() => {\n    prepareZones()\n    setInterval(1000,prepareZones)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder=\"Filter countries\" onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(e.target.value)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Flag from \"react-world-flags\";\nimport moment from \"moment-timezone\";\nimport \"../styles/Clock.css\";\n\nconst getSunTime = (city) => {\n  const { lon } = city \n  const offsetRaw = lon * 4\n  const offsetSign = offsetRaw > 0 ? \"+\" : \"-\"\n  const offsetHours = Math.floor(Math.abs(offsetRaw)/60)\n  const offsetMins = Math.abs(offsetRaw) % 60\n  const offset = `${offsetSign}${offsetHours < 10 ? `0${offsetHours}` : `${offsetHours}`}:${offsetMins < 10 ? `0${offsetMins}` : `${offsetMins}`}`\n  const sunTime = moment().utcOffset(offset).format(\"HH:mm\")\n  return sunTime\n}\n\nconst ClockTitle = ({ city }) => {\n  const correctedCity = city.replace(\"-\",\"–\")\n  return (\n    <h2>\n      <span>\n        {correctedCity}\n      </span>\n    </h2>\n  )\n}\n\nfunction getMultiTitle(flagTitle, flagSubdiv){\n  if(flagSubdiv.length === 1) {\n    const [subdiv] = flagSubdiv\n    const {title, extra} = subdiv\n    if(extra) {\n      return `${flagTitle}: ${title} ${extra}`\n    } else {\n      return `${flagTitle}: ${title}`\n    }\n  } else {\n    const sortedSubdiv = flagSubdiv.sort((a,b) => a.title.localeCompare(b.title,\"de\",{sensitivy: \"base\"}))\n    const text = sortedSubdiv.map(item => item.extra ? `${item.title} ${item.extra}` : `${item.title}`).join(\", \")\n    return `${flagTitle}: ${text}`\n  }\n}\n\nconst ClockFlags = ({flags}) => (\n    <div>\n      {flags && Array.isArray(flags) && flags.length > 0 && flags.map((flag, index) => {\n        const flagTitle = flag.subdiv.length > 0 \n          ? getMultiTitle(flag.title, flag.subdiv)\n          : flag.title\n        return (\n          <Flag key={index} code={flag.code} title={flagTitle} height=\"20\" />\n        )\n      })}\n    </div>\n  )\n\nconst ClockDate = ({date}) => (<p>{date}</p>)\n\nconst ClockTime = ({date}) => (<p>{date}</p>)\n\nexport default class IdealClock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      date: moment(),\n      formattedDate: this.props.offset ? moment().utcOffset(this.props.offset).format(\"DD/MM/YYYY\") : moment().tz(this.props.zone).format(\"DD/MM/YYYY\"),\n      formattedTime: this.props.offset ? moment().utcOffset(this.props.offset).format(\"HH:mm:ss\") : moment().tz(this.props.zone).format(\"HH:mm:ss\"),\n      formattedZone: \"UTC\" + moment.tz(this.props.zone).format(\"Z\"),\n    };\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render(props) {\n    const { city = \"\", flags = [], cities = [] } = this.props\n    const { formattedDate, formattedTime } = this.state\n    const sortedFlags = flags.sort((a, b) => a.title.localeCompare(b.title, \"de\", {sensitivy: \"base\"}))\n    const reducedFlags = sortedFlags.reduce((acc, curr) => {\n      const arr = [...acc]\n      const flagIndexes = arr.map(flag => flag.code)\n      if(flagIndexes.includes(curr.code)) {\n        const index = flagIndexes.indexOf(curr.code)\n        const element = arr[index]\n        curr.subdiv.forEach(item => {\n          if(!element.subdiv.includes(item)) {\n            element.subdiv.push(item)\n          }\n        })\n        const sortedSubdiv = element.subdiv.sort((a,b) => a.title.localeCompare(b.title,\"de\",{ sensitivy: \"base\"}))\n        arr[index].subdiv = sortedSubdiv\n      } else {\n        arr.push(curr)\n      }\n      return arr\n    }, [])\n    const uniqueCities = [ ...new Set(cities) ]\n    return (\n      <div>\n        <div className=\"album-item\">\n          <ClockTitle city={city} />\n          <ClockFlags flags={reducedFlags} />\n          {uniqueCities && uniqueCities.length > 0 ? (\n            <details style={{ width: \"95%\", paddingLeft: \"2.5%\", paddingRight: \"2.5%\"}}>\n              <summary>Major cities</summary>\n              <ul>\n                {uniqueCities.sort((a,b) => {\n                  if(a.asciiname.toLowerCase() < b.asciiname.toLowerCase()) return -1\n                  if(b.asciiname.toLowerCase() < a.asciiname.toLowerCase()) return +1\n                  if(a.country.toLowerCase() < b.country.toLowerCase()) return -1\n                  if(b.country.toLowerCase() < a.country.toLowerCase()) return +1\n                  if(a.adminCode.toLowerCase() < b.adminCode.toLowerCase()) return -1\n                  if(b.adminCode.toLowerCase() < a.adminCode.toLowerCase()) return +1\n                  return 0\n                }).map((city, index) => (\n                <li key={`city-${index}`} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\n                  <span style={{ flexBasis: \"65%\", textAlign: \"left\" }}>{city.asciiname}</span>\n                  <Flag code={city.country} style={{ flexBasis: \"35px\" }}/>\n                  <span>{getSunTime(city)}</span>\n                </li>\n                ))}\n              </ul>\n            </details>\n          ) : (\n            <div style={{ height: \"24.5px\"}} />\n          )}\n          <ClockDate date={formattedDate} />\n          <ClockTime date={formattedTime} />\n        </div>\n      </div>\n    );\n  }\n  tick() {\n    this.setState({\n      date: moment(),\n      formattedDate: this.props.offset ? moment().utcOffset(this.props.offset).format(\"DD/MM/YYYY\") : moment().tz(this.props.zone).format(\"DD/MM/YYYY\"),\n      formattedTime: this.props.offset ? moment().utcOffset(this.props.offset).format(\"HH:mm:ss\") : moment().tz(this.props.zone).format(\"HH:mm:ss\"),\n      formattedZone: \"UTC\" + moment.tz(this.props.zone).format(\"Z\")\n    });\n  }\n}\n","import citiesRaw from \"cities15000-json\"\n\nconst cities500k = citiesRaw.filter(city => city.population >= 500000)\n\nexport default cities500k","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Algeria\",\n    zone: \"Etc/GMT+0\",\n    flag: \"DZ\",\n    cities: cityList.filter(city => city.country === \"DZ\")\n  },\n  {\n    country: \"Angola\",\n    zone: \"Etc/GMT-1\",\n    flag: \"AO\",\n    cities: cityList.filter(city => city.country === \"AO\")\n  },\n  {\n    country: \"Benin\",\n    zone: \"Etc/GMT+0\",\n    flag: \"BJ\",\n    cities: cityList.filter(city => city.country === \"BJ\")\n  },\n  {\n    country: \"Botswana\",\n    zone: \"Etc/GMT-2\",\n    flag: \"BW\",\n    cities: cityList.filter(city => city.country === \"BW\")\n  },\n  {\n    country: \"Burkina Faso\",\n    zone: \"Etc/GMT+0\",\n    flag: \"BF\",\n    cities: cityList.filter(city => city.country === \"BF\")\n  },\n  {\n    country: \"Burundi\",\n    zone: \"Etc/GMT-2\",\n    flag: \"BI\",\n    cities: cityList.filter(city => city.country === \"BI\")\n  },\n  {\n    country: \"Cabo Verde\",\n    zone: \"Etc/GMT+2\",\n    flag: \"CV\",\n    cities: cityList.filter(city => city.country === \"CV\")\n  },\n  {\n    country: \"Cameroon\",\n    zone: \"Etc/GMT-1\",\n    flag: \"CM\",\n    cities: cityList.filter(city => city.country === \"CM\")\n  },\n  {\n    country: \"Central African Republic\",\n    zone: \"Etc/GMT-1\",\n    flag: \"CF\",\n    cities: cityList.filter(city => city.country === \"CF\")\n  },\n  {\n    country: \"Chad\",\n    zone: \"Etc/GMT-1\",\n    flag: \"TD\",\n    cities: cityList.filter(city => city.country === \"TD\")\n  },\n  {\n    country: \"Comoros\",\n    zone: \"Etc/GMT-3\",\n    flag: \"KM\",\n    cities: cityList.filter(city => city.country === \"KM\")\n  },\n  {\n    country: \"Côte d'Ivoire\",\n    zone: \"Etc/GMT+0\",\n    flag: \"CI\",\n    cities: cityList.filter(city => city.country === \"CI\")\n  },\n  {\n    country: \"Democratic Republic of the Congo\",\n    subdiv: [\n      {title: \"Équateur\"}, // 02\n      {title: \"Kasaï\"}, // 18\n      {title: \"Kinshasa\"}, // 06\n      {title: \"Kongo Central\"}, // 08\n      {title: \"Kwango\"}, // 19\n      {title: \"Kwilu\"}, // 20\n      {title: \"Mai-Ndombe\"}, // 24\n      {title: \"Mongala\"}, // 25\n      {title: \"Nord-Ubangi\"}, // 26\n      {title: \"Sud-Ubangi\"}, // 28\n      {title: \"Tshuapa\"} // 31\n    ],\n    zone: \"Etc/GMT-1\",\n    flag: \"CD\",\n    cities: cityList.filter(city => city.country === \"CD\" && [\"02\",\"06\",\"08\",\"18\",\"19\",\"20\",\"24\",\"25\",\"26\",\"28\",\"31\"].includes(city.adminCode))\n  },\n  {\n    country: \"Democratic Republic of the Congo\",\n    subdiv: [\n      {title: \"Bas-Uele\"}, // 13\n      {title: \"Haut-Katanga\"}, // 14 \n      {title: \"Haut-Lomami\"}, // 15\n      {title: \"Haut-Uele\"}, // 16\n      {title: \"Ituri\"}, // 17\n      {title: \"Kasaï-Central\"}, // 23\n      {title: \"Kasaï-Oriental\"}, // 04\n      {title: \"Lomami\"}, // 21\n      {title: \"Lualaba\"}, // 22\n      {title: \"Maniema\"}, // 10\n      {title: \"Nord-Kivu\"}, // 11\n      {title: \"Sankuru\"}, // 27\n      {title: \"Sud-Kivu\"}, // 12\n      {title: \"Tanganjika\"}, // 29\n      {title: \"Tshopo\"}, // 30\n    ],\n    zone: \"Etc/GMT-2\",\n    flag: \"CD\",\n    cities: cityList.filter(city => city.country === \"CD\" && [\"04\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"21\",\"22\",\"23\",\"27\",\"29\",\"30\"].includes(city.adminCode))\n  },\n  {\n    country: \"Djibouti\",\n    zone: \"Etc/GMT-3\",\n    flag: \"DJ\",\n    cities: cityList.filter(city => city.country === \"DJ\")\n  },\n  {\n    country: \"Egypt\",\n    zone: \"Etc/GMT-2\",\n    flag: \"EG\",\n    cities: cityList.filter(city => city.country === \"EG\")\n  },\n  {\n    country: \"Equatorial Guinea\",\n    zone: \"Etc/GMT-1\",\n    flag: \"GQ\",\n    cities: cityList.filter(city => city.country === \"GQ\")\n  },\n  {\n    country: \"Eritrea\",\n    zone: \"Etc/GMT-3\",\n    flag: \"ER\",\n    cities: cityList.filter(city => city.country === \"ER\")\n  },\n  {\n    country: \"eSwatini\",\n    zone: \"Etc/GMT-2\",\n    flag: \"SZ\",\n    cities: cityList.filter(city => city.country === \"SZ\")\n  },\n  {\n    country: \"Ethiopia\",\n    zone: \"Etc/GMT-3\",\n    flag: \"ET\",\n    cities: cityList.filter(city => city.country === \"ET\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Mayotte\"}\n    ],\n    zone: \"Etc/GMT-3\",\n    flag: \"FR\", // eigentlich YT aber gleiche Flagge\n    cities: cityList.filter(city => city.country === \"YT\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Réunion\"}\n    ],\n    zone: \"Etc/GMT-4\",\n    flag: \"FR\", // eigentlich RE aber gleiche Flagge\n    cities: cityList.filter(city => city.country === \"RE\")\n  },\n  {\n    country: \"French Southern and Antarctic Lands (France)\",\n    subdiv: [\n      {title: \"Crozet Islands\"},\n      {title: \"Scattered Islands in the Indian Ocean\"},\n    ],\n    zone: \"Etc/GMT-4\",\n    flag: \"TF\",\n    cities: cityList.filter(city => city.country === \"TF\" && [\"02\",\"05\"].includes(city.adminCode))\n  },\n  {\n    country: \"French Southern and Antarctic Lands (France)\",\n    subdiv: [\n      {title: \"Kerguelen Islands\"},\n      {title: \"St. Paul and Amsterdam Islands\"},\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"TF\",\n    cities: cityList.filter(city => city.country === \"TF\" && [\"01\",\"03\"].includes(city.adminCode))\n  },\n  {\n    country: \"Gabon\",\n    zone: \"Etc/GMT-1\",\n    flag: \"GA\",\n    cities: cityList.filter(city => city.country === \"GA\")\n  },\n  {\n    country: \"The Gambia\",\n    zone: \"Etc/GMT+1\",\n    flag: \"GM\",\n    cities: cityList.filter(city => city.country === \"GM\")\n  },\n  {\n    country: \"Ghana\",\n    zone: \"Etc/GMT+0\",\n    flag: \"GH\",\n    cities: cityList.filter(city => city.country === \"GH\")\n  },\n  {\n    country: \"Guinea\",\n    zone: \"Etc/GMT+1\",\n    flag: \"GN\",\n    cities: cityList.filter(city => city.country === \"GN\")\n  },\n  {\n    country: \"Guinea-Bissau\",\n    zone: \"Etc/GMT+1\",\n    flag: \"GW\",\n    cities: cityList.filter(city => city.country === \"GW\")\n  },\n  {\n    country: \"Kenya\",\n    zone: \"Etc/GMT-2\",\n    flag: \"KE\",\n    cities: cityList.filter(city => city.country === \"KE\")\n  },\n  {\n    country: \"Lesotho\",\n    zone: \"Etc/GMT-2\",\n    flag: \"LS\",\n    cities: cityList.filter(city => city.country === \"LS\")\n  },\n  {\n    country: \"Liberia\",\n    zone: \"Etc/GMT+1\",\n    flag: \"LR\",\n    cities: cityList.filter(city => city.country === \"LR\")\n  },\n  {\n    country: \"Libya\",\n    zone: \"Etc/GMT-1\",\n    flag: \"LY\",\n    cities: cityList.filter(city => city.country === \"LY\")\n  },\n  {\n    country: \"Madagascar\",\n    zone: \"Etc/GMT-3\",\n    flag: \"MG\",\n    cities: cityList.filter(city => city.country === \"MG\")\n  },\n  {\n    country: \"Malawi\",\n    zone: \"Etc/GMT-2\",\n    flag: \"MW\",\n    cities: cityList.filter(city => city.country === \"MW\")\n  },\n  {\n    country: \"Mali\",\n    zone: \"Etc/GMT+0\",\n    flag: \"ML\",\n    cities: cityList.filter(city => city.country === \"ML\")\n  },\n  {\n    country: \"Mauritania\",\n    zone: \"Etc/GMT+1\",\n    flag: \"MR\",\n    cities: cityList.filter(city => city.country === \"MR\")\n  },\n  {\n    country: \"Mauritius\",\n    zone: \"Etc/GMT-4\",\n    flag: \"MU\",\n    cities: cityList.filter(city => city.country === \"MU\")\n  },\n  {\n    country: \"Morocco\",\n    zone: \"Etc/GMT+0\",\n    flag: \"MA\",\n    cities: cityList.filter(city => city.country === \"MA\")\n  },\n  {\n    country: \"Mozambique\",\n    zone: \"Etc/GMT-2\",\n    flag: \"MZ\",\n    cities: cityList.filter(city => city.country === \"MZ\")\n  },\n  {\n    country: \"Namibia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"NA\",\n    cities: cityList.filter(city => city.country === \"NA\")\n  },\n  {\n    country: \"Niger\",\n    zone: \"Etc/GMT-1\",\n    flag: \"NE\",\n    cities: cityList.filter(city => city.country === \"NE\")\n  },\n  {\n    country: \"Nigeria\",\n    zone: \"Etc/GMT-1\",\n    flag: \"NG\",\n    cities: cityList.filter(city => city.country === \"NG\")\n  },\n  {\n    country: \"Republic of the Congo\",\n    zone: \"Etc/GMT-1\",\n    flag: \"CG\",\n    cities: cityList.filter(city => city.country === \"CG\")\n  },\n  {\n    country: \"Rwanda\",\n    zone: \"Etc/GMT-2\",\n    flag: \"RW\",\n    cities: cityList.filter(city => city.country === \"RW\")\n  },\n  {\n    country: \"São Tomé and Príncipe\",\n    zone: \"Etc/GMT+0\",\n    flag: \"ST\",\n    cities: cityList.filter(city => city.country === \"ST\")\n  },\n  {\n    country: \"Sahrawi Arab Democratic Republic\",\n    zone: \"Etc/GMT+1\",\n    flag: \"EH\",\n    cities: cityList.filter(city => city.country === \"EH\")\n  },\n  {\n    country: \"Senegal\",\n    zone: \"Etc/GMT+1\",\n    flag: \"SN\",\n    cities: cityList.filter(city => city.country === \"SN\")\n  },\n  {\n    country: \"Seychelles\",\n    zone: \"Etc/GMT-3\",\n    flag: \"SC\",\n    cities: cityList.filter(city => city.country === \"SC\")\n  },\n  {\n    country: \"Sierra Leone\",\n    zone: \"Etc/GMT+1\",\n    flag: \"SL\",\n    cities: cityList.filter(city => city.country === \"SL\")\n  },\n  {\n    country: \"Somalia\",\n    zone: \"Etc/GMT-3\",\n    flag: \"SO\",\n    cities: cityList.filter(city => city.country === \"SO\")\n  },\n  {\n    country: \"South Africa\",\n    subdiv: [\n      {title: \"Northern Cape\"}, // 08\n      {title: \"Western Cape\"}, // 11\n    ],\n    zone: \"Etc/GMT-1\",\n    flag: \"ZA\",\n    cities: cityList.filter(city => city.country === \"ZA\" && [\"08\",\"11\"].includes(city.adminCode))\n  },\n  {\n    country: \"South Africa\",\n    subdiv: [\n      {title: \"Eastern Cape\"}, // 05\n      {title: \"Free State\"}, //  03\n      {title: \"Gauteng\"}, // 06\n      {title: \"KwaZulu-Natal\"}, // 02\n      {title: \"Limpopo\"}, // 09\n      {title: \"Mpumalanga\"}, // 07\n      {title: \"North West\"}, // 10\n    ],\n    zone: \"Etc/GMT-2\",\n    flag: \"ZA\",\n    cities: cityList.filter(city => city.country === \"ZA\" && [\"02\",\"03\",\"05\",\"06\",\"07\",\"09\",\"10\"].includes(city.adminCode))\n  },\n  {\n    country: \"South Sudan\",\n    zone: \"Etc/GMT-2\",\n    flag: \"SS\",\n    cities: cityList.filter(city => city.country === \"SS\")\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Ceuta\"}, \n      {title: \"Melilla\"}\n    ],\n    zone: \"Etc/GMT+0\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && [\"CE\", \"ML\"].includes(city.adminCode))\n  },\n  {\n    country: \"Sudan\",\n    zone: \"Etc/GMT-2\",\n    flag: \"SD\",\n    cities: cityList.filter(city => city.country === \"SD\")\n  },\n  {\n    country: \"Tanzania\",\n    zone: \"Etc/GMT-2\",\n    flag: \"TZ\",\n    cities: cityList.filter(city => city.country === \"TZ\")\n  },\n  {\n    country: \"Togo\",\n    zone: \"Etc/GMT+0\",\n    flag: \"TG\",\n    cities: cityList.filter(city => city.country === \"TG\")\n  },\n  {\n    country: \"Tunisia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"TN\",\n    cities: cityList.filter(city => city.country === \"TN\")\n  },\n  {\n    country: \"Uganda\",\n    zone: \"Etc/GMT-2\",\n    flag: \"UG\",\n    cities: cityList.filter(city => city.country === \"UG\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"Ascension\"}, \n      {title: \"Tristan da Cunha\"}\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"GB\", // eigentlich SH\n    cities: cityList.filter(city => city.country === \"SH\" && [\"01\",\"03\"].includes(city.adminCode))\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"St. Helena\"}, \n    ],\n    zone: \"Etc/GMT+0\",\n    flag: \"GB\", // eigentlich SH, aber Flagge hier die gleiche\n    cities: cityList.filter(city => city.country === \"SH\" && city.adminCode === \"02\")\n  },\n  {\n    country: \"Zambia\",\n    zone: \"Etc/GMT-2\",\n    flag: \"ZM\",\n    cities: cityList.filter(city => city.country === \"ZM\")\n  },\n  {\n    country: \"Zimbabwe\",\n    zone: \"Etc/GMT-2\",\n    flag: \"ZW\",\n    cities: cityList.filter(city => city.country === \"ZW\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Casey (Australia)\"}\n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Casey\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Davis (Australia)\"}\n    ],\n    zone: \"Etc/GMT-7\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Davis\")\n  },\n  {\n    country: \"French Southern and Antarctic Lands (France)\",\n    subdiv: [\n      {title: \"Adélie Land/Dumont-d'Urville Station\"}\n    ],\n    zone: \"Etc/GMT-10\",\n    flag: \"TF\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/DumontDUrville\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Mawson (Australia)\"}\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Mawson\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"McMurdo (United States)\"}\n    ],\n    zone: \"Etc/GMT-12\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/McMurdo\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Palmer (United States)\"}\n    ],\n    zone: \"Etc/GMT+3\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Palmer\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Rothera (United Kingdom)\"}\n    ],\n    zone: \"Etc/GMT+3\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Rothera\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Shōwa (Japan)\"}\n    ],\n    zone: \"Etc/GMT-3\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Syowa\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Troll (Norway)\"}\n    ],\n    zone: \"Etc/GMT+0\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Troll\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Vostok (Russia)\"}\n    ],\n    zone: \"Etc/GMT-6\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Vostok\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Western Australia\"} // 08\n    ],\n    zone: \"Etc/GMT-8\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.adminCode === \"08\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Northern Territory\"}, // 03\n      {title: \"South Australia\"}, // 05\n    ],\n    zone: \"Etc/GMT-9\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && [\"03\",\"05\"].includes(city.adminCode))\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Australian Capital Territory\"}, // 01\n      {title: \"New South Wales\"}, // 02\n      {title: \"Queensland\"}, // 04\n      {title: \"Tasmania\"}, // 06\n      {title: \"Victoria\"} // 07\n    ],\n    zone: \"Etc/GMT-10\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && [\"01\",\"02\",\"04\",\"06\",\"07\"].includes(city.adminCode))\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Lord Howe Island\"},\n      {title: \"Norfolk Island\"}\n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"AU\",\n    cities: []\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Newfoundland and Labrador\"}, // 05\n      {title: \"New Brunswick\"}, // 04\n      {title: \"Nova Scotia\"}, // 07\n      {title: \"Nunavut\", extra: \"(east of 67.5° W)\"}, // 14\n      {title: \"Prince Edward Island\"}, // 09\n      {title: \"Québec\", extra: \"(eastern part)\"} // 10\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"CA\",\n    cities: cityList.filter(city => {\n      if (city.country === \"CA\") {\n        if(city.adminCode === \"04\") return true\n        if(city.adminCode === \"05\") return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"09\") return true\n        if(city.adminCode === \"10\" && city.lon >= -67.5) return true\n        if(city.adminCode === \"14\" && city.lon >= -67.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(82.5°W – 67.5°W)\"}, // 14\n      {title: \"Ontario\", extra: \"(eastern part)\"}, // 08\n      {title: \"Québec\", extra: \"(western part)\"} // 10\n    ],\n    zone: \"Etc/GMT+5\",\n    flag: \"CA\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CA\") {\n        if (city.adminCode === \"08\" && city.lon >= -82.5) return true\n        if (city.adminCode === \"10\" && city.lon < -67.5) return true\n        if (city.adminCode === \"14\" && city.lon >= -82.5 && city.lon < -67.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Manitoba\", extra: \"(eastern part)\"}, // 03\n      {title: \"Nunavut\", extra: \"(97.5°W – 82.5°W)\"}, // 14\n      {title: \"Ontario\", extra: \"(western part)\"} // 08\n    ],\n    zone: \"Etc/GMT+6\",\n    flag: \"CA\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CA\") {\n        if(city.adminCode === \"03\" && city.lon >= -97.5) return true\n        if(city.adminCode === \"08\" && city.lon < -82.5) return true\n        if(city.adminCode === \"14\" && city.lon >= -97.5 && city.lon < -82.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Manitoba\", extra: \"(western part)\"}, // 03\n      {title: \"Northwest Territories\", extra: \"(eastern part)\"}, // 13\n      {title: \"Nunavut\", extra: \"(112.5°W – 97.5°W)\"}, // 14\n      {title: \"Saskatchewan\"} // 11\n    ],\n    zone: \"Etc/GMT+7\",\n    flag: \"CA\",\n    cities: cityList.filter(city => {\n      if (city.country === \"CA\") {\n        if(city.adminCode === \"03\" && city.lon < -97.5) return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"13\" && city.lon >= -112.5) return true\n        if(city.adminCode === \"14\" && city.lon >= -112.5 && city.lon < -97.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Alberta\"}, // 01\n      {title: \"British Columbia\", extra: \"(eastern part)\"}, // 02\n      {title: \"Northwest Territories\", extra: \"(central part)\"}, // 13\n      {title: \"Nunavut\", extra: \"(west of 112.5°W)\"} // 14\n    ],\n    zone: \"Etc/GMT+8\",\n    flag: \"CA\",\n    cities: cityList.filter(city => {\n      if (city.country === \"CA\") {\n        if(city.adminCode === \"01\") return true\n        if(city.adminCode === \"02\" && city.lon >= -127.5) return true\n        if(city.adminCode === \"13\" && city.lon >= -127.5 && city.lon < -112.5) return true\n        if(city.adminCode === \"14\" && city.lon < -112.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"British Columbia\", extra: \"(western part)\"}, // 02\n      {title: \"Northwest Territories\", extra: \"(western part)\"}, // 13\n      {title: \"Yukon\"} // 12\n    ],\n    zone: \"Etc/GMT+9\",\n    flag: \"CA\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CA\") {\n        if(city.adminCode === \"02\" && city.lon < -127.5) return true\n        if(city.adminCode === \"12\") return true\n        if(city.adminCode === \"13\" && city.lon < -127.5) return true\n        return false\n      }\n      return false\n    })\n  },\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"American Virgin Islands (United States)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"VI\",\n    cities: cityList.filter(city => city.country === \"VI\")\n  },\n  {\n    country: \"Anguilla (United Kingdom)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"AI\",\n    cities: cityList.filter(city => city.country === \"AI\")\n  },\n  {\n    country: \"Antigua and Barbuda\",\n    zone: \"Etc/GMT+4\",\n    flag: \"AG\",\n    cities: cityList.filter(city => city.country === \"AG\")\n  },\n  {\n    country: \"Aruba (Netherlands)\",\n    zone: \"Etc/GMT+5\",\n    flag: \"AW\",\n    cities: cityList.filter(city => city.country === \"AW\")\n  },\n  {\n    country: \"Bahamas\",\n    zone: \"Etc/GMT+5\",\n    flag: \"BS\",\n    cities: cityList.filter(city => city.country === \"BS\")\n  },\n  {\n    country: \"Barbados\",\n    zone: \"Etc/GMT+4\",\n    flag: \"BB\",\n    cities: cityList.filter(city => city.country === \"BB\")\n  },\n  {\n    country: \"Bermuda (United Kingdom)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"BM\",\n    cities: cityList.filter(city => city.country === \"BM\")\n  },\n  {\n    country: \"British Virgin Islands (United Kingdom)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"VG\",\n    cities: cityList.filter(city => city.country === \"VG\")\n  },\n  {\n    country: \"Cayman Islands (United Kingdom)\",\n    zone: \"Etc/GMT+5\",\n    flag: \"KY\",\n    cities: cityList.filter(city => city.country === \"KY\")\n  },\n  {\n    country: \"Cuba\",\n    zone: \"Etc/GMT+5\",\n    flag: \"CU\",\n    cities: cityList.filter(city => city.country === \"CU\")\n  },\n  {\n    country: \"Curaçao (Netherlands)\",\n    zone: \"Etc/GMT+5\",\n    flag: \"CW\",\n    cities: cityList.filter(city => city.country === \"CW\")\n  },\n  {\n    country: \"Dominica\",\n    zone: \"Etc/GMT+4\",\n    flag: \"DM\",\n    cities: cityList.filter(city => city.country === \"DM\")\n  },\n  {\n    country: \"Dominican Republic\",\n    zone: \"Etc/GMT+5\",\n    flag: \"DO\",\n    cities: cityList.filter(city => city.country === \"DO\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Guadeloupe\"}\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"FR\", // eigentlich GP\n    cities: cityList.filter(city => city.country === \"GP\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Saint-Martin\"}\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"FR\", // eigentlich MF\n    cities: cityList.filter(city => city.country === \"MF\")\n  },\n  {\n    country: \"Saint-Barthélemy (France)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"BL\",\n    cities: cityList.filter(city => city.country === \"BL\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Saint-Pierre and Miquelon\"}\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"FR\", // eigentlich DF\n    cities: cityList.filter(city => city.country === \"DF\")\n  },\n  {\n    country: \"Grenada\",\n    zone: \"Etc/GMT+4\",\n    flag: \"GD\",\n    cities: cityList.filter(city => city.country === \"GD\")\n  },\n  {\n    country: \"Haiti\",\n    zone: \"Etc/GMT+5\",\n    flag: \"HT\",\n    cities: cityList.filter(city => city.country === \"HT\")\n  },\n  {\n    country: \"Jamaica\",\n    zone: \"Etc/GMT+5\",\n    flag: \"JM\",\n    cities: cityList.filter(city => city.country === \"JM\")\n  },\n  {\n    country: \"Martinique (France)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"MQ\",\n    cities: cityList.filter(city => city.country === \"MQ\")\n  },\n  {\n    country: \"Montserrat (United Kingdom)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"MS\",\n    cities: cityList.filter(city => city.country === \"MS\")\n  },\n  {\n    country: \"Netherlands\",\n    subdiv: [\n      {title: \"Bonaire\"}, \n    ],\n    zone: \"Etc/GMT+5\",\n    flag: \"NL\", // eigentlich BQ\n    cities: cityList.filter(city => city.country === \"BQ\" && city.adminCode === \"BO\")\n  },\n  {\n    country: \"Netherlands\",\n    subdiv: [\n      {title: \"Saba\"}, \n      {title: \"Sint Eustatius\"}\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"NL\", // eigentlich BQ\n    cities: cityList.filter(city => city.country === \"BQ\" && [\"SB\", \"SE\"].includes(city.adminCode))\n  },\n  {\n    country: \"Puerto Rico (United States)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"PR\",\n    cities: cityList.filter(city => city.country === \"PR\")\n  },\n  {\n    country: \"Saint Kitts and Nevis\",\n    zone: \"Etc/GMT+4\",\n    flag: \"KN\",\n    cities: cityList.filter(city => city.country === \"KN\")\n  },\n  {\n    country: \"Saint Lucia\",\n    zone: \"Etc/GMT+4\",\n    flag: \"LC\",\n    cities: cityList.filter(city => city.country === \"LC\")\n  },\n  {\n    country: \"Saint Vincent and the Grenadines\",\n    zone: \"Etc/GMT+4\",\n    flag: \"VC\",\n    cities: cityList.filter(city => city.country === \"VC\")\n  },\n  {\n    country: \"Sint Maarten (Netherlands)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"SX\",\n    cities: cityList.filter(city => city.country === \"SX\")\n  },\n  {\n    country: \"Trinidad and Tobago\",\n    zone: \"Etc/GMT+4\",\n    flag: \"TT\",\n    cities: cityList.filter(city => city.country === \"TT\")\n  },\n  {\n    country: \"Turks and Caicos Islands (United Kingdom)\",\n    zone: \"Etc/GMT+5\",\n    flag: \"TC\",\n    cities: cityList.filter(city => city.country === \"TC\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Belize\",\n    zone: \"Etc/GMT+7\",\n    flag: \"BZ\",\n    cities: cityList.filter(city => city.country === \"BZ\")\n  },\n  {\n    country: \"Costa Rica\",\n    zone: \"Etc/GMT+6\",\n    flag: \"CR\",\n    cities: cityList.filter(city => city.country === \"CR\")\n  },\n  {\n    country: \"El Salvador\",\n    zone: \"Etc/GMT+6\",\n    flag: \"SV\",\n    cities: cityList.filter(city => city.country === \"SV\")\n  },\n  {\n    country: \"Guatemala\",\n    zone: \"Etc/GMT+6\",\n    flag: \"GT\",\n    cities: cityList.filter(city => city.country === \"GT\")\n  },\n  {\n    country: \"Honduras\",\n    zone: \"Etc/GMT+6\",\n    flag: \"HN\",\n    cities: cityList.filter(city => city.country === \"HN\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Baja California\"}, // 02\n      {title: \"Baja California Sur\"}, // 03\n      {title: \"Revillagigedo Islands\"} // nur 45 Einwohner, deshalb \n    ],\n    zone: \"Etc/GMT+8\",\n    flag: \"MX\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MX\") {\n        if(city.adminCode === \"02\") return true\n        if(city.adminCode === \"03\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Aguascalientes\"}, // 01\n      {title: \"Chihuahua\"}, // 06\n      {title: \"Coahuila\"}, // 07\n      {title: \"Colima\"}, // 08\n      {title: \"Distrito Federal\"}, // 09\n      {title: \"Durango\"}, // 10\n      {title: \"Guanajuato\"}, // 11\n      {title: \"Guerrero\"}, // 12\n      {title: \"Hidalgo\"}, // 13\n      {title: \"Jalisco\"}, // 14\n      {title: \"México\"}, // 15\n      {title: \"Michoacán\"}, // 16\n      {title: \"Morelos\"}, // 17\n      {title: \"Nayarit\"}, // 18\n      {title: \"Nuevo León\"}, // 19\n      {title: \"Puebla\"}, // 21\n      {title: \"Querétaro\"}, // 22\n      {title: \"San Luis Potosí\"}, // 24 \n      {title: \"Sinaloa\"}, // 25\n      {title: \"Sonora\"}, // 26\n      {title: \"Tamaulipas\"}, // 28\n      {title: \"Tlaxcala\"}, // 29\n      {title: \"Zacatecas\"} // 32\n    ],\n    zone: \"Etc/GMT+7\",\n    flag: \"MX\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MX\") {\n        if(city.adminCode === \"01\") return true\n        if(city.adminCode === \"06\") return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"08\") return true\n        if(city.adminCode === \"09\") return true\n        if(city.adminCode === \"10\") return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"12\") return true\n        if(city.adminCode === \"13\") return true\n        if(city.adminCode === \"14\") return true\n        if(city.adminCode === \"15\") return true\n        if(city.adminCode === \"16\") return true\n        if(city.adminCode === \"17\") return true\n        if(city.adminCode === \"18\") return true\n        if(city.adminCode === \"19\") return true\n        if(city.adminCode === \"21\") return true\n        if(city.adminCode === \"22\") return true\n        if(city.adminCode === \"24\") return true\n        if(city.adminCode === \"25\") return true\n        if(city.adminCode === \"26\") return true\n        if(city.adminCode === \"28\") return true\n        if(city.adminCode === \"29\") return true\n        if(city.adminCode === \"32\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Campeche\"}, // 04\n      {title: \"Chiapas\"}, // 05\n      {title: \"Oaxaca\"}, // 20\n      {title: \"Quintana Roo\"}, // 23\n      {title: \"Tabasco\"}, // 27\n      {title: \"Veracruz\"}, // 30\n      {title: \"Yucatán\"}, // 31\n    ],\n    zone: \"Etc/GMT+6\",\n    flag: \"MX\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MX\") {\n        if(city.adminCode === \"04\") return true\n        if(city.adminCode === \"05\") return true\n        if(city.adminCode === \"20\") return true\n        if(city.adminCode === \"23\") return true\n        if(city.adminCode === \"27\") return true\n        if(city.adminCode === \"30\") return true\n        if(city.adminCode === \"31\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Nicaragua\",\n    zone: \"Etc/GMT+6\",\n    flag: \"NI\",\n    cities: cityList.filter(city => city.country === \"NI\")\n  },\n  {\n    country: \"Panama\",\n    zone: \"Etc/GMT+5\",\n    flag: \"PA\",\n    cities: cityList.filter(city => city.country === \"PA\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Atyrau Region\"}, // 06\n      {title: \"Mangystau Region\"}, // 09\n      {title: \"West Kazakhstan Region\"} // 07\n    ],\n    zone: \"Etc/GMT-3\",\n    cities : cityList.filter(city => {\n      if(city.country === \"KZ\") {\n        if(city.adminCode === \"06\") return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"09\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Aktobe Region\"}, // 04\n      {title: \"Kostanay Region\"}, // 13\n      {title: \"Kyzylorda Region\"}, // 14\n      {title: \"Baykonyr\"} // 18\n    ],\n    zone: \"Etc/GMT-4\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => {\n      if(city.country === \"KZ\") {\n        if(city.adminCode === \"04\") return true\n        if(city.adminCode === \"13\") return true\n        if(city.adminCode === \"14\") return true\n        if(city.adminCode === \"18\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Akmola Region\"}, // 03\n      {title: \"Almaty Region\"}, // 01\n      {title: \"Almaty\"}, // 02\n      {title: \"Nur-Sultan\"}, // 05\n      {title: \"East Kazakhstan Region\"}, // 15\n      {title: \"Jambyl Region\"}, // 17\n      {title: \"Karaganda Region\"}, // 12\n      {title: \"North Kazakhstan Region\"}, // 16 \n      {title: \"Pavlodar Region\"}, // 11\n      {title: \"Turkistan Region\"}, // 10\n      {title: \"Shymkent\"} // 1537272\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => {\n      if(city.country === \"KZ\") {\n        if(city.adminCode === \"01\") return true\n        if(city.adminCode === \"02\") return true\n        if(city.adminCode === \"03\") return true\n        if(city.adminCode === \"05\") return true\n        if(city.adminCode === \"10\") return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"12\") return true\n        if(city.adminCode === \"15\") return true\n        if(city.adminCode === \"16\") return true\n        if(city.adminCode === \"17\") return true\n        if(city.adminCode === \"1537272\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Kyrgyzstan\",\n    zone: \"Etc/GMT-5\",\n    flag: \"KG\",\n    cities: cityList.filter(city => city.country === \"KG\")\n  },\n  {\n    country: \"Tajikistan\",\n    zone: \"Etc/GMT-5\",\n    flag: \"TJ\",\n    cities: cityList.filter(city => city.country === \"TJ\")\n  },\n  {\n    country: \"Turkmenistan\",\n    zone: \"Etc/GMT-4\",\n    flag: \"TM\",\n    cities: cityList.filter(city => city.country === \"TM\")\n  },\n  {\n    country: \"Uzbekistan\",\n    zone: \"Etc/GMT-4\",\n    flag: \"UZ\",\n    cities: cityList.filter(city => city.country === \"UZ\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Tibet\", extra: \"(west of 82.5°E)\"}, // 14\n      {title: \"Xinjiang\", extra: \"(west of 82.5°E)\"}, // 13\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"CN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CN\") {\n        if(city.adminCode === \"13\" && city.lon < 82.5) return true\n        if(city.adminCode === \"14\" && city.lon < 82.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Gansu\", extra: \"(west of 97.5°E)\"}, // 15\n      {title: \"Qinghai\", extra: \"(west of 97.5°E)\"}, // 06\n      {title: \"Tibet\", extra: \"(east of 82.5°E)\"}, // 14\n      {title: \"Xinjiang\", extra: \"(east of 82.5°E)\"}, // 13\n    ],\n    zone: \"Etc/GMT-6\",\n    flag: \"CN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CN\") {\n        if(city.adminCode === \"06\" && city.lon < 97.5) return true\n        if(city.adminCode === \"13\" && city.lon >= 82.5) return true\n        if(city.adminCode === \"14\" && city.lon >= 82.5) return true\n        if(city.adminCode === \"15\" && city.lon < 97.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Chongqing\"}, // 33\n      {title: \"Gansu\", extra: \"(east of 97.5°E)\"}, // 15\n      {title: \"Guangdong\", extra: \"(west of 112.5°E)\"}, // 30\n      {title: \"Guangxi Zhuang\"}, // 16\n      {title: \"Guizhou\"}, // 18\n      {title: \"Hainan\"}, // 31\n      {title: \"Hubei\", extra: \"(west of 112.5°E)\"}, // 12\n      {title: \"Hunan\"}, // 11\n      {title: \"Inner Mongolia\", extra: \"(west of 112.5°E)\"}, // 20\n      {title: \"Ningxia\"}, // 21\n      {title: \"Qinghai\", extra: \"(east of 97.5°E)\"}, // 06\n      {title: \"Shaanxi\"}, // 26\n      {title: \"Shanxi\"}, // 24\n      {title: \"Sichuan\"}, // 32\n      {title: \"Yunnan\"}, // 29\n    ],\n    zone: \"Etc/GMT-7\",\n    flag: \"CN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CN\") {\n        if(city.adminCode === \"06\" && city.lon >= 97.5) return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"12\" && city.lon < 112.5) return true\n        if(city.adminCode === \"15\" && city.lon >= 97.5) return true\n        if(city.adminCode === \"16\") return true\n        if(city.adminCode === \"18\") return true\n        if(city.adminCode === \"20\" && city.lon < 112.5) return true\n        if(city.adminCode === \"21\") return true\n        if(city.adminCode === \"24\") return true\n        if(city.adminCode === \"26\") return true\n        if(city.adminCode === \"29\") return true\n        if(city.adminCode === \"30\" && city.lon < 112.5) return true\n        if(city.adminCode === \"31\") return true\n        if(city.adminCode === \"32\") return true\n        if(city.adminCode === \"33\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Anhui\"}, // 01\n      {title: \"Beijing\"}, // 22\n      {title: \"Fujian\"}, // 07\n      {title: \"Guangdong\", extra: \"(east of 112.5°E)\"}, // 30\n      {title: \"Hebei\"}, // 10\n      {title: \"Henan\"}, // 09\n      {title: \"Hubei\", extra: \"(east of 112.5°E)\"}, // 12\n      {title: \"Heilongjiang\", extra: \"(west of 127.5°E)\"}, // 08\n      {title: \"Inner Mongolia\", extra: \"(east of 112.5°E)\"}, // 20\n      {title: \"Jiangsu\"}, // 04\n      {title: \"Jiangxi\"}, // 03\n      {title: \"Jilin\", extra: \"(west of 127.5°E)\"}, // 05\n      {title: \"Liaoning\"}, // 19\n      {title: \"Shandong\"}, // 25\n      {title: \"Shanghai\"}, // 23\n      {title: \"Tianjin\"}, // 28\n      {title: \"Zhejiang\"}, // 02\n    ],\n    zone: \"Etc/GMT-8\",\n    flag: \"CN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CN\") {\n        if(city.adminCode === \"01\") return true\n        if(city.adminCode === \"02\") return true\n        if(city.adminCode === \"03\") return true\n        if(city.adminCode === \"04\") return true\n        if(city.adminCode === \"05\" && city.lon < 127.5) return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"08\" && city.lon < 127.5) return true\n        if(city.adminCode === \"09\") return true\n        if(city.adminCode === \"10\") return true\n        if(city.adminCode === \"12\" && city.lon >= 112.5) return true\n        if(city.adminCode === \"19\") return true\n        if(city.adminCode === \"20\" && city.lon >= 112.5) return true\n        if(city.adminCode === \"22\") return true\n        if(city.adminCode === \"23\") return true\n        if(city.adminCode === \"25\") return true\n        if(city.adminCode === \"28\") return true\n        if(city.adminCode === \"30\" && city.lon >= 112.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Heilongjiang\", extra: \"(east of 127.5°E)\"}, // 08\n      {title: \"Jilin\", extra: \"(east of 127.5°E)\"}, // 05\n    ],\n    zone: \"Etc/GMT-9\",\n    flag: \"CN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"CN\") {\n        if(city.adminCode === \"05\" && city.lon >= 127.5) return true\n        if(city.adminCode === \"08\" && city.lon >= 127.5) return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Hong Kong (China)\",\n    zone: \"Etc/GMT-8\",\n    flag: \"HK\",\n    cities: cityList.filter(city => city.country === \"HK\")\n  },\n  {\n    country: \"Japan\",\n    zone: \"Etc/GMT-9\",\n    flag: \"JP\",\n    cities: cityList.filter(city => city.country === \"JP\")\n  },\n  {\n    country: \"Macau (China)\",\n    zone: \"Etc/GMT-8\",\n    flag: \"MO\",\n    cities: cityList.filter(city => city.country === \"MO\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Bayan-Ölgii\"}, // 03\n      {title: \"Govi-Altai\"}, // 10\n      {title: \"Khovd\"}, // 12\n      {title: \"Uvs\"}, // 19\n      {title: \"Zavkhan\"} // 09\n    ],\n    zone: \"Etc/GMT-6\",\n    flag: \"MN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MN\") {\n        if(city.adminCode === \"03\") return true\n        if(city.adminCode === \"09\") return true\n        if(city.adminCode === \"10\") return true\n        if(city.adminCode === \"12\") return true\n        if(city.adminCode === \"19\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Arkhangai\"}, // 01\n      {title: \"Bayankhongor\"}, // 02\n      {title: \"Bulgan\"}, // 21\n      {title: \"Darkhan-Uul\"}, // 23\n      {title: \"Dornogovi\"}, // 07\n      {title: \"Dundgovi\"}, // 08\n      {title: \"Govisümber\"}, // 24\n      {title: \"Khentii\"}, // 11\n      {title: \"Khövsgöl\"}, // 13\n      {title: \"Orkhon\"}, // 25\n      {title: \"Selenge\"}, // 16\n      {title: \"Töv\"}, // 18\n      {title: \"Ömnögovi\"}, // 14\n      {title: \"Övörkhanghai\"} // 15\n    ],\n    zone: \"Etc/GMT-7\",\n    flag: \"MN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MN\") {\n        if(city.adminCode === \"01\") return true\n        if(city.adminCode === \"02\") return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"08\") return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"13\") return true\n        if(city.adminCode === \"14\") return true\n        if(city.adminCode === \"15\") return true\n        if(city.adminCode === \"16\") return true\n        if(city.adminCode === \"18\") return true\n        if(city.adminCode === \"21\") return true\n        if(city.adminCode === \"23\") return true\n        if(city.adminCode === \"24\") return true\n        if(city.adminCode === \"25\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Dornod\"}, // 06\n      {title: \"Sükhbaatar\"} // 17\n    ],\n    zone: \"Etc/GMT-8\",\n    flag: \"MN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MN\") {\n        if(city.adminCode === \"06\") return true\n        if(city.adminCode === \"17\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"North Korea\",\n    zone: \"Etc/GMT-9\",\n    flag: \"KP\",\n    cities: cityList.filter(city => city.country === \"KP\")\n  },\n  {\n    country: \"South Korea\",\n    zone: \"Etc/GMT-9\",\n    flag: \"KR\",\n    cities: cityList.filter(city => city.country === \"KR\")\n  },\n  {\n    country: \"Taiwan\",\n    zone: \"Etc/GMT-8\",\n    flag: \"TW\",\n    cities: cityList.filter(city => city.country === \"TW\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Åland (Finland)\",\n    zone: \"Etc/GMT-2\",\n    flag: \"AX\",\n    cities: cityList.filter(city => city.country === \"AX\")\n  },\n  {\n    country: \"Albania\",\n    zone: \"Etc/GMT-1\",\n    flag: \"AL\",\n    cities: cityList.filter(city => city.country === \"AL\")\n  },\n  {\n    country: \"Andorra\",\n    zone: \"Etc/GMT+0\",\n    flag: \"AD\",\n    cities: cityList.filter(city => city.country === \"AD\")\n  },\n  {\n    country: \"Austria\",\n    zone: \"Etc/GMT-1\",\n    flag: \"AT\",\n    cities: cityList.filter(city => city.country === \"AT\")\n  },\n  {\n    country: \"Belarus\",\n    zone: \"Etc/GMT-2\",\n    flag: \"BY\",\n    cities: cityList.filter(city => city.country === \"BY\")\n  },\n  {\n    country: \"Belgium\",\n    zone: \"Etc/GMT+0\",\n    flag: \"BE\",\n    cities: cityList.filter(city => city.country === \"BE\")\n  },\n  {\n    country: \"Bosnia and Herzegovina\",\n    zone: \"Etc/GMT-1\",\n    flag: \"BA\",\n    cities: cityList.filter(city => city.country === \"BA\")\n  },\n  {\n    country: \"Bulgaria\",\n    zone: \"Etc/GMT-2\",\n    flag: \"BG\",\n    cities: cityList.filter(city => city.country === \"BG\")\n  },\n  {\n    country: \"Croatia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"HR\",\n    cities: cityList.filter(city => city.country === \"HR\")\n  },\n  {\n    country: \"Cyprus\",\n    zone: \"Etc/GMT-2\",\n    flag: \"CY\",\n    cities: cityList.filter(city => city.country === \"CY\")\n  },\n  {\n    country: \"Czechia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"CZ\",\n    cities: cityList.filter(city => city.country === \"CZ\")\n  },\n  {\n    country: \"Denmark\",\n    zone: \"Etc/GMT-1\",\n    flag: \"DK\",\n    cities: cityList.filter(city => city.country === \"DK\")\n  },\n  {\n    country: \"Estonia\",\n    zone: \"Etc/GMT-2\",\n    flag: \"EE\",\n    cities: cityList.filter(city => city.country === \"EE\")\n  },\n  {\n    country: \"Faroe Islands (Denmark)\",\n    zone: \"Etc/GMT+0\",\n    flag: \"FO\",\n    cities: cityList.filter(city => city.country === \"FO\")\n  },\n  {\n    country: \"Finland\",\n    zone: \"Etc/GMT-2\",\n    flag: \"FI\",\n    cities: cityList.filter(city => city.country === \"FI\")\n  },\n  {\n    country: \"France\",\n    zone: \"Etc/GMT+0\",\n    flag: \"FR\",\n    cities: cityList.filter(city => city.country === \"FR\")\n  },\n  {\n    country: \"Germany\",\n    zone: \"Etc/GMT-1\",\n    flag: \"DE\",\n    cities: cityList.filter(city => city.country === \"DE\")\n  },\n  {\n    country: \"Gibraltar (United Kingdom)\",\n    zone: \"Etc/GMT+0\",\n    flag: \"GI\",\n    cities: cityList.filter(city => city.country === \"GI\")\n  },\n  {\n    country: \"Greece\",\n    subdiv: [\n      {title: \"Epirus and Western Macedonia\"}, // ESYE21, ESYE13\n      {title: \"Peloponnese, Western Greece and the Ionian\"}, // ESYE25, ESYE23, ESYE22\n    ],\n    zone: \"Etc/GMT-1\",\n    flag: \"GR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"GR\") {\n        if(city.adminCode === \"ESYE13\") return true\n        if(city.adminCode === \"ESYE21\") return true\n        if(city.adminCode === \"ESYE22\") return true\n        if(city.adminCode === \"ESYE23\") return true\n        if(city.adminCode === \"ESYE25\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Greece\",\n    subdiv: [\n      {title: \"Aegean\"}, // ESYE41, ESYE42\n      {title: \"Attica\"}, // ESYE31\n      {title: \"Crete\"}, // ESYE43\n      {title: \"Macedonia and Thrace\"}, // ESYE11, ESYE12\n      {title: \"Thessaly and Central Greece\"}, // ESYE14, ESYE24\n    ],\n    zone: \"Etc/GMT-2\",\n    flag: \"GR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"GR\") {\n        if(city.adminCode === \"ESYE11\") return true\n        if(city.adminCode === \"ESYE12\") return true\n        if(city.adminCode === \"ESYE14\") return true\n        if(city.adminCode === \"ESYE24\") return true\n        if(city.adminCode === \"ESYE31\") return true\n        if(city.adminCode === \"ESYE41\") return true\n        if(city.adminCode === \"ESYE42\") return true\n        if(city.adminCode === \"ESYE43\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Danmarkshavn\"}\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Danmarkshavn\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Ittoqqortoormit\"}, \n      {title: \"Scoresbysund\"}\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Scoresbysund\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Thule\"}, \n      {title: \"Pituffik\"}\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Thule\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Western Greenland\"}\n    ],\n    zone: \"Etc/GMT+3\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Nuuk\")\n  },\n  {\n    country: \"Guernsey (United Kingdom)\",\n    zone: \"Etc/GMT+0\",\n    flag: \"GG\",\n    cities: cityList.filter(city => city.country === \"GG\")\n  },\n  {\n    country: \"Hungary\",\n    zone: \"Etc/GMT-1\",\n    flag: \"HU\",\n    cities: cityList.filter(city => city.country === \"HU\")\n  },\n  {\n    country: \"Iceland\",\n    zone: \"Etc/GMT+1\",\n    flag: \"IS\",\n    cities: cityList.filter(city => city.country === \"IS\")\n  },\n  {\n    country: \"Ireland\",\n    zone: \"Etc/GMT+1\",\n    flag: \"IE\",\n    cities: cityList.filter(city => city.country === \"IE\")\n  },\n  {\n    country: \"Isle of Man (United Kingdom)\",\n    zone: \"Etc/GMT+0\",\n    flag: \"IM\",\n    cities: cityList.filter(city => city.country === \"IM\")\n  },\n  {\n    country: \"Italy\",\n    zone: \"Etc/GMT-1\",\n    flag: \"IT\",\n    cities: cityList.filter(city => city.country === \"IT\")\n  },\n  {\n    country: \"Jersey (United Kingdom)\",\n    zone: \"Etc/GMT+0\",\n    flag: \"JE\",\n    cities: cityList.filter(city => city.country === \"JE\")\n  },\n  {\n    country: \"Kosovo\",\n    zone: \"Etc/GMT-1\",  // no explicit timezone for Kosovo/Pristina\n    flag: \"XK\",\n    cities: cityList.filter(city => city.country === \"XK\")\n  },\n  {\n    country: \"Latvia\",\n    zone: \"Etc/GMT-2\",\n    flag: \"LV\",\n    cities: cityList.filter(city => city.country === \"LV\")\n  },\n  {\n    country: \"Liechtenstein\",\n    zone: \"Etc/GMT-1\",\n    flag: \"LI\",\n    cities: cityList.filter(city => city.country === \"LI\")\n  },\n  {\n    country: \"Lithuania\",\n    zone: \"Etc/GMT-2\",\n    flag: \"LT\",\n    cities: cityList.filter(city => city.country === \"LT\")\n  },\n  {\n    country: \"Luxembourg\",\n    zone: \"Etc/GMT+0\",\n    flag: \"LU\",\n    cities: cityList.filter(city => city.country === \"LU\")\n  },\n  {\n    country: \"Malta\",\n    zone: \"Etc/GMT-1\",\n    flag: \"MT\",\n    cities: cityList.filter(city => city.country === \"MT\")\n  },\n  {\n    country: \"Moldova\",\n    zone: \"Etc/GMT-2\",\n    flag: \"MD\",\n    cities: cityList.filter(city => city.country === \"MD\")\n  },\n  {\n    country: \"Monaco\",\n    zone: \"Etc/GMT+0\",\n    flag: \"MC\",\n    cities: cityList.filter(city => city.country === \"MC\")\n  },\n  {\n    country: \"Montenegro\",\n    zone: \"Etc/GMT-1\",\n    flag: \"ME\",\n    cities: cityList.filter(city => city.country === \"ME\")\n  },\n  {\n    country: \"Netherlands\",\n    zone: \"Etc/GMT+0\",\n    flag: \"NL\",\n    cities: cityList.filter(city => city.country === \"NL\")\n  },\n  {\n    country: \"North Macedonia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"MK\",\n    cities: cityList.filter(city => city.country === \"MK\")\n  },\n  {\n    country: \"Norway\",\n    subdiv: [\n      {title: \"Agder\"},\n      {title: \"Innlandet\"},\n      {title: \"Møre og Romsdal\"},\n      {title: \"Nordland\"},\n      {title: \"Oslo\"},\n      {title: \"Rogaland\"},\n      {title: \"Troms og Finnmark\"},\n      {title: \"Trøndelag\"},\n      {title: \"Vestfold og Telemark\"},\n      {title: \"Vestland\"},\n      {title: \"Viken\"},\n    ],\n    zone: \"Etc/GMT-1\",\n    flag: \"NO\",\n    cities: cityList.filter(city => city.country === \"NO\")\n  },\n  {\n    country: \"Norway\",\n    subdiv: [\n      {title: \"Jan Mayen\"}\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"NO\", // eigentlich SJ\n    cities: cityList.filter(city => city.country === \"SJ\" && city.adminCode === \"22\")\n  },\n  {\n    country: \"Norway\",\n    subdiv: [\n      {title: \"Svalbard\"}\n    ],\n    zone: \"Etc/GMT-1\",\n    flag: \"NO\", // eigentlich SJ\n    cities: cityList.filter(city => city.country === \"SJ\" && city.adminCode === \"21\")\n  },\n  {\n    country: \"Poland\",\n    zone: \"Etc/GMT-1\",\n    flag: \"PL\",\n    cities: cityList.filter(city => city.country === \"PL\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Aveiro\"}, // 02\n      {title: \"Beja\"}, // 03\n      {title: \"Braga\"}, // 04\n      {title: \"Bragança\"}, // 05\n      {title: \"Castelo Branco\"}, // 06\n      {title: \"Coimbra\"}, // 07\n      {title: \"Évora\"}, // 08\n      {title: \"Faro\"}, // 09\n      {title: \"Guarda\"}, // 11\n      {title: \"Leiria\"}, // 13\n      {title: \"Lisboa\"}, // 14\n      {title: \"Portalegre\"}, // 16\n      {title: \"Porto\"}, // 17\n      {title: \"Santarém\"}, // 18\n      {title: \"Setúbal\"}, // 19\n      {title: \"Viana do Castelo\"}, // 20\n      {title: \"Vila Real\"}, // 21\n      {title: \"Viseu\"}, // 22\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"PT\",\n    cities: cityList.filter(city => {\n      if(city.country === \"PT\") {\n        if(city.adminCode === \"02\") return true\n        if(city.adminCode === \"03\") return true\n        if(city.adminCode === \"04\") return true\n        if(city.adminCode === \"05\") return true\n        if(city.adminCode === \"06\") return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"08\") return true\n        if(city.adminCode === \"09\") return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"13\") return true\n        if(city.adminCode === \"14\") return true\n        if(city.adminCode === \"16\") return true\n        if(city.adminCode === \"17\") return true\n        if(city.adminCode === \"18\") return true\n        if(city.adminCode === \"19\") return true\n        if(city.adminCode === \"20\") return true\n        if(city.adminCode === \"21\") return true\n        if(city.adminCode === \"22\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Madeira\"} // 10\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.adminCode === \"10\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Azores\"} // 23\n    ],\n    zone: \"Etc/GMT+2\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.adminCode === \"23\")\n  },\n  {\n    country: \"Romania\",\n    zone: \"Etc/GMT-2\",\n    flag: \"RO\",\n    cities: cityList.filter(city => city.country === \"RO\")\n  },\n  {\n    country: \"San Marino\",\n    zone: \"Etc/GMT-1\",\n    flag: \"SM\",\n    cities: cityList.filter(city => city.country === \"SM\")\n  },\n  {\n    country: \"Serbia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"RS\",\n    cities: cityList.filter(city => city.country === \"RS\")\n  },\n  {\n    country: \"Slovakia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"SK\",\n    cities: cityList.filter(city => city.country === \"SK\")\n  },\n  {\n    country: \"Slovenia\",\n    zone: \"Etc/GMT-1\",\n    flag: \"SI\",\n    cities: cityList.filter(city => city.country === \"SI\")\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Andalucía\"}, // 51\n      {title: \"Aragón\"}, // 52\n      {title: \"Asturies\"}, // 34\n      {title: \"Cantabria\"}, // 39\n      {title: \"Castilla y León\"}, // 55\n      {title: \"Castilla-La Mancha\"}, // 54\n      {title: \"Catalunya\"}, // 56\n      {title: \"Extremadura\"}, // 57\n      {title: \"Galicia\"}, // 58\n      {title: \"Illes Balears\"}, // 07\n      {title: \"Murcia\"}, // 31\n      {title: \"Comunidad de Madrid\"}, // 29\n      {title: \"Navarra\"}, // 32\n      {title: \"Euskal Autonomia Erkidegoa\"}, // 59\n      {title: \"La Rioja\"}, // 27\n      {title: \"Comunidad Valenciana\"}, // 60\n    ],\n    zone: \"Etc/GMT+0\",\n    flag: \"ES\",\n    cities: cityList.filter(city => {\n      if(city.country === \"ES\") {\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"27\") return true\n        if(city.adminCode === \"29\") return true\n        if(city.adminCode === \"31\") return true\n        if(city.adminCode === \"32\") return true\n        if(city.adminCode === \"34\") return true\n        if(city.adminCode === \"39\") return true\n        if(city.adminCode === \"51\") return true\n        if(city.adminCode === \"52\") return true\n        if(city.adminCode === \"54\") return true\n        if(city.adminCode === \"55\") return true\n        if(city.adminCode === \"56\") return true\n        if(city.adminCode === \"57\") return true\n        if(city.adminCode === \"58\") return true\n        if(city.adminCode === \"59\") return true\n        if(city.adminCode === \"60\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Canarias\"} // 53\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.adminCode === \"53\")\n  },\n  {\n    country: \"Sweden\",\n    zone: \"Etc/GMT-1\",\n    flag: \"SE\",\n    cities: cityList.filter(city => city.country === \"SE\")\n  },\n  {\n    country: \"Switzerland\",\n    zone: \"Etc/GMT-1\",\n    flag: \"CH\",\n    cities: cityList.filter(city => city.country === \"CH\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"England\"}, // ENG\n      {title: \"Scotland\"}, // SCT\n      {title: \"Wales\"} // WLS\n    ],\n    zone: \"Etc/GMT+0\",\n    flag: \"GB\",\n    cities: cityList.filter(city => {\n      if(city.country === \"GB\") {\n        if(city.adminCode === \"ENG\") return true\n        if(city.adminCode === \"SCT\") return true\n        if(city.adminCode === \"WLS\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"Northern Ireland\"} // NIR\n    ],\n    zone: \"Etc/GMT+1\",\n    flag: \"GB\",\n    cities: cityList.filter(city => city.country === \"GB\" && city.adminCode === \"NIR\")\n  },\n  {\n    country: \"Ukraine\",\n    zone: \"Etc/GMT-2\",\n    flag: \"UA\",\n    cities: cityList.filter(city => city.country === \"UA\")\n  },\n  {\n    country: \"Vatican City\",\n    zone: \"Etc/GMT-1\",\n    flag: \"VA\",\n    cities: cityList.filter(city => city.country === \"VA\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Aceh\"}, // 01\n      {title: \"Bengkulu\"}, // 03\n      {title: \"Jakarta Raya\"}, // 04\n      {title: \"Jambi\"}, // 05\n      {title: \"Jawa Tengah\"}, // 07\n      {title: \"Jawa Timur\"}, // 08\n      {title: \"Yogyakarta\"}, // 10\n      {title: \"Kalimantan Barat\"}, // 11\n      {title: \"Kalimantan Tengah\"}, // 13 \n      {title: \"Lampung\"}, // 15\n      {title: \"Sumatera Barat\"}, // 24\n      {title: \"Sumatera Utara\"}, // 26\n      {title: \"Jawa Barat\"}, // 30\n      {title: \"Sumatera Selatan\"}, // 32\n      {title: \"Banten\"}, // 33\n      {title: \"Bangka-Belitung\"}, // 35\n      {title: \"Riau\"}, // 37\n      {title: \"Kepulauan Riau\"}, // 40\n    ],\n    zone: \"Etc/GMT-7\",\n    flag: \"ID\",\n    cities: cityList.filter(city => {\n      if(city.country === \"ID\") {\n        if(city.adminCode === \"01\") return true\n        if(city.adminCode === \"03\") return true\n        if(city.adminCode === \"04\") return true\n        if(city.adminCode === \"05\") return true\n        if(city.adminCode === \"07\") return true\n        if(city.adminCode === \"08\") return true\n        if(city.adminCode === \"10\") return true\n        if(city.adminCode === \"11\") return true\n        if(city.adminCode === \"13\") return true\n        if(city.adminCode === \"15\") return true\n        if(city.adminCode === \"24\") return true\n        if(city.adminCode === \"26\") return true\n        if(city.adminCode === \"30\") return true\n        if(city.adminCode === \"32\") return true\n        if(city.adminCode === \"33\") return true\n        if(city.adminCode === \"35\") return true\n        if(city.adminCode === \"37\") return true\n        if(city.adminCode === \"40\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Bali\"}, // 02\n      {title: \"Kalimantan Selatan\"}, // 12\n      {title: \"Kalimantan\"}, // 14 \n      {title: \"Nusa Tenggara Barat\"}, // 17\n      {title: \"Nusa Tenggara Timur\"}, // 18 \n      {title: \"Sulawesi Tengah\"}, // 21\n      {title: \"Sulawesi Tenggara\"}, // 22\n      {title: \"Sulawesi Utara\"}, // 31\n      {title: \"Gorontalo\"}, // 34\n      {title: \"Sulawesi Selatan\"}, // 38\n      {title: \"Sulawesi Barat\"}, // 41\n      {title: \"Kalimantan Utara\"}, // 42\n    ],\n    zone: \"Etc/GMT-8\",\n    flag: \"ID\",\n    cities: cityList.filter(city => {\n      if(city.country === \"ID\") {\n        if(city.adminCode === \"02\") return true\n        if(city.adminCode === \"12\") return true\n        if(city.adminCode === \"14\") return true\n        if(city.adminCode === \"17\") return true\n        if(city.adminCode === \"18\") return true\n        if(city.adminCode === \"21\") return true\n        if(city.adminCode === \"22\") return true\n        if(city.adminCode === \"31\") return true\n        if(city.adminCode === \"34\") return true\n        if(city.adminCode === \"38\") return true\n        if(city.adminCode === \"41\") return true\n        if(city.adminCode === \"42\") return true\n        return false\n      }\n      return false\n    })\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Maluku\"}, // 28\n      {title: \"Maluku Utara\"}, // 29\n      {title: \"Papua\"}, // 36\n      {title: \"West Papua\"}, // 39\n    ],\n    zone: \"Etc/GMT-9\",\n    flag: \"ID\",\n    cities: cityList.filter(city => {\n      if(city.country === \"ID\") {\n        if(city.adminCode === \"28\") return true\n        if(city.adminCode === \"29\") return true\n        if(city.adminCode === \"36\") return true\n        if(city.adminCode === \"39\") return true\n        return false\n      }\n      return false\n    })\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Afghanistan\",\n    utcOffset: 270,\n    flag: \"AF\",\n    cities: cityList.filter(city => city.country === \"AF\")\n  },\n  {\n    country: \"Armenia\",\n    zone: \"Etc/GMT-3\",\n    flag: \"AM\",\n    cities: cityList.filter(city => city.country === \"AM\")\n  },\n  {\n    country: \"Azerbaijan\",\n    zone: \"Etc/GMT-3\",\n    flag: \"AZ\",\n    cities: cityList.filter(city => city.country === \"AZ\")\n  },\n  {\n    country: \"Bahrain\",\n    zone: \"Etc/GMT-3\",\n    flag: \"BH\",\n    cities: cityList.filter(city => city.country === \"BH\")\n  },\n  {\n    country: \"Georgia\",\n    zone: \"Etc/GMT-3\",\n    flag: \"GE\",\n    cities: cityList.filter(city => city.country === \"GE\")\n  },\n  {\n    country: \"Iran\",\n    utcOffset: 210,\n    flag: \"IR\",\n    cities: cityList.filter(city => city.country === \"IR\")\n  },\n  {\n    country: \"Iraq\",\n    zone: \"Etc/GMT-3\",\n    flag: \"IQ\",\n    cities: cityList.filter(city => city.country === \"IQ\")\n  },\n  {\n    country: \"Israel\",\n    zone: \"Etc/GMT-2\",\n    flag: \"IL\",\n    cities: cityList.filter(city => city.country === \"IL\")\n  },\n  {\n    country: \"Jordan\",\n    zone: \"Etc/GMT-2\",\n    flag: \"JO\",\n    cities: cityList.filter(city => city.country === \"JO\")\n  },\n  {\n    country: \"Kuwait\",\n    zone: \"Etc/GMT-3\",\n    flag: \"KW\",\n    cities: cityList.filter(city => city.country === \"KW\")\n  },\n  {\n    country: \"Lebanon\",\n    zone: \"Etc/GMT-2\",\n    flag: \"LB\",\n    cities: cityList.filter(city => city.country === \"LB\")\n  },\n  {\n    country: \"Oman\",\n    zone: \"Etc/GMT-4\",\n    flag: \"OM\",\n    cities: cityList.filter(city => city.country === \"OM\")\n  },\n  {\n    country: \"Palestine\",\n    zone: \"Etc/GMT-2\",\n    flag: \"PS\",\n    cities: cityList.filter(city => city.country === \"PS\")\n  },\n  {\n    country: \"Qatar\",\n    zone: \"Etc/GMT-3\",\n    flag: \"QA\",\n    cities: cityList.filter(city => city.country === \"QA\")\n  },\n  {\n    country: \"Saudi Arabia\",\n    zone: \"Etc/GMT-3\",\n    flag: \"SA\",\n    cities: cityList.filter(city => city.country === \"SA\")\n  },\n  {\n    country: \"Syria\",\n    zone: \"Etc/GMT-3\",\n    flag: \"SY\",\n    cities: cityList.filter(city => city.country === \"SY\")\n  },\n  {\n    country: \"Turkey\",\n    subdiv: [\n      {title: \"Adana\"}, // 81\n      {title: \"Afyonkarahisar\"}, // 03\n      {title: \"Aksaray\"}, // 75\n      {title: \"Amasya\"}, // 05\n      {title: \"Ankara\"}, // 68\n      {title: \"Antalya\"}, // 07\n      {title: \"Aydin\"}, // 09\n      {title: \"Balıkesir\"}, // 10\n      {title: \"Bartın\"}, // 87\n      {title: \"Bilecik\"}, // 11\n      {title: \"Bolu\"}, // 14\n      {title: \"Burdur\"}, // 15\n      {title: \"Bursa\"}, // 16\n      {title: \"Çanakkale\"}, // 17\n      {title: \"Çankırı\"}, // 82\n      {title: \"Çorum\"}, // 19\n      {title: \"Denizli\"}, // 20\n      {title: \"Düzce\"}, // 93\n      {title: \"Edirne\"}, // 22\n      {title: \"Eskişehir\"}, // 26\n      {title: \"Hatay\"}, // 31\n      {title: \"Isparta\"}, // 33\n      {title: \"Mersin\"}, // 32\n      {title: \"İstanbul\"}, // 34\n      {title: \"İzmir\"}, // 35\n      {title: \"Kahramanmaraş\"}, // 46\n      {title: \"Karabük\"}, // 89\n      {title: \"Karaman\"}, // 78\n      {title: \"Kastamonu\"}, // 37\n      {title: \"Kayseri\"}, // 38\n      {title: \"Kırıkkale\"}, // 79\n      {title: \"Kırklareli\"}, // 39\n      {title: \"Kırşehir\"}, // 40\n      {title: \"Kocaeli\"}, // 41\n      {title: \"Konya\"}, // 71\n      {title: \"Kütahya\"}, // 43\n      {title: \"Manisa\"}, // 45\n      {title: \"Muğla\"}, // 48\n      {title: \"Nevşehir\"}, // 50\n      {title: \"Niğde\"}, // 73\n      {title: \"Osmaniye\"}, // 91\n      {title: \"Sakarya\"}, // 54\n      {title: \"Samsun\"}, // 55\n      {title: \"Sinop\"}, // 57\n      {title: \"Sivas\"}, // 58\n      {title: \"Tekirdağ\"}, // 59\n      {title: \"Tokat\"}, // 60\n      {title: \"Uşak\"}, // 64\n      {title: \"Yalova\"}, // 92\n      {title: \"Yozgat\"}, // 66\n      {title: \"Zonguldak\"}, // 85\n    ],\n    zone: \"Etc/GMT-2\",\n    flag: \"TR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"TR\") {\n        switch(city.adminCode) {\n          case \"03\":\n          case \"05\":\n          case \"07\":\n          case \"09\":\n          case \"10\":\n          case \"11\":\n          case \"14\":\n          case \"15\":\n          case \"16\":\n          case \"17\":\n          case \"19\":\n          case \"20\":\n          case \"22\":\n          case \"26\":\n          case \"31\":\n          case \"32\":\n          case \"33\":\n          case \"34\":\n          case \"35\":\n          case \"37\":\n          case \"38\":\n          case \"39\":\n          case \"40\":\n          case \"41\":\n          case \"43\":\n          case \"45\":\n          case \"46\":\n          case \"48\":\n          case \"50\":\n          case \"54\":\n          case \"55\":\n          case \"57\":\n          case \"58\":\n          case \"59\":\n          case \"60\":\n          case \"64\":\n          case \"66\":\n          case \"68\":\n          case \"71\":\n          case \"73\":\n          case \"75\":\n          case \"78\":\n          case \"79\":\n          case \"81\":\n          case \"82\":\n          case \"85\":\n          case \"87\":\n          case \"89\":\n          case \"91\":\n          case \"92\":\n          case \"93\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Turkey\",\n    subdiv: [\n      {title: \"Adıyaman\"}, // 02\n      {title: \"Ağrı\"}, // 04\n      {title: \"Ardahan\"}, // 86\n      {title: \"Artvin\"}, // 08\n      {title: \"Batman\"}, // 76\n      {title: \"Bayburt\"}, // 77\n      {title: \"Bingöl\"}, // 12\n      {title: \"Bitlis\"}, // 13\n      {title: \"Diyarbakır\"}, // 21\n      {title: \"Elazığ\"}, // 23\n      {title: \"Erzincan\"}, // 24\n      {title: \"Erzurum\"}, // 25\n      {title: \"Gaziantep\"}, // 83\n      {title: \"Giresun\"}, // 28\n      {title: \"Gümüşhane\"}, // 69\n      {title: \"Hakkari\"}, // 70\n      {title: \"Iğdır\"}, // 88\n      {title: \"Kars\"}, // 84\n      {title: \"Kilis\"}, // 90\n      {title: \"Malatya\"}, // 44\n      {title: \"Mardin\"}, // 72\n      {title: \"Muş\"}, // 49\n      {title: \"Ordu\"}, // 52\n      {title: \"Rize\"}, // 53\n      {title: \"Şanlıurfa\"}, // 63\n      {title: \"Siirt\"}, // 74\n      {title: \"Şırnak\"}, // 80\n      {title: \"Trabzon\"}, // 61\n      {title: \"Tunceli\"}, // 62\n      {title: \"Van\"}, // 65\n    ],\n    zone: \"Etc/GMT-3\",\n    flag: \"TR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"TR\") {\n        switch(city.adminCode) {\n          case \"02\":\n          case \"04\":\n          case \"08\":\n          case \"12\":\n          case \"13\":\n          case \"21\":\n          case \"23\":\n          case \"24\":\n          case \"25\":\n          case \"28\":\n          case \"44\":\n          case \"49\":\n          case \"52\":\n          case \"53\":\n          case \"61\":\n          case \"62\":\n          case \"63\":\n          case \"65\":\n          case \"69\":\n          case \"70\":\n          case \"72\":\n          case \"74\":\n          case \"76\":\n          case \"77\":\n          case \"80\":\n          case \"83\":\n          case \"84\":\n          case \"86\":\n          case \"88\":\n          case \"90\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United Arab Emirates\",\n    utcOffset: 210,\n    flag: \"AE\",\n    cities: cityList.filter(city => city.country === \"AE\")\n  },\n  {\n    country: \"Yemen\",\n    zone: \"Etc/GMT-3\",\n    flag: \"YE\",\n    cities: cityList.filter(city => city.country === \"YE\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"American Samoa (United States)\",\n    zone: \"Etc/GMT+11\",\n    flag: \"AS\",\n    cities: cityList.filter(city => city.country === \"AS\")\n  },\n  {\n    country: \"Cook Islands (New Zealand)\",\n    zone: \"Etc/GMT+11\",\n    flag: \"CK\",\n    cities: cityList.filter(city => city.country === \"CK\")\n  },\n  {\n    country: \"Fiji\",\n    zone: \"Etc/GMT-12\",\n    flag: \"FJ\",\n    cities: cityList.filter(city => city.country === \"FJ\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Austral Islands\"}, // 05\n      {title: \"Society Islands\"}, // 01, 02\n      {title: \"Tuamotus\"} // part of 03\n    ],\n    zone: \"Etc/GMT+10\",\n    flag: \"PF\",\n    cities: cityList.filter(city => {\n      if(city.country === \"PF\") {\n        switch(city.adminCode) {\n          case \"01\":\n          case \"02\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Gambier Islands\"} // part of 03\n    ],\n    zone: \"Etc/GMT+9\",\n    flag: \"PF\"\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Marquesas Islands\"} // 04\n    ],\n    zone: \"Etc/GMT+9\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.adminCode === \"04\")\n  },\n  {\n    country: \"Guam (United States)\",\n    zone: \"Etc/GMT-10\",\n    flag: \"GU\",\n    cities: cityList.filter(city => city.country === \"GU\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Banaba\"}, \n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"KI\"\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Gilbert Islands\"}\n    ],\n    zone: \"Etc/GMT-12\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.adminCode === \"01\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Phoenix Islands\"}\n    ],\n    zone: \"Etc/GMT-13\",\n    flag: \"KI\"\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Kiritimati\"}, \n      {title: \"Line Islands\"}\n    ],\n    zone: \"Etc/GMT-14\",\n    flag: \"KI\"\n  },\n  {\n    country: \"Marshall Islands\",\n    zone: \"Etc/GMT-11\",\n    flag: \"MH\",\n    cities: cityList.filter(city => city.country === \"MH\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Chuuk\"}, // 03\n      {title: \"Yap\"} // 04\n    ],\n    zone: \"Etc/GMT-10\",\n    flag: \"FM\",\n    cities: cityList.filter(city => {\n      if(city.country === \"FM\") {\n        switch(city.adminCode) {\n          case \"03\":\n          case \"04\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Kosrae\"}, // 01\n      {title: \"Pohnpei\"} // 02\n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"FM\",\n    cities: cityList.filter(city => {\n      if(city.country === \"FM\") {\n        switch(city.adminCode) {\n          case \"01\":\n          case \"02\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Nauru\",\n    zone: \"Etc/GMT-11\",\n    flag: \"NR\",\n    cities: cityList.filter(city => city.country === \"NR\")\n  },\n  {\n    country: \"New Caledonia (France)\",\n    zone: \"Etc/GMT-11\",\n    flag: \"NC\",\n    cities: cityList.filter(city => city.country === \"NC\")\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Canterbury\"}, // E9\n      {title: \"Marlborough\"}, // F4\n      {title: \"Nelson\"}, // F5\n      {title: \"Otago\"}, // F7\n      {title: \"Southland\"}, // F8\n      {title: \"West Coast\"}, // G3\n      {title: \"Tasman\"}, // TAS\n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => {\n      if(city.country === \"NZ\") {\n        switch(city.adminCode) {\n          case \"E9\":\n          case \"F4\":\n          case \"F5\":\n          case \"F7\":\n          case \"F8\":\n          case \"G3\":\n          case \"TAS\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Auckland\"}, // E7\n      {title: \"Bay of Plenty\"}, // E8\n      {title: \"Gisborne\"}, // F1\n      {title: \"Hawke's Bay\"}, // F2\n      {title: \"Manawatu-Wanganui\"}, // F3\n      {title: \"Northland\"}, // F6\n      {title: \"Taranaki\"}, // F9\n      {title: \"Waikato\"}, // G1\n      {title: \"Wellington\"}, // G2\n    ],\n    zone: \"Etc/GMT-12\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => {\n      if(city.country === \"NZ\") {\n        switch(city.adminCode) {\n          case \"E7\":\n          case \"E8\":\n          case \"F1\":\n          case \"F2\":\n          case \"F3\":\n          case \"F6\":\n          case \"F9\":\n          case \"G1\":\n          case \"G2\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Chatham Islands\"} // 10\n    ],\n    zone: \"Etc/GMT-12\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => city.country === \"NZ\" && city.adminCode === \"10\")\n  },\n  {\n    country: \"Etc/GMT-11\",\n    zone: \"Pacific/Niue\",\n    flag: \"NU\",\n    cities: cityList.filter(city => city.country === \"NU\")\n  },\n  {\n    country: \"Northern Mariana Islands (United States)\",\n    zone: \"Etc/GMT-10\",\n    flag: \"MP\",\n    cities: cityList.filter(city => city.country === \"MP\")\n  },\n  {\n    country: \"Palau\",\n    zone: \"Etc/GMT-9\",\n    flag: \"PW\",\n    cities: cityList.filter(city => city.country === \"PW\")\n  },\n  {\n    country: \"Papua New Guinea\",\n    zone: \"Etc/GMT-10\",\n    flag: \"PG\",\n    cities: cityList.filter(city => city.country === \"PG\")\n  },\n  {\n    country: \"Pitcairn Islands (United Kingdom)\",\n    zone: \"Etc/GMT-9\",\n    flag: \"PN\",\n    cities: cityList.filter(city => city.country === \"PN\")\n  },\n  {\n    country: \"Samoa\",\n    zone: \"Etc/GMT-13\",\n    flag: \"WS\",\n    cities: cityList.filter(city => city.country === \"WS\")\n  },\n  {\n    country: \"Solomon Islands\",\n    zone: \"Etc/GMT-11\",\n    flag: \"SB\",\n    cities: cityList.filter(city => city.country === \"SB\")\n  },\n  {\n    country: \"Tokelau (New Zealand)\",\n    zone: \"Etc/GMT-13\",\n    flag: \"TK\",\n    cities: cityList.filter(city => city.country === \"TK\")\n  },\n  {\n    country: \"Tonga\",\n    zone: \"Etc/GMT-12\",\n    flag: \"TO\",\n    cities: cityList.filter(city => city.country === \"TO\")\n  },\n  {\n    country: \"Tuvalu\",\n    zone: \"Etc/GMT-12\",\n    flag: \"TV\",\n    cities: cityList.filter(city => city.country === \"TV\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Hawaii\"}\n    ],\n    zone: \"Etc/GMT+10\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.adminCode === \"HI\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Midway Islands\"}, // 300\n      {title: \"Palmyra Atoll\"} // 400\n    ],\n    zone: \"Etc/GMT+12\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => {\n      if(city.country === \"UM\") {\n        switch(city.adminCode) {\n          case \"300\":\n          case \"400\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Wake\"}\n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.adminCode === \"450\")\n  },\n  {\n    country: \"Vanuatu\",\n    zone: \"Etc/GMT-11\",\n    flag: \"VU\",\n    cities: cityList.filter(city => city.country === \"VU\")\n  },\n  {\n    country: \"Wallis and Futuna (France)\",\n    zone: \"Etc/GMT-12\",\n    flag: \"WF\",\n    cities: cityList.filter(city => city.country === \"WF\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kaliningrad Oblast\"} //23\n    ],\n    zone: \"Etc/GMT-1\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.adminCode === \"23\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Saint Petersburg\"}, // 66\n      {title: \"Karelia\"}, // 28\n      {title: \"Belgorod Oblast\"}, // 09\n      {title: \"Bryansk Oblast\"}, // 10\n      {title: \"Kaluga Oblast\"}, // 25\n      {title: \"Kursk Oblast\"}, // 41\n      {title: \"Leningrad Oblast\"}, // 42\n      {title: \"Murmansk Oblast\"}, // 49\n      {title: \"Novgorod Oblast\"}, // 52\n      {title: \"Oryol Oblast\"}, // 56\n      {title: \"Pskov Oblast\"}, // 60\n      {title: \"Smolensk Oblast\"}, // 69\n      {title: \"Tula Oblast\"}, // 76\n      {title: \"Tver Oblast\"}, // 77\n    ],\n    zone: \"Etc/GMT-2\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"09\":\n          case \"10\":\n          case \"25\":\n          case \"28\":\n          case \"41\":\n          case \"42\":\n          case \"49\":\n          case \"52\":\n          case \"56\":\n          case \"60\":\n          case \"66\":\n          case \"69\":\n          case \"76\":\n          case \"77\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Moscow\"}, // 48 \n      {title: \"Adygea\"}, // 01\n      {title: \"Chechnya\"}, // 12\n      {title: \"Chuvashia\"}, // 16\n      {title: \"Dagestan\"}, // 17\n      {title: \"Ingushetia\"},  // 19\n      {title: \"Kabardino-Balkaria\"}, // 22 \n      {title: \"Kalmykia\"}, // 24\n      {title: \"Karachay-Cherkessia\"}, // 27\n      {title: \"Mari El\"}, // 45\n      {title: \"Mordovia\"}, // 46\n      {title: \"North Ossetia-Alania\"}, // 68\n      {title: \"Tatarstan\"}, // 73\n      {title: \"Udmurtia\"}, // 80\n      {title: \"Krasnodar Region\"}, // 38\n      {title: \"Stavropol Region\"}, // 70\n      {title: \"Arkhangelsk Oblast\"}, // 06\n      {title: \"Astrakhan Oblast\"}, // 07\n      {title: \"Ivanovo Oblast\"}, // 21\n      {title: \"Kirov Oblast\"}, // 33\n      {title: \"Kostroma Oblast\"}, // 37\n      {title: \"Lipetsk Oblast\"}, // 43\n      {title: \"Moscow Oblast\"}, // 47\n      {title: \"Nizhnyi Novgorod Oblast\"}, // 51\n      {title: \"Penza Oblast\"}, // 57\n      {title: \"Rostov Oblast\"}, // 61\n      {title: \"Ryazan Oblast\"}, // 62\n      {title: \"Samara Oblast\"}, // 65\n      {title: \"Saratov Oblast\"}, // 67\n      {title: \"Tambov Oblast\"}, // 72\n      {title: \"Ulyanovsk Oblast\"}, // 81\n      {title: \"Vladimir Oblast\"}, // 83\n      {title: \"Volgograd Oblast\"}, // 84\n      {title: \"Vologda Oblast\"}, // 85\n      {title: \"Voronezh Oblast\"}, // 86\n      {title: \"Yaroslavl Oblast\"}, // 88\n      {title: \"Nenets Autonomous Okrug\", extra: \"(west of 52.5° E)\"} // 50\n    ],\n    zone: \"Etc/GMT-3\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"01\":\n          case \"06\":\n          case \"07\":\n          case \"12\":\n          case \"16\":\n          case \"17\":\n          case \"19\":\n          case \"21\":\n          case \"22\":\n          case \"24\":\n          case \"27\":\n          case \"33\":\n          case \"37\":\n          case \"38\":\n          case \"43\":\n          case \"45\":\n          case \"46\":\n          case \"47\":\n          case \"48\":\n          case \"51\":\n          case \"57\":\n          case \"61\":\n          case \"62\":\n          case \"65\":\n          case \"67\":\n          case \"68\":\n          case \"70\":\n          case \"72\":\n          case \"73\":\n          case \"80\":\n          case \"81\":\n          case \"83\":\n          case \"84\":\n          case \"85\":\n          case \"86\":\n          case \"88\":\n            return true\n          case \"50\":\n            if(city.lon < 52.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Bashkortostan\"}, // 08\n      {title: \"Komi\"}, // 34\n      {title: \"Perm Region\"}, // 90\n      {title: \"Chelyabinsk Oblast\"}, // 13\n      {title: \"Kurgan Oblast\"}, // 40\n      {title: \"Orenburg Oblast\"}, // 55\n      {title: \"Sverdlovsk Oblast\"}, // 71\n      {title: \"Nenets Autonomous Okrug\", extra: \"(east of 52.5° E)\"} // 50\n    ],\n    zone: \"Etc/GMT-4\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"08\":\n          case \"13\":\n          case \"34\":\n          case \"40\":\n          case \"55\":\n          case \"71\":\n          case \"90\":\n            return true\n          case \"50\":\n            if(city.lon >= 52.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Altai Region\"}, // 04\n      {title: \"Novosibirsk Oblast\"}, // 53\n      {title: \"Omsk Oblast\"}, // 54\n      {title: \"Tyumen Oblast\"}, // 78\n      {title: \"Khanty-Mansi Autonomous Okrug\"}, // 32\n      {title: \"Yamalo-Nenets Autonomous Okrug\"}, // 87\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"04\":\n          case \"32\":\n          case \"53\":\n          case \"54\":\n          case \"78\":\n          case \"87\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Altai Republic\"}, // 03\n      {title: \"Khakassia\"}, // 31\n      {title: \"Tuva Republic\"}, // 79\n      {title: \"Krasnoyarsk Region\", extra: \"(west of 97.5° E)\"}, // 91\n      {title: \"Kemerovo Oblast\"}, // 29\n      {title: \"Tomsk Oblast\"}, // 75\n    ],\n    zone: \"Etc/GMT-6\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"03\":\n          case \"29\":\n          case \"31\":\n          case \"75\":\n          case \"79\":\n            return true\n          case \"91\":\n            if(city.lon < 97.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Buryatia\"}, // 11\n      {title: \"Sakha\", extra: \"(west of 112.5° E)\"}, // 63\n      {title: \"Krasnoyarsk Region\", extra: \"(east of 97.5°E)\"}, // 91\n      {title: \"Irkutsk Oblast\", extra: \"(west of 112.5° E)\"}, // 20\n    ],\n    zone: \"Etc/GMT-7\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"11\":\n            return true\n          case \"91\":\n            if(city.lon >= 97.5) return true\n            return false\n          case \"20\":\n          case \"63\":\n            if(city.lon < 112.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(112.5° E – 127.5° E)\"}, // 63\n      {title: \"Amur Oblast\"}, // 05\n      {title: \"Irkutsk Oblast\", extra: \"(east of 112.5° E)\"}, // 20\n      {title: \"Zabaykalsky Krai\"}, // 93\n    ],\n    zone: \"Etc/GMT-8\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"05\":\n          case \"93\":\n            return true\n          case \"20\":\n            if(city.lon >= 112.5) return true\n            return false\n          case \"63\":\n            if(city.lon >= 112.5 && city.lon < 127.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(127.5°E – 142.5° E)\"}, // 63\n      {title: \"Khabarovsk Region\"}, // 30\n      {title: \"Primorsky Krai\"}, // 59\n      {title: \"Sakhalin Oblast\"}, // 64\n      {title: \"Jewish Autonomous Oblast\"}, // 89\n    ],\n    zone: \"Etc/GMT-9\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"30\":\n          case \"59\":\n          case \"64\":\n          case \"89\":\n            return true\n          case \"63\":\n            if(city.lon >= 127.5 && city.lon < 142.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(east of 142.5° E)\"}, // 63\n      {title: \"Magadan Oblast\", extra: \"(west of 157.5° E)\"} // 44\n    ],\n    zone: \"Etc/GMT-10\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"44\":\n            if(city.lon < 157.5) return true\n            return false\n          case \"63\":\n            if(city.lon >= 142.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Magadan Oblast\", extra: \"(east of 157.5° E)\"}, // 44\n      {title: \"Kamchatka\"}, // 92\n      {title: \"Chukotka Autonomous Okrug\", extra: \"(west of 172.5° E)\"}, // 15\n    ],\n    zone: \"Etc/GMT-11\",\n    flag: \"RU\",\n    cities: cityList.filter(city => {\n      if(city.country === \"RU\") {\n        switch(city.adminCode) {\n          case \"92\":\n            return true\n          case \"15\":\n            if(city.lon < 172.5) return true\n            return false\n          case \"44\":\n            if(city.lon >= 157.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Chukotka Autonomous Okrug\", extra: \"(east of 172.5° E)\"},\n    ],\n    zone: \"Etc/GMT-12\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.adminCode === \"15\" && city.lon >= 172.5)\n  },\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Argentina\",\n    zone: \"Etc/GMT+4\",\n    flag: \"AR\",\n    cities: cityList.filter(city => city.country === \"AR\")\n  },\n  {\n    country: \"Bolivia\",\n    zone: \"Etc/GMT+4\",\n    flag: \"BO\",\n    cities: cityList.filter(city => city.country === \"BO\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Acre\"}, // 01\n      {title: \"Amazonas\", extra: \"(western part)\"} // 04\n    ],\n    zone: \"Etc/GMT+5\",\n    flag: \"BR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"BR\") {\n        switch(city.adminCode) {\n          case \"01\":\n            return true\n          case \"04\":\n            if(city.lon < -67.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amazonas\", extra: \"(eastern part)\"}, // 04\n      {title: \"Mato Grosso\"}, // 14\n      {title: \"Mato Grosso do Sul\"}, // 11\n      {title: \"Pará\", extra: \"(west of 52.5° W)\"}, // 16\n      {title: \"Rio Grande do Sul\"}, // 23\n      {title: \"Rondônia\"}, // 24\n      {title: \"Roraima\"}, // 25\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"BR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"BR\") {\n        switch(city.adminCode) {\n          case \"11\":\n          case \"14\":\n          case \"23\":\n          case \"24\":\n          case \"25\":\n            return true\n          case \"04\":\n            if(city.lon >= -67.5) return true\n            return false\n          case \"16\":\n            if(city.lon < -52.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false \n    })\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amapá\"}, // 03\n      {title: \"Bahia\"}, // 05\n      {title: \"Ceará\"},  // 06\n      {title: \"Distrito Federal\"}, // 07\n      {title: \"Espírito Santo\"},  // 08\n      {title: \"Goiás\"}, // 29 \n      {title: \"Maranhão\"}, // 13\n      {title: \"Minas Gerais\"}, // 15\n      {title: \"Pará\", extra: \"(east of 52.5° W)\"}, // 16\n      {title: \"Paraná\"}, // 18\n      {title: \"Pernambuco\"}, // 30\n      {title: \"Piauí\"}, // 20\n      {title: \"Rio de Janeiro\"}, // 21\n      {title: \"Santa Catarina\"}, // 26\n      {title: \"São Paulo\"}, // 27\n      {title: \"Tocantins\"}, // 31\n    ],\n    zone: \"Etc/GMT+3\",\n    flag: \"BR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"BR\") {\n        switch(city.adminCode) {\n          case \"03\":\n          case \"05\":\n          case \"06\":\n          case \"07\":\n          case \"08\":\n          case \"13\":\n          case \"15\":\n          case \"18\":\n          case \"20\":\n          case \"21\":\n          case \"26\":\n          case \"27\":\n          case \"29\":\n          case \"30\":\n          case \"31\":\n            return true\n          case \"16\":\n            if(city.lon >= -52.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Alagoas\"}, // 02\n      {title: \"Fernando de Noronha\"}, \n      {title: \"Paraíba\"}, // 17\n      {title: \"Rio Grande do Norte\"}, // 22\n      {title: \"Sergipe\"}, // 28\n      {title: \"Trinidade\"}, \n    ],\n    zone: \"Etc/GMT+2\",\n    flag: \"BR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"BR\") {\n        if(city.tz === \"America/Noronha\") return true\n        switch(city.adminCode) {\n          case \"02\":\n          case \"17\":\n          case \"22\":\n          case \"28\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Easter Island\"}\n    ],\n    zone: \"Etc/GMT+7\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"Pacific/Easter\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Aisén\"},\n      {title: \"Antofagasta\"},\n      {title: \"Araucanía\"},\n      {title: \"Arica and Parinacota\"},\n      {title: \"Atacama\"},\n      {title: \"Biobío\"},\n      {title: \"Coquimbo\"},\n      {title: \"Los Lagos\"},\n      {title: \"Los Ríos\"},\n      {title: \"Magallanes and Antártica Chilena Region\"},\n      {title: \"Maule\"},\n      {title: \"Ñuble\"},\n      {title: \"Región del Libertador Bernardo O'Higgins\"},\n      {title: \"Santiago\"},\n      {title: \"Tarapacá\"},\n      {title: \"Valparaíso\", extra: \"(continental part)\"},\n    ],\n    zone: \"Etc/GMT+5\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz !== \"Pacific/Easter\")\n  },\n  {\n    country: \"Colombia\",\n    zone: \"Etc/GMT+5\",\n    flag: \"CO\",\n    cities: cityList.filter(city => city.country === \"CO\")\n  },\n  {\n    country: \"Ecuador\",\n    subdiv: [\n      {title: \"Azuay\"},\n      {title: \"Bolívar\"},\n      {title: \"Cañar\"},\n      {title: \"Carchi\"},\n      {title: \"Chimborazo\"},\n      {title: \"Cotopaxi\"},\n      {title: \"El Oro\"},\n      {title: \"Esmeraldas\"},\n      {title: \"Guayas\"},\n      {title: \"Imbabura\"},\n      {title: \"Loja\"},\n      {title: \"Los Ríos\"},\n      {title: \"Manabí\"},\n      {title: \"Morona Santiago\"},\n      {title: \"Napo\"},\n      {title: \"Orellana\"},\n      {title: \"Pastaza\"},\n      {title: \"Pichincha\"},\n      {title: \"Santa Elena\"},\n      {title: \"Santo Domingo de los Tsáchilas\"},\n      {title: \"Sucumbíos\"},\n      {title: \"Tungurahua\"},\n      {title: \"Zamora Chinchipe\"}\n    ],\n    zone: \"Etc/GMT+5\",\n    flag: \"EC\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz !== \"Pacific/Galapagos\")\n  },\n  {\n    country: \"Ecuador\",\n    subdiv: [\n      {title: \"Galápagos\"}\n    ],\n    zone: \"Etc/GMT+6\",\n    flag: \"EC\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"Pacific/Galapagos\")\n  },\n  {\n    country: \"Falkland Islands (United Kingdom)\",\n    zone: \"Etc/GMT+4\",\n    flag: \"FK\",\n    cities: cityList.filter(city => city.country === \"FK\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"French Guiana\"}\n    ],\n    zone: \"Etc/GMT+4\",\n    flag: \"FR\", // eigentlich GF\n    cities: cityList.filter(city => city.country === \"GF\")\n  },\n  {\n    country: \"Guyana\",\n    zone: \"Etc/GMT+4\",\n    flag: \"GY\",\n    cities: cityList.filter(city => city.country === \"GY\")\n  },\n  {\n    country: \"Paraguay\",\n    zone: \"Etc/GMT+4\",\n    flag: \"PY\",\n    cities: cityList.filter(city => city.country === \"PY\")\n  },\n  {\n    country: \"Peru\",\n    zone: \"Etc/GMT+5\",\n    flag: \"PE\",\n    cities: cityList.filter(city => city.country === \"PE\")\n  },\n  {\n    country: \"South Georgia and the South Sandwich Islands (United Kingdom)\",\n    zone: \"Etc/GMT+2\",\n    flag: \"GS\",\n    cities: cityList.filter(city => city.country === \"GS\")\n  },\n  {\n    country: \"Suriname\",\n    zone: \"Etc/GMT+4\",\n    flag: \"SR\",\n    cities: cityList.filter(city => city.country === \"SR\")\n  },\n  {\n    country: \"Uruguay\",\n    zone: \"Etc/GMT+4\",\n    flag: \"UY\",\n    cities: cityList.filter(city => city.country === \"UY\")\n  },\n  {\n    country: \"Venezuela\",\n    zone: \"Etc/GMT+4\",\n    flag: \"VE\",\n    cities: cityList.filter(city => city.country === \"VE\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Bangladesh\",\n    zone: \"Etc/GMT-6\",\n    flag: \"BD\",\n    cities: cityList.filter(city => city.country === \"BD\")\n  },\n  {\n    country: \"Bhutan\",\n    zone: \"Etc/GMT-6\",\n    flag: \"BT\",\n    cities: cityList.filter(city => city.country === \"BT\")\n  },\n  {\n    country: \"British Indian Ocean Territory (United Kingdom)\",\n    zone: \"Etc/GMT-5\",\n    flag: \"IO\",\n    cities: cityList.filter(city => city.country === \"IO\")\n  },\n  {\n    country: \"Cocos Islands (Australia)\",\n    zone: \"Etc/GMT-6\",\n    flag: \"CC\",\n    cities: cityList.filter(city => city.country === \"CC\")\n  },\n  {\n    country: \"India\",\n    subdiv: [\n      {title: \"Andhra Pradesh\"}, // 02\n      {title: \"Chhattisgarh\"}, // 37\n      {title: \"Goa\"}, // 33\n      {title: \"Gujarat\"}, // 09\n      {title: \"Haryana\"}, // 10\n      {title: \"Himachal Pradesh\"}, // 11\n      {title: \"Karnataka\"}, // 19\n      {title: \"Kerala\"}, // 13\n      {title: \"Madhya Pradesh\"}, // 35\n      {title: \"Maharashtra\"}, // 16\n      {title: \"Punjab\"}, // 23\n      {title: \"Rajasthan\"}, // 24\n      {title: \"Tamil Nadu\"}, // 25\n      {title: \"Telangana\"}, // 40\n      {title: \"Uttarakhand\"}, // 39\n      {title: \"Uttar Pradesh\"}, // 36\n      {title: \"Dadra and Nagar Haveli and Daman and Du\"}, // 52\n      {title: \"Delhi\"}, // 07\n      {title: \"Jammu and Kashmir\"}, // 12\n      {title: \"Ladakh\"}, // 41\n      {title: \"Lakshadweep\"}, // 14\n      {title: \"Puducherry\"}, // 22\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"IN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"IN\") {\n        switch(city.adminCode) {\n          case \"02\":\n          case \"07\":\n          case \"09\":\n          case \"10\":\n          case \"11\":\n          case \"12\":\n          case \"13\":\n          case \"14\":\n          case \"16\":\n          case \"19\":\n          case \"22\":\n          case \"23\":\n          case \"24\":\n          case \"25\":\n          case \"33\":\n          case \"35\":\n          case \"36\":\n          case \"37\":\n          case \"39\":\n          case \"40\":\n          case \"41\":\n          case \"52\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"India\",\n    subdiv: [\n      {title: \"Arunachal Pradesh\"}, // 30\n      {title: \"Assam\"}, // 03\n      {title: \"Bihar\"}, // 34\n      {title: \"Jharkhand\"}, // 38\n      {title: \"Manipur\"}, // 17\n      {title: \"Meghalaya\"}, // 18\n      {title: \"Mizoram\"}, // 31\n      {title: \"Nagaland\"}, // 20\n      {title: \"Odisha\"}, // 21\n      {title: \"Sikkim\"}, // 29\n      {title: \"Tripura\"}, // 26\n      {title: \"West Bengal\"}, // 28\n      {title: \"Andaman and Nicobar Islands\"}, // 01\n      {title: \"Chandigarh\"}, // 05\n    ],\n    zone: \"Etc/GMT-6\",\n    flag: \"IN\",\n    cities: cityList.filter(city => {\n      if(city.country === \"IN\") {\n        switch(city.adminCode) {\n          case \"01\":\n          case \"03\":\n          case \"05\":\n          case \"17\":\n          case \"18\":\n          case \"20\":\n          case \"21\":\n          case \"26\":\n          case \"28\":\n          case \"29\":\n          case \"30\":\n          case \"31\":\n          case \"34\":\n          case \"38\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Myanmar\",\n    utcOffset: 390,\n    flag: \"MM\",\n    cities: cityList.filter(city => city.country === \"MM\")\n  },\n  {\n    country: \"Nepal\",\n    zone: \"Etc/GMT-5\",\n    flag: \"NP\",\n    cities: cityList.filter(city => city.country === \"NP\")\n  },\n  {\n    country: \"Maldives\",\n    zone: \"Etc/GMT-5\",\n    flag: \"MV\",\n    cities: cityList.filter(city => city.country === \"MV\")\n  },\n  {\n    country: \"Pakistan\",\n    subdiv: [\n      {title: \"Balochistan\"}, // 02\n    ],\n    zone: \"Etc/GMT-4\",\n    flag: \"PK\",\n    cities: cityList.filter(city => city.country === \"PK\" && city.adminCode === \"02\")\n  },\n  {\n    country: \"Pakistan\",\n    subdiv: [\n      {title: \"Azad Jammu and Kashmir\"}, // 06\n      {title: \"Gilgit-Baltistan\"}, // 07\n      {title: \"Islamabad Capital Territory\"}, // 08\n      {title: \"Khyber Pakhtunkhwa\"}, // 03\n      {title: \"Punjab\"}, // 04\n      {title: \"Sindh\"}, // 05\n    ],\n    zone: \"Etc/GMT-5\",\n    flag: \"PK\",\n    cities: cityList.filter(city => {\n      if(city.country === \"PK\") {\n        switch(city.adminCode) {\n          case \"03\":\n          case \"04\":\n          case \"05\":\n          case \"06\":\n          case \"07\":\n          case \"08\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Sri Lanka\",\n    zone: \"Etc/GMT-5\",\n    flag: \"LK\",\n    cities: cityList.filter(city => city.country === \"LK\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Brunei\",\n    zone: \"Etc/GMT-8\",\n    flag: \"BN\",\n    cities: cityList.filter(city => city.country === \"BN\")\n  },\n  {\n    country: \"Cambodia\",\n    zone: \"Etc/GMT-7\",\n    flag: \"KH\",\n    cities: cityList.filter(city => city.country === \"KH\")\n  },\n  {\n    country: \"Christmas Island (Australia)\",\n    zone: \"Etc/GMT-7\",\n    flag: \"CX\",\n    cities: cityList.filter(city => city.country === \"CX\")\n  },\n  {\n    country: \"Laos\",\n    zone: \"Etc/GMT-7\",\n    flag: \"LA\",\n    cities: cityList.filter(city => city.country === \"LA\")\n  },\n  {\n    country: \"Malaysia\",\n    subdiv: [\n      {title: \"Johor\"}, // 01\n      {title: \"Kedah\"}, // 02\n      {title: \"Kelantan\"}, // 03\n      {title: \"Kuala Lumpur\"}, // 14\n      {title: \"Malacca\"}, // 04\n      {title: \"Negeri Sembilan\"}, // 05\n      {title: \"Pahang\"}, // 06\n      {title: \"Penang\"}, // 09\n      {title: \"Perak\"}, // 07\n      {title: \"Perlis\"}, // 08\n      {title: \"Putrajaya\"}, // 17\n      {title: \"Selangor\"}, // 12\n      {title: \"Terengganu\"}, // 13\n    ],\n    zone: \"Etc/GMT-7\",\n    flag: \"MY\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MY\") {\n        switch(city.adminCode) {\n          case \"01\":\n          case \"02\":\n          case \"03\":\n          case \"04\":\n          case \"05\":\n          case \"06\":\n          case \"07\":\n          case \"08\":\n          case \"09\":\n          case \"12\":\n          case \"13\":\n          case \"14\":\n          case \"17\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Malaysia\",\n    subdiv: [\n      {title: \"Labuan\"}, // 15\n      {title: \"Sabah\"},  // 16\n      {title: \"Sarawak\"} // 11\n    ],\n    zone: \"Etc/GMT-8\",\n    flag: \"MY\",\n    cities: cityList.filter(city => {\n      if(city.country === \"MY\") {\n        switch(city.adminCode) {\n          case \"11\":\n          case \"15\":\n          case \"16\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"Philippines\",\n    zone: \"Etc/GMT-8\",\n    flag: \"PH\",\n    cities: cityList.filter(city => city.country === \"PH\")\n  },\n  {\n    country: \"Singapore\",\n    zone: \"Etc/GMT-7\",\n    flag: \"SG\",\n    cities: cityList.filter(city => city.country === \"SG\")\n  },\n  {\n    country: \"Thailand\",\n    zone: \"Etc/GMT-7\",\n    flag: \"TH\",\n    cities: cityList.filter(city => city.country === \"TH\")\n  },\n  {\n    country: \"Timor-Leste\",\n    zone: \"Etc/GMT-8\",\n    flag: \"TL\",\n    cities: cityList.filter(city => city.country === \"TL\")\n  },\n  {\n    country: \"Vietnam\",\n    zone: \"Etc/GMT-7\",\n    flag: \"VN\",\n    cities: cityList.filter(city => city.country === \"VN\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(west of 172.5° W)\"},\n    ],\n    zone: \"Etc/GMT+12\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"AK\":\n            if(city.lon < -172.5) return true\n            if(city.lon >= 172.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(172.5° W – 157.5° W)\"},\n    ],\n    zone: \"Etc/GMT+11\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"AK\":\n            if(city.lon >= -172.5 && city.lon < -157.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(157.5° W – 142.5° W)\"},\n    ],\n    zone: \"Etc/GMT+10\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"AK\":\n            if(city.lon >= -157.5 && city.lon < -142.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(east of 142.5° W)\"},\n    ],\n    zone: \"Etc/GMT+9\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"AK\":\n            if(city.lon >= -142.5) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"California\"},\n      {title: \"Idaho\"},\n      {title: \"Nevada\"},\n      {title: \"Oregon\"},\n      {title: \"Washington\"},\n    ],\n    zone: \"Etc/GMT+8\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"CA\":\n          case \"ID\":\n          case \"NV\":\n          case \"OR\":\n          case \"WA\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Arizona\"},\n      {title: \"Colorado\"},\n      {title: \"Kansas\"},\n      {title: \"Montana\"},\n      {title: \"Nebraska\"},\n      {title: \"New Mexico\"},\n      {title: \"North Dakota\"},\n      {title: \"Oklahoma\"},\n      {title: \"South Dakota\"},\n      {title: \"Texas\"},\n      {title: \"Utah\"},\n      {title: \"Wyoming\"},\n    ],\n    zone: \"Etc/GMT+7\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"AZ\":\n          case \"CO\":\n          case \"KS\":\n          case \"MT\":\n          case \"NE\":\n          case \"NM\":\n          case \"ND\":\n          case \"OK\":\n          case \"SD\":\n          case \"TX\":\n          case \"UT\":\n          case \"WY\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Alabama\"},\n      {title: \"Arkansas\"},\n      {title: \"Florida\", extra: \"(panhandle)\"},\n      {title: \"Illinois\"},\n      {title: \"Indiana\"},\n      {title: \"Iowa\"},\n      {title: \"Kentucky\"},\n      {title: \"Louisiana\"},\n      {title: \"Michigan\"},\n      {title: \"Minnesota\"},\n      {title: \"Mississippi\"},\n      {title: \"Missouri\"},\n      {title: \"Tennessee\"},\n      {title: \"Wisconsin\"},\n    ],\n    zone: \"Etc/GMT+6\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"AL\":\n          case \"AR\":\n          case \"IL\":\n          case \"IN\":\n          case \"IA\":\n          case \"KY\":\n          case \"LA\":\n          case \"MI\":\n          case \"MN\":\n          case \"MS\":\n          case \"MO\":\n          case \"TN\":\n          case \"WI\":\n            return true\n          case \"FL\":\n            if(city.lon < -84) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United States of America\",\n    subdiv: [\n      {title: \"Connecticut\"},\n      {title: \"Delaware\"}, \n      {title: \"District of Columbia\"}, \n      {title: \"Florida\", extra: \"(except panhandle)\"},\n      {title: \"Georgia\"},\n      {title: \"Maine\"},\n      {title: \"Maryland\"},\n      {title: \"Massachusetts\"},\n      {title: \"New Hampshire\"},\n      {title: \"New Jersey\"},\n      {title: \"New York\"},\n      {title: \"North Carolina\"},\n      {title: \"Ohio\"},\n      {title: \"Pennsylvania\"},\n      {title: \"Rhode Island\"},\n      {title: \"South Carolina\"},\n      {title: \"Vermont\"},\n      {title: \"Virginia\"},\n      {title: \"West Virginia\"},\n    ],\n    zone: \"Etc/GMT+5\",\n    flag: \"US\",\n    cities: cityList.filter(city => {\n      if(city.country === \"US\") {\n        switch(city.adminCode) {\n          case \"CT\":\n          case \"DE\":\n          case \"DC\":\n          case \"GE\":\n          case \"ME\":\n          case \"MD\":\n          case \"MA\":\n          case \"NH\":\n          case \"NJ\":\n          case \"NY\":\n          case \"NC\":\n          case \"OH\":\n          case \"PA\":\n          case \"RI\":\n          case \"SC\":\n          case \"VT\":\n          case \"VA\":\n          case \"WV\":\n            return true\n          case \"FL\":\n            if(city.lon >= -84) return true\n            return false\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n]\n","import Africa from \"./timezones-ideal/Africa\"\nimport Antarctica from \"./timezones-ideal/Antarctica\"\nimport Australia from \"./timezones-ideal/Australia\"\nimport Canada from \"./timezones-ideal/Canada\"\nimport Caribbean from \"./timezones-ideal/Caribbean\"\nimport CentralAmerica from \"./timezones-ideal/CentralAmerica\"\nimport CentralAsia from \"./timezones-ideal/CentralAsia\"\nimport EastAsia from \"./timezones-ideal/EastAsia\"\nimport Europe from \"./timezones-ideal/Europe\"\nimport Indonesia from \"./timezones-ideal/Indonesia\"\nimport MiddleEast from \"./timezones-ideal/MiddleEast\"\nimport Oceania from \"./timezones-ideal/Oceania\"\nimport Russia from \"./timezones-ideal/Russia\"\nimport SouthAmerica from \"./timezones-ideal/SouthAmerica\"\nimport SouthAsia from \"./timezones-ideal/SouthAsia\"\nimport SouthEastAsia from \"./timezones-ideal/SouthEastAsia\"\nimport UnitedStates from \"./timezones-ideal/UnitedStates\"\n\nexport default [\n  ...Africa, \n  ...Antarctica,\n  ...Australia,\n  ...Canada,\n  ...Caribbean,\n  ...CentralAmerica,\n  ...CentralAsia, \n  ...EastAsia, \n  ...Europe, \n  ...Indonesia,\n  ...MiddleEast,\n  ...Oceania, \n  ...Russia, \n  ...SouthAmerica,\n  ...SouthAsia,\n  ...SouthEastAsia,\n  ...UnitedStates\n]\n","import React, { useEffect } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport moment from \"moment-timezone\";\nimport IdealClock from \"../components/IdealClock\";\nimport timezonesRaw from \"../components/data-ideal\"\nimport \"../styles/App.css\";\n\nexport default function Ideal() {\n  const [allStates] = useDebugState(\"allStates\", timezonesRaw)\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\",\"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\",null)\n  const prepareZones = (filterVal) => {\n    const unsortedStates = allStates.map(tz => {\n      const Now = moment().utc().format(\"x\")\n      const {country, zone, flag, subdiv, utcOffset = undefined, cities = [] } = tz \n      if (utcOffset) {\n        const prefix = utcOffset < 0 ? \"-\" : \"+\"\n        const hours = Math.floor(Math.abs(utcOffset)/60)\n        const formattedHours = hours < 10 ? `0${hours}` : `${hours}`\n        const minutes = Math.abs(utcOffset) - (60 * hours)\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`\n        const offset = `${prefix}${formattedHours}:${formattedMinutes}`\n        const numericOffset = utcOffset\n        return { country, zone: null, flag, offset, numericOffset, subdiv, cities }\n      }\n      const offset = moment().tz(zone).format(\"Z\")\n      const numericOffset = -1 * moment.tz.zone(zone).utcOffset(Now)\n      return { country, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal != null ? filterVal : filtVal\n    const filteredStates = filterValue !== \"\"  ? timezoneArray.filter(tz => {\n      const { flags, cities } = tz\n      const filteredFlags = flags.filter(flag => {\n        const { title: country, subdiv = [] } = flag\n        const title = subdiv.length > 0 ? `${country}: ${subdiv.map(item => item.title).join(\", \")}` : country\n        if(filterValue !== \"\"){\n          if(title.toLowerCase().includes(filterValue.toLowerCase())) return true\n          return false\n        }\n        return true\n      })\n      if(filteredFlags.length > 0) return true\n      const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n      if(filteredCities.length > 0) return true\n      return false\n    }) : timezoneArray\n    setTimezones(filteredStates)\n  }\n  useEffect(() => {\n    prepareZones()\n    setInterval(1000,prepareZones)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder=\"Filter countries\" onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(e.target.value)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <IdealClock key={index} flags={time.flags} city={time.city} zone={time.zone} offset={time.numericOffset} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./Header\"\nimport Home from \"../pages/Home\";\nimport Ideal from \"../pages/Ideal\";\n\nfunction App() {\n  return (\n    <Router basename={`/${process.env.PUBLIC_URL}`}>\n      <Header />\n      <Switch>\n        <Route path=\"/ideal\">\n          <Ideal />\n        </Route>\n        <Route path=\"\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
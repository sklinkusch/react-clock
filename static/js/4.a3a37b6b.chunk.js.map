{"version":3,"sources":["components/ClockTitle.js","components/ClockFlags.js","components/ClockCities.js","components/ClockHelpers.js","components/Clock.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/timezones/cityList.js","components/timezones/Africa.js","components/timezones/Antarctica.js","components/timezones/Australia.js","components/timezones/Canada.js","components/timezones/Caribbean.js","components/timezones/CentralAmerica.js","components/timezones/CentralAsia.js","components/timezones/EastAsia.js","components/timezones/Europe.js","components/timezones/Indonesia.js","components/timezones/MiddleEast.js","components/timezones/Oceania.js","components/timezones/Russia.js","components/timezones/SouthAmerica.js","components/timezones/SouthAsia.js","components/timezones/SouthEastAsia.js","components/timezones/UnitedStates.js","components/data.js","pages/Home.js"],"names":["ClockTitle","_ref","correctedCity","city","replace","react_default","a","createElement","ClockFlags","flags","Array","isArray","length","map","flag","index","flagTitle","subdiv","flagSubdiv","Object","slicedToArray","title","extra","concat","text","sort","b","localeCompare","sensitivy","item","join","getMultiTitle","react_world_flags_default","key","code","height","ClockCities","uniqueCities","react","style","width","paddingLeft","paddingRight","asciiname","toLowerCase","country","adminCode","display","flexDirection","justifyContent","flexBasis","textAlign","lon","now","Date","toLocaleTimeString","timeZone","split","slice","getSunTime","ClockDate","date","ClockTime","_ref2","pad","num","formatDate","offset","localUnixTime","toLocaleDateString","time","getFormattedDate","year","month","day","getFormattedTime","hours","minutes","seconds","IdealClock","props","_this","classCallCheck","this","_super","call","state","formattedDate","getZonedTime","findTimeZone","zone","formattedTime","_this2","timerID","setInterval","tick","clearInterval","_this$props","_this$props$city","_this$props$flags","_this$props$cities","cities","_this$state","reducedFlags","reduce","acc","curr","arr","toConsumableArray","flagIndexes","includes","indexOf","element","forEach","push","sortedSubdiv","Set","className","components_ClockTitle","components_ClockFlags","components_ClockCities","ClockHelpers_ClockDate","ClockHelpers_ClockTime","setState","React","Component","_arrayLikeToArray","len","i","arr2","_toConsumableArray","_arrayWithoutHoles","iter","Symbol","iterator","from","_iterableToArray","o","minLen","n","prototype","toString","constructor","name","test","_unsupportedIterableToArray","TypeError","_nonIterableSpread","cityList","filter","Number","population","featureClass","featureCode","Africa","tz","Antarctica","Australia","Canada","Caribbean","CentralAmerica","CentralAsia","EastAsia","Europe","Indonesia","MiddleEast","Oceania","Russia","SouthAmerica","startsWith","SouthAsia","SouthEastAsia","UnitedStates","data","getOffset","number","sign","Math","abs","floor","Home","_useDebugState","useDebugState","timezonesRaw","allStates","_useDebugState3","_useDebugState4","filtVal","setFiltVal","_useDebugState5","_useDebugState6","timezones","setTimezones","prepareZones","filterVal","timezoneObject","_tz$subdiv","_tz$cities","timezone","numericOffset","obj","objectSpread","_curr$subdiv","_curr$cities","hasOwnProperty","timezoneArray","values","filterValue","filteredStates","_flag$subdiv","useEffect","marginBottom","marginTop","type","placeholder","onChange","e","target","value","Clock"],"mappings":"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","file":"static/js/4.a3a37b6b.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ClockTitle = ({ city }) => {\n  const correctedCity = city.replace(\"-\",\"–\")\n  return (\n    <h2>\n      <span>\n        {correctedCity}\n      </span>\n    </h2>\n  )\n}\n\nexport default ClockTitle","import React from \"react\"\nimport Flag from \"react-world-flags\"\n\nfunction getMultiTitle(flagTitle, flagSubdiv){\n  if(flagSubdiv.length === 1) {\n    const [subdiv] = flagSubdiv\n    const {title, extra} = subdiv\n    if(extra) {\n      return `${flagTitle}: ${title} ${extra}`\n    } else {\n      return `${flagTitle}: ${title}`\n    }\n  } else {\n    const sortedSubdiv = flagSubdiv.sort((a,b) => a.title.localeCompare(b.title,\"de\",{sensitivy: \"base\"}))\n    const text = sortedSubdiv.map(item => item.extra ? `${item.title} ${item.extra}` : `${item.title}`).join(\", \")\n    return `${flagTitle}: ${text}`\n  }\n}\n\nconst ClockFlags = ({flags}) => (\n  <div>\n    {flags && Array.isArray(flags) && flags.length > 0 && flags.map((flag, index) => {\n      const flagTitle = flag.subdiv.length > 0 \n        ? getMultiTitle(flag.title, flag.subdiv)\n        : flag.title\n      return (\n        <Flag key={index} code={flag.code} title={flagTitle} height=\"20\" />\n      )\n    })}\n  </div>\n)\n\nexport default ClockFlags","import React, { Fragment } from \"react\"\nimport Flag from \"react-world-flags\"\n\nconst getSunTime = (city) => {\n  const { lon } = city \n  const now = Date.now()\n  const offsetRaw = lon * 4\n  const offsetMs = offsetRaw * 60 * 1000\n  const time = now + offsetMs\n  const sunTime = new Date(time).toLocaleTimeString(\"en-GB\", {timeZone: \"Etc/GMT+0\"}).split(\":\").slice(0,2).join(\":\")\n  return sunTime\n}\n\nconst ClockCities = ({uniqueCities}) => {\n  return (\n    <Fragment>\n      {uniqueCities && uniqueCities.length > 0 ? (\n        <details style={{ width: \"95%\", paddingLeft: \"2.5%\", paddingRight: \"2.5%\"}}>\n          <summary>Major cities</summary>\n          <ul>\n            {uniqueCities.sort((a,b) => {\n              if(a.asciiname.toLowerCase() < b.asciiname.toLowerCase()) return -1\n              if(b.asciiname.toLowerCase() < a.asciiname.toLowerCase()) return +1\n              if(a.country.toLowerCase() < b.country.toLowerCase()) return -1\n              if(b.country.toLowerCase() < a.country.toLowerCase()) return +1\n              if(a.adminCode.toLowerCase() < b.adminCode.toLowerCase()) return -1\n              if(b.adminCode.toLowerCase() < a.adminCode.toLowerCase()) return +1\n              return 0\n            }).map((city, index) => (\n              <li key={`city-${index}`} style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\n                <span style={{ flexBasis: \"65%\", textAlign: \"left\" }}>{city.asciiname}</span>\n                <Flag code={city.country} style={{ flexBasis: \"35px\" }}/>\n                <span>{getSunTime(city)}</span>\n              </li>\n            ))}\n          </ul>\n        </details>\n      ) : (\n        <div style={{ height: \"24.5px\"}} />\n      )}\n    </Fragment>\n  )\n}\n\nexport default ClockCities","import React from \"react\"\n\nexport const ClockDate = ({date}) => (<p>{date}</p>)\n\nexport const ClockTime = ({date}) => (<p>{date}</p>)","import React from \"react\";\nimport { getZonedTime, findTimeZone } from \"timezone-support\"\nimport ClockTitle from \"./ClockTitle\";\nimport ClockFlags from \"./ClockFlags\";\nimport ClockCities from \"./ClockCities\"\nimport \"../styles/Clock.css\";\nimport { ClockDate, ClockTime } from \"./ClockHelpers\"\n\nconst pad = (num) => (num < 10 ? `0${num}` : `${num}`)\n\nconst formatDate = (offset) => {\n  const unixTime = Date.now()\n  const add = offset * 60 * 1000\n  const localUnixTime = unixTime + add\n  const formattedDate = new Date(localUnixTime).toLocaleDateString(\"en-GB\", { timeZone: \"Etc/GMT+0\"})\n  const formattedTime = new Date(localUnixTime).toLocaleTimeString(\"en-GB\", { timeZone: \"Etc/GMT+0\"})\n  return { date: formattedDate, time: formattedTime }\n}\n\nconst getFormattedDate = (date) => {\n  const { year, month, day } = date\n  return `${pad(day)}/${pad(month)}/${pad(year)}`\n}\n\nconst getFormattedTime = (date) => {\n  const { hours, minutes, seconds } = date\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`\n}\n\nexport default class IdealClock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      formattedDate: this.props.offset ? formatDate(this.props.offset).date : getFormattedDate(getZonedTime(new Date(), findTimeZone(this.props.zone))),\n      formattedTime: this.props.offset ? formatDate(this.props.offset).time : getFormattedTime(getZonedTime(new Date(), findTimeZone(this.props.zone))),\n    };\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  render(props) {\n    const { city = \"\", flags = [], cities = [] } = this.props\n    const { formattedDate, formattedTime } = this.state\n    const sortedFlags = flags.sort((a, b) => a.title.localeCompare(b.title, \"de\", {sensitivy: \"base\"}))\n    const reducedFlags = sortedFlags.reduce((acc, curr) => {\n      const arr = [...acc]\n      const flagIndexes = arr.map(flag => flag.code)\n      if(flagIndexes.includes(curr.code)) {\n        const index = flagIndexes.indexOf(curr.code)\n        const element = arr[index]\n        curr.subdiv.forEach(item => {\n          if(!element.subdiv.includes(item)) {\n            element.subdiv.push(item)\n          }\n        })\n        const sortedSubdiv = element.subdiv.sort((a,b) => a.title.localeCompare(b.title,\"de\",{ sensitivy: \"base\"}))\n        arr[index].subdiv = sortedSubdiv\n      } else {\n        arr.push(curr)\n      }\n      return arr\n    }, [])\n    const uniqueCities = [ ...new Set(cities) ]\n    return (\n      <div>\n        <div className=\"album-item\">\n          <ClockTitle city={city} />\n          <ClockFlags flags={reducedFlags} />\n          <ClockCities uniqueCities={uniqueCities} />\n          <ClockDate date={formattedDate} />\n          <ClockTime date={formattedTime} />\n        </div>\n      </div>\n    );\n  }\n  tick() {\n    this.setState({\n      formattedDate: this.props.offset ? formatDate(this.props.offset).date : getFormattedDate(getZonedTime(new Date(), findTimeZone(this.props.zone))),\n      formattedTime: this.props.offset ? formatDate(this.props.offset).time : getFormattedTime(getZonedTime(new Date(), findTimeZone(this.props.zone))),\n    });\n  }\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import citiesRaw from \"cities15000-json\"\n\nconst cities500k = citiesRaw.filter(city => Number(city.population) >= 500000)\nconst cityList = cities500k.filter(city => {\n  if(city.featureClass === \"P\") {\n    switch(city.featureCode) {\n      case \"PPL\":\n      case \"PPLA\":\n      case \"PPLC\":\n      case \"PPLG\":\n        return true\n      case \"PPLA2\":\n        switch(city.asciiname) {\n          case \"The Bronx\":\n          case \"Brooklyn\":\n          case \"Manhattan\":\n          case \"Borough of Queens\":\n            return false\n          default:\n            return true\n        }\n      default:\n        return false\n    }\n  }\n  return false\n})\n\nexport default cityList","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Algeria\",\n    zone: \"Africa/Algiers\",\n    flag: \"DZ\",\n    cities: cityList.filter(city => city.country === \"DZ\" && city.tz === \"Africa/Algiers\")\n  },\n  {\n    country: \"Angola\",\n    zone: \"Africa/Luanda\",\n    flag: \"AO\",\n    cities: cityList.filter(city => city.country === \"AO\" && city.tz === \"Africa/Luanda\")\n  },\n  {\n    country: \"Benin\",\n    zone: \"Africa/Porto-Novo\",\n    flag: \"BJ\",\n    cities: cityList.filter(city => city.country === \"BJ\" && city.tz === \"Africa/Porto-Novo\")\n  },\n  {\n    country: \"Botswana\",\n    zone: \"Africa/Gaborone\",\n    flag: \"BW\",\n    cities: cityList.filter(city => city.country === \"BW\" && city.tz === \"Africa/Gaborone\")\n  },\n  {\n    country: \"Burkina Faso\",\n    zone: \"Africa/Ouagadougou\",\n    flag: \"BF\",\n    cities: cityList.filter(city => city.country === \"BF\" && city.tz === \"Africa/Ouagadougou\")\n  },\n  {\n    country: \"Burundi\",\n    zone: \"Africa/Bujumbura\",\n    flag: \"BI\",\n    cities: cityList.filter(city => city.country === \"BI\" && city.tz === \"Africa/Bujumbura\")\n  },\n  {\n    country: \"Cabo Verde\",\n    zone: \"Atlantic/Cape_Verde\",\n    flag: \"CV\",\n    cities: cityList.filter(city => city.country === \"CV\" && city.tz === \"Atlantic/Cape_Verde\")\n  },\n  {\n    country: \"Cameroon\",\n    zone: \"Africa/Douala\",\n    flag: \"CM\",\n    cities: cityList.filter(city => city.country === \"CM\" && city.tz === \"Africa/Douala\")\n  },\n  {\n    country: \"Central African Republic\",\n    zone: \"Africa/Bangui\",\n    flag: \"CF\",\n    cities: cityList.filter(city => city.country === \"CF\" && city.tz === \"Africa/Bangui\")\n  },\n  {\n    country: \"Chad\",\n    zone: \"Africa/Ndjamena\",\n    flag: \"TD\",\n    cities: cityList.filter(city => city.country === \"TD\" && city.tz === \"Africa/Ndjamena\")\n  },\n  {\n    country: \"Comoros\",\n    zone: \"Indian/Comoro\",\n    flag: \"KM\",\n    cities: cityList.filter(city => city.country === \"KM\" && city.tz === \"Indian/Comoro\")\n  },\n  {\n    country: \"Côte d'Ivoire\",\n    zone: \"Africa/Abidjan\",\n    flag: \"CI\",\n    cities: cityList.filter(city => city.country === \"CI\" && city.tz === \"Africa/Abidjan\")\n  },\n  {\n    country: \"Democratic Republic of the Congo\",\n    subdiv: [\n      {title: \"Équateur\"}, \n      {title: \"Kinshasa\"}, \n      {title: \"Kongo Central\"}, \n      {title: \"Kwango\"}, \n      {title: \"Kwilu\"}, \n      {title: \"Mai-Ndombe\"}, \n      {title: \"Mongala\"}, \n      {title: \"Nord-Ubangi\"}, \n      {title: \"Sud-Ubangi\"}, \n      {title: \"Tshuapa\"}\n    ],\n    zone: \"Africa/Kinshasa\",\n    flag: \"CD\",\n    cities: cityList.filter(city => city.country === \"CD\" && city.tz === \"Africa/Kinshasa\")\n  },\n  {\n    country: \"Democratic Republic of the Congo\",\n    subdiv: [\n      {title: \"Bas-Uele\"}, \n      {title: \"Haut-Katanga\"}, \n      {title: \"Haut-Lomami\"}, \n      {title: \"Haut-Uele\"},\n      {title: \"Ituri\"}, \n      {title: \"Kasaï\"}, \n      {title: \"Kasaï-Central\"}, \n      {title: \"Kasaï-Oriental\"}, \n      {title: \"Lomami\"}, \n      {title: \"Lualaba\"}, \n      {title: \"Maniema\"}, \n      {title: \"Nord-Kivu\"}, \n      {title: \"Sankuru\"}, \n      {title: \"Sud-Kivu\"}, \n      {title: \"Tanganjika\"}, \n      {title: \"Tshopo\"}\n    ],\n    zone: \"Africa/Lubumbashi\",\n    flag: \"CD\",\n    cities: cityList.filter(city => city.country === \"CD\" && city.tz === \"Africa/Lubumbashi\")\n  },\n  {\n    country: \"Djibouti\",\n    zone: \"Africa/Djibouti\",\n    flag: \"DJ\",\n    cities: cityList.filter(city => city.country === \"DJ\" && city.tz === \"Africa/Djibouti\")\n  },\n  {\n    country: \"Egypt\",\n    zone: \"Africa/Cairo\",\n    flag: \"EG\",\n    cities: cityList.filter(city => city.country === \"EG\" && city.tz === \"Africa/Cairo\")\n  },\n  {\n    country: \"Equatorial Guinea\",\n    zone: \"Africa/Malabo\",\n    flag: \"GQ\",\n    cities: cityList.filter(city => city.country === \"GQ\" && city.tz === \"Africa/Malabo\")\n  },\n  {\n    country: \"Eritrea\",\n    zone: \"Africa/Asmara\",\n    flag: \"ER\",\n    cities: cityList.filter(city => city.country === \"ER\" && city.tz === \"Africa/Asmara\")\n  },\n  {\n    country: \"eSwatini\",\n    zone: \"Africa/Mbabane\",\n    flag: \"SZ\",\n    cities: cityList.filter(city => city.country === \"SZ\" && city.tz === \"Africa/Mbabane\")\n  },\n  {\n    country: \"Ethiopia\",\n    zone: \"Africa/Addis_Ababa\",\n    flag: \"ET\",\n    cities: cityList.filter(city => city.country === \"ET\" && city.tz === \"Africa/Addis_Ababa\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Mayotte\"}\n    ],\n    zone: \"Indian/Mayotte\",\n    flag: \"FR\", // eigentlich YT aber gleiche Flagge\n    cities: cityList.filter(city => city.country === \"YT\" && city.tz === \"Indian/Mayotte\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Réunion\"}\n    ],\n    zone: \"Indian/Reunion\",\n    flag: \"FR\", // eigentlich RE aber gleiche Flagge\n    cities: cityList.filter(city => city.country === \"RE\" && city.tz === \"Indian/Reunion\")\n  },\n  {\n    country: \"French Southern and Antarctic Lands (France)\",\n    zone: \"Indian/Kerguelen\",\n    flag: \"TF\",\n    cities: cityList.filter(city => city.country === \"TF\" && city.tz === \"Indian/Kerguelen\")\n  },\n  {\n    country: \"Gabon\",\n    zone: \"Africa/Libreville\",\n    flag: \"GA\",\n    cities: cityList.filter(city => city.country === \"GA\" && city.tz === \"Africa/Libreville\")\n  },\n  {\n    country: \"The Gambia\",\n    zone: \"Africa/Banjul\",\n    flag: \"GM\",\n    cities: cityList.filter(city => city.country === \"GM\" && city.tz === \"Africa/Banjul\")\n  },\n  {\n    country: \"Ghana\",\n    zone: \"Africa/Accra\",\n    flag: \"GH\",\n    cities: cityList.filter(city => city.country === \"GH\" && city.tz === \"Africa/Accra\")\n  },\n  {\n    country: \"Guinea\",\n    zone: \"Africa/Conakry\",\n    flag: \"GN\",\n    cities: cityList.filter(city => city.country === \"GN\" && city.tz === \"Africa/Conakry\")\n  },\n  {\n    country: \"Guinea-Bissau\",\n    zone: \"Africa/Bissau\",\n    flag: \"GW\",\n    cities: cityList.filter(city => city.country === \"GW\" && city.tz === \"Africa/Bissau\")\n  },\n  {\n    country: \"Kenya\",\n    zone: \"Africa/Nairobi\",\n    flag: \"KE\",\n    cities: cityList.filter(city => city.country === \"KE\" && city.tz === \"Africa/Nairobi\")\n  },\n  {\n    country: \"Lesotho\",\n    zone: \"Africa/Maseru\",\n    flag: \"LS\",\n    cities: cityList.filter(city => city.country === \"LS\" && city.tz === \"Africa/Maseru\")\n  },\n  {\n    country: \"Liberia\",\n    zone: \"Africa/Monrovia\",\n    flag: \"LR\",\n    cities: cityList.filter(city => city.country === \"LR\" && city.tz === \"Africa/Monrovia\")\n  },\n  {\n    country: \"Libya\",\n    zone: \"Africa/Tripoli\",\n    flag: \"LY\",\n    cities: cityList.filter(city => city.country === \"LY\" && city.tz === \"Africa/Tripoli\")\n  },\n  {\n    country: \"Madagascar\",\n    zone: \"Indian/Antananarivo\",\n    flag: \"MG\",\n    cities: cityList.filter(city => city.country === \"MG\" && city.tz === \"Indian/Antananarivo\")\n  },\n  {\n    country: \"Malawi\",\n    zone: \"Africa/Blantyre\",\n    flag: \"MW\",\n    cities: cityList.filter(city => city.country === \"MW\" && city.tz === \"Africa/Blantyre\")\n  },\n  {\n    country: \"Mali\",\n    zone: \"Africa/Bamako\",\n    flag: \"ML\",\n    cities: cityList.filter(city => city.country === \"ML\" && city.tz === \"Africa/Bamako\")\n  },\n  {\n    country: \"Mauritania\",\n    zone: \"Africa/Nouakchott\",\n    flag: \"MR\",\n    cities: cityList.filter(city => city.country === \"MR\" && city.tz === \"Africa/Nouakchott\")\n  },\n  {\n    country: \"Mauritius\",\n    zone: \"Indian/Mauritius\",\n    flag: \"MU\",\n    cities: cityList.filter(city => city.country === \"MU\" && city.tz === \"Indian/Mauritius\")\n  },\n  {\n    country: \"Morocco\",\n    zone: \"Africa/Casablanca\",\n    flag: \"MA\",\n    cities: cityList.filter(city => city.country === \"MA\" && city.tz === \"Africa/Casablanca\")\n  },\n  {\n    country: \"Mozambique\",\n    zone: \"Africa/Maputo\",\n    flag: \"MZ\",\n    cities: cityList.filter(city => city.country === \"MZ\" && city.tz === \"Africa/Maputo\")\n  },\n  {\n    country: \"Namibia\",\n    zone: \"Africa/Windhoek\",\n    flag: \"NA\",\n    cities: cityList.filter(city => city.country === \"NA\" && city.tz === \"Africa/Windhoek\")\n  },\n  {\n    country: \"Niger\",\n    zone: \"Africa/Niamey\",\n    flag: \"NE\",\n    cities: cityList.filter(city => city.country === \"NE\" && city.tz === \"Africa/Niamey\")\n  },\n  {\n    country: \"Nigeria\",\n    zone: \"Africa/Lagos\",\n    flag: \"NG\",\n    cities: cityList.filter(city => city.country === \"NG\" && city.tz === \"Africa/Lagos\")\n  },\n  {\n    country: \"Republic of the Congo\",\n    zone: \"Africa/Brazzaville\",\n    flag: \"CG\",\n    cities: cityList.filter(city => city.country === \"CG\" && city.tz === \"Africa/Brazzaville\")\n  },\n  {\n    country: \"Rwanda\",\n    zone: \"Africa/Kigali\",\n    flag: \"RW\",\n    cities: cityList.filter(city => city.country === \"RW\" && city.tz === \"Africa/Kigali\")\n  },\n  {\n    country: \"São Tomé and Príncipe\",\n    zone: \"Africa/Sao_Tome\",\n    flag: \"ST\",\n    cities: cityList.filter(city => city.country === \"ST\" && city.tz === \"Africa/Sao_Tome\")\n  },\n  {\n    country: \"Sahrawi Arab Democratic Republic\",\n    zone: \"Africa/El_Aaiun\",\n    flag: \"EH\",\n    cities: cityList.filter(city => city.country === \"EH\" && city.tz === \"Africa/El_Aaiun\")\n  },\n  {\n    country: \"Senegal\",\n    zone: \"Africa/Dakar\",\n    flag: \"SN\",\n    cities: cityList.filter(city => city.country === \"SN\" && city.tz === \"Africa/Dakar\")\n  },\n  {\n    country: \"Seychelles\",\n    zone: \"Indian/Mahe\",\n    flag: \"SC\",\n    cities: cityList.filter(city => city.country === \"SC\" && city.tz === \"Indian/Mahe\")\n  },\n  {\n    country: \"Sierra Leone\",\n    zone: \"Africa/Freetown\",\n    flag: \"SL\",\n    cities: cityList.filter(city => city.country === \"SL\" && city.tz === \"Africa/Freetown\")\n  },\n  {\n    country: \"Somalia\",\n    zone: \"Africa/Mogadishu\",\n    flag: \"SO\",\n    cities: cityList.filter(city => city.country === \"SO\" && city.tz === \"Africa/Mogadishu\")\n  },\n  {\n    country: \"South Africa\",\n    zone: \"Africa/Johannesburg\",\n    flag: \"ZA\",\n    cities: cityList.filter(city => city.country === \"ZA\" && city.tz === \"Africa/Johannesburg\")\n  },\n  {\n    country: \"South Sudan\",\n    zone: \"Africa/Juba\",\n    flag: \"SS\",\n    cities: cityList.filter(city => city.country === \"SS\" && city.tz === \"Africa/Juba\")\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Ceuta\"}, \n      {title: \"Melilla\"}\n    ],\n    zone: \"Africa/Ceuta\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.tz === \"Africa/Ceuta\")\n  },\n  {\n    country: \"Sudan\",\n    zone: \"Africa/Khartoum\",\n    flag: \"SD\",\n    cities: cityList.filter(city => city.country === \"SD\" && city.tz === \"Africa/Khartoum\")\n  },\n  {\n    country: \"Tanzania\",\n    zone: \"Africa/Dar_es_Salaam\",\n    flag: \"TZ\",\n    cities: cityList.filter(city => city.country === \"TZ\" && city.tz === \"Africa/Dar_es_Salaam\")\n  },\n  {\n    country: \"Togo\",\n    zone: \"Africa/Lome\",\n    flag: \"TG\",\n    cities: cityList.filter(city => city.country === \"TG\" && city.tz === \"Africa/Lome\")\n  },\n  {\n    country: \"Tunisia\",\n    zone: \"Africa/Tunis\",\n    flag: \"TN\",\n    cities: cityList.filter(city => city.country === \"TN\" && city.tz === \"Africa/Tunis\")\n  },\n  {\n    country: \"Uganda\",\n    zone: \"Africa/Kampala\",\n    flag: \"UG\",\n    cities: cityList.filter(city => city.country === \"UG\" && city.tz === \"Africa/Kampala\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"Ascension\"}, \n      {title: \"St. Helena\"}, \n      {title: \"Tristan da Cunha\"}\n    ],\n    zone: \"Atlantic/St_Helena\",\n    flag: \"GB\", // eigentlich SH, aber Flagge hier die gleiche\n    cities: cityList.filter(city => city.country === \"SH\" && city.tz === \"Atlantic/St_Helena\")\n  },\n  {\n    country: \"Zambia\",\n    zone: \"Africa/Lusaka\",\n    flag: \"ZM\",\n    cities: cityList.filter(city => city.country === \"ZM\" && city.tz === \"Africa/Lusaka\")\n  },\n  {\n    country: \"Zimbabwe\",\n    zone: \"Africa/Harare\",\n    flag: \"ZW\",\n    cities: cityList.filter(city => city.country === \"ZW\" && city.tz === \"Africa/Harare\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Casey (Australia)\"}\n    ],\n    zone: \"Antarctica/Casey\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Casey\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Davis (Australia)\"}\n    ],\n    zone: \"Antarctica/Davis\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Davis\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Dumont-d'Urville (France)\"}\n    ],\n    zone: \"Antarctica/DumontDUrville\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/DumontDUrville\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Mawson (Australia)\"}\n    ],\n    zone: \"Antarctica/Mawson\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Mawson\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"McMurdo (United States)\"}\n    ],\n    zone: \"Antarctica/McMurdo\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/McMurdo\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Palmer (United States)\"}\n    ],\n    zone: \"Antarctica/Palmer\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Palmer\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Rothera (United Kingdom)\"}\n    ],\n    zone: \"Antarctica/Rothera\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Rothera\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Shōwa (Japan)\"}\n    ],\n    zone: \"Antarctica/Syowa\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Syowa\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Troll (Norway)\"}\n    ],\n    zone: \"Antarctica/Troll\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Troll\")\n  },\n  {\n    country: \"Antarctica\",\n    subdiv: [\n      {title: \"Vostok (Russia)\"}\n    ],\n    zone: \"Antarctica/Vostok\",\n    flag: \"AQ\",\n    cities: cityList.filter(city => city.country === \"AQ\" && city.tz === \"Antarctica/Vostok\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Western Australia\", extra: \"(most of state)\"}\n    ],\n    zone: \"Australia/Perth\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Perth\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Western Australia\", extra: \"(Eucla)\"}\n    ],\n    zone: \"Australia/Eucla\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Eucla\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Northern Territory\"}\n    ],\n    zone: \"Australia/Darwin\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Darwin\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Queensland\"}\n    ],\n    zone: \"Australia/Brisbane\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Brisbane\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"South Australia\"}\n    ],\n    zone: \"Australia/Adelaide\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Adelaide\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"New South Wales\", extra: \"(most of state)\"}\n    ],\n    zone: \"Australia/Sydney\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Sydney\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Australian Capital Territory\"}\n    ],\n    zone: \"Australia/Canberra\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Canberra\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"New South Wales\", extra: \"(Yancowinna)\"}\n    ],\n    zone: \"Australia/Broken_Hill\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Broken_Hill\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Victoria\"}\n    ],\n    zone: \"Australia/Melbourne\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Melbourne\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Tasmania\"}\n    ],\n    zone: \"Australia/Hobart\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Hobart\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Lord Howe Island\"}\n    ],\n    zone: \"Australia/Lord_Howe\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Lord_Howe\")\n  },\n  {\n    country: \"Australia\",\n    subdiv: [\n      {title: \"Norfolk Island\"}\n    ],\n    zone: \"Pacific/Norfolk\",\n    flag: \"AU\",\n    cities: cityList.filter(city => city.country === \"AU\" && city.tz === \"Australia/Norfolk\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Alberta\"}, \n      {title: \"British Columbia\", extra: \"(southeast)\"}\n    ],\n    zone: \"America/Edmonton\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Edmonton\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"British Columbia\", extra: \"(most of province)\"}\n    ],\n    zone: \"America/Vancouver\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Vancouver\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Labrador\", extra: \"(most of province)\"}\n    ],\n    zone: \"America/Goose_Bay\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Goose_Bay\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Manitoba\"}\n    ],\n    zone: \"America/Winnipeg\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Winnipeg\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"New Brunswick\"}\n    ],\n    zone: \"America/Moncton\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Moncton\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Newfoundland\"}, \n      {title: \"Labrador\", extra: \"(southeast)\"}\n    ],\n    zone: \"America/St_Johns\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/St_Johns\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Northwest Territories\"}\n    ],\n    zone: \"America/Yellowknife\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Yellowknife\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nova Scotia\"}, \n      {title: \"Prince Edward Island\"}\n    ],\n    zone: \"America/Halifax\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Halifax\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(west of 102° W, Kitikmeot Region)\"}\n    ],\n    zone: \"America/Cambridge_Bay\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Cambridge_Bay\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(102° W – 85° W, Resolute, Kivalliq Region)\"}\n    ],\n    zone: \"America/Rankin_Inlet\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Rankin_Inlet\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(east of 85° W, Qikiqtaaluk Region)\"}\n    ],\n    zone: \"America/Pangnirtung\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Pangnirtung\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Nunavut\", extra: \"(Coral Harbour)\"}, \n      {title: \"Ontario\", extra: \"(Atikokan)\"}\n    ],\n    zone: \"America/Atikokan\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Atikokan\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Ontario\", extra: \"(west of 90° W)\"}\n    ],\n    zone: \"America/Rainy_River\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Rainy_River\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Ontario\", extra: \"(most of province)\"}, \n      {title: \"Québec\", extra: \"(west of 63° W)\"}\n    ],\n    zone: \"America/Toronto\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Toronto\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Québec\", extra: \"(east of 63° W)\"}\n    ],\n    zone: \"America/Blanc-Sablon\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Blanc-Sablon\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Saskatchewan\"}\n    ],\n    zone: \"America/Regina\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Regina\")\n  },\n  {\n    country: \"Canada\",\n    subdiv: [\n      {title: \"Yukon\"}\n    ],\n    zone: \"America/Whitehorse\",\n    flag: \"CA\",\n    cities: cityList.filter(city => city.country === \"CA\" && city.tz === \"America/Whitehorse\")\n  },\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"American Virgin Islands (United States)\",\n    zone: \"America/St_Thomas\",\n    flag: \"VI\",\n    cities: cityList.filter(city => city.country === \"VI\" && city.tz === \"America/St_Thomas\")\n  },\n  {\n    country: \"Anguilla (United Kingdom)\",\n    zone: \"America/Anguilla\",\n    flag: \"AI\",\n    cities: cityList.filter(city => city.country === \"AI\" && city.tz === \"America/Anguilla\")\n  },\n  {\n    country: \"Antigua and Barbuda\",\n    zone: \"America/Antigua\",\n    flag: \"AG\",\n    cities: cityList.filter(city => city.country === \"AG\" && city.tz === \"America/Antigua\")\n  },\n  {\n    country: \"Aruba (Netherlands)\",\n    zone: \"America/Aruba\",\n    flag: \"AW\",\n    cities: cityList.filter(city => city.country === \"AW\" && city.tz === \"America/Aruba\")\n  },\n  {\n    country: \"Bahamas\",\n    zone: \"America/Nassau\",\n    flag: \"BS\",\n    cities: cityList.filter(city => city.country === \"BS\" && city.tz === \"America/Nassau\")\n  },\n  {\n    country: \"Barbados\",\n    zone: \"America/Barbados\",\n    flag: \"BB\",\n    cities: cityList.filter(city => city.country === \"BB\" && city.tz === \"America/Barbados\")\n  },\n  {\n    country: \"Bermuda (United Kingdom)\",\n    zone: \"Atlantic/Bermuda\",\n    flag: \"BM\",\n    cities: cityList.filter(city => city.country === \"BM\" && city.tz === \"America/Bermuda\")\n  },\n  {\n    country: \"British Virgin Islands (United Kingdom)\",\n    zone: \"America/Tortola\",\n    flag: \"VG\",\n    cities: cityList.filter(city => city.country === \"VG\" && city.tz === \"America/Tortola\")\n  },\n  {\n    country: \"Cayman Islands (United Kingdom)\",\n    zone: \"America/Cayman\",\n    flag: \"KY\",\n    cities: cityList.filter(city => city.country === \"KY\" && city.tz === \"America/Cayman\")\n  },\n  {\n    country: \"Cuba\",\n    zone: \"America/Havana\",\n    flag: \"CU\",\n    cities: cityList.filter(city => city.country === \"CU\" && city.tz === \"America/Havana\")\n  },\n  {\n    country: \"Curaçao (Netherlands)\",\n    zone: \"America/Curacao\",\n    flag: \"CW\",\n    cities: cityList.filter(city => city.country === \"CW\" && city.tz === \"America/Curacao\")\n  },\n  {\n    country: \"Dominica\",\n    zone: \"America/Dominica\",\n    flag: \"DM\",\n    cities: cityList.filter(city => city.country === \"DM\" && city.tz === \"America/Dominica\")\n  },\n  {\n    country: \"Dominican Republic\",\n    zone: \"America/Santo_Domingo\",\n    flag: \"DO\",\n    cities: cityList.filter(city => city.country === \"DO\" && city.tz === \"America/Santo_Domingo\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Guadeloupe\"}\n    ],\n    zone: \"America/Guadeloupe\",\n    flag: \"FR\", // eigentlich GP\n    cities: cityList.filter(city => city.country === \"GP\" && city.tz === \"America/Guadeloupe\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Saint-Martin\"}\n    ],\n    zone: \"America/Marigot\",\n    flag: \"FR\", // eigentlich MF\n    cities: cityList.filter(city => city.country === \"MF\" && city.tz === \"America/Marigot\")\n  },\n  {\n    country: \"Saint-Barthélemy (France)\",\n    zone: \"America/St_Barthelemy\",\n    flag: \"BL\",\n    cities: cityList.filter(city => city.country === \"BL\" && city.tz === \"America/St_Barthelemy\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Saint-Pierre and Miquelon\"}\n    ],\n    zone: \"America/Miquelon\",\n    flag: \"FR\", // eigentlich DF\n    cities: cityList.filter(city => city.country === \"DF\" && city.tz === \"America/Miquelon\")\n  },\n  {\n    country: \"Grenada\",\n    zone: \"America/Grenada\",\n    flag: \"GD\",\n    cities: cityList.filter(city => city.country === \"GD\" && city.tz === \"America/Grenada\")\n  },\n  {\n    country: \"Haiti\",\n    zone: \"America/Port-au-Prince\",\n    flag: \"HT\",\n    cities: cityList.filter(city => city.country === \"HT\" && city.tz === \"America/Port-au-Prince\")\n  },\n  {\n    country: \"Jamaica\",\n    zone: \"America/Jamaica\",\n    flag: \"JM\",\n    cities: cityList.filter(city => city.country === \"JM\" && city.tz === \"America/Jamaica\")\n  },\n  {\n    country: \"Martinique (France)\",\n    zone: \"America/Martinique\",\n    flag: \"MQ\",\n    cities: cityList.filter(city => city.country === \"MQ\" && city.tz === \"America/Martinique\")\n  },\n  {\n    country: \"Montserrat (United Kingdom)\",\n    zone: \"America/Montserrat\",\n    flag: \"MS\",\n    cities: cityList.filter(city => city.country === \"MS\" && city.tz === \"America/Montserrat\")\n  },\n  {\n    country: \"Netherlands\",\n    subdiv: [\n      {title: \"Bonaire\"}, \n      {title: \"Saba\"}, \n      {title: \"Sint Eustatius\"}\n    ],\n    zone: \"America/Kralendijk\",\n    flag: \"NL\", // eigentlich BQ\n    cities: cityList.filter(city => city.country === \"BQ\" && city.tz === \"America/Kralendijk\")\n  },\n  {\n    country: \"Puerto Rico (United States)\",\n    zone: \"America/Puerto_Rico\",\n    flag: \"PR\",\n    cities: cityList.filter(city => city.country === \"PR\" && city.tz === \"America/Puerto_Rico\")\n  },\n  {\n    country: \"Saint Kitts and Nevis\",\n    zone: \"America/St_Kitts\",\n    flag: \"KN\",\n    cities: cityList.filter(city => city.country === \"KN\" && city.tz === \"America/St_Kitts\")\n  },\n  {\n    country: \"Saint Lucia\",\n    zone: \"America/St_Lucia\",\n    flag: \"LC\",\n    cities: cityList.filter(city => city.country === \"LC\" && city.tz === \"America/St_Lucia\")\n  },\n  {\n    country: \"Saint Vincent and the Grenadines\",\n    zone: \"America/St_Vincent\",\n    flag: \"VC\",\n    cities: cityList.filter(city => city.country === \"VC\" && city.tz === \"America/St_Vincent\")\n  },\n  {\n    country: \"Sint Maarten (Netherlands)\",\n    zone: \"America/Lower_Princes\",\n    flag: \"SX\",\n    cities: cityList.filter(city => city.country === \"SX\" && city.tz === \"America/Lower_Princes\")\n  },\n  {\n    country: \"Trinidad and Tobago\",\n    zone: \"America/Port_of_Spain\",\n    flag: \"TT\",\n    cities: cityList.filter(city => city.country === \"TT\" && city.tz === \"America/Port_of_Spain\")\n  },\n  {\n    country: \"Turks and Caicos Islands (United Kingdom)\",\n    zone: \"America/Grand_Turk\",\n    flag: \"TC\",\n    cities: cityList.filter(city => city.country === \"TC\" && city.tz === \"America/Grand_Turk\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Belize\",\n    zone: \"America/Belize\",\n    flag: \"BZ\",\n    cities: cityList.filter(city => city.country === \"BZ\" && city.tz === \"America/Belize\")\n  },\n  {\n    country: \"Costa Rica\",\n    zone: \"America/Costa_Rica\",\n    flag: \"CR\",\n    cities: cityList.filter(city => city.country === \"CR\" && city.tz === \"America/Costa_Rica\")\n  },\n  {\n    country: \"El Salvador\",\n    zone: \"America/El_Salvador\",\n    flag: \"SV\",\n    cities: cityList.filter(city => city.country === \"SV\" && city.tz === \"America/El_Salvador\")\n  },\n  {\n    country: \"Guatemala\",\n    zone: \"America/Guatemala\",\n    flag: \"GT\",\n    cities: cityList.filter(city => city.country === \"GT\" && city.tz === \"America/Guatemala\")\n  },\n  {\n    country: \"Honduras\",\n    zone: \"America/Tegucigalpa\",\n    flag: \"HN\",\n    cities: cityList.filter(city => city.country === \"HN\" && city.tz === \"America/Tegucigalpa\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Aguascalientes\"}, \n      {title: \"Campeche\"}, \n      {title: \"Chiapas\"}, \n      {title: \"Coahuila\"}, \n      {title: \"Colima\"}, \n      {title: \"Distrito Federal\"}, \n      {title: \"Durango\"}, \n      {title: \"Guanajuato\"}, \n      {title: \"Guerrero\"}, \n      {title: \"Hidalgo\"}, \n      {title: \"Jalisco\"}, \n      {title: \"México\"}, \n      {title: \"Michoacán\"}, \n      {title: \"Morelos\"}, \n      {title: \"Nuevo León\"}, \n      {title: \"Oaxaca\"}, \n      {title: \"Puebla\"}, \n      {title: \"Querétaro\"}, \n      {title: \"San Luis Potosí\"}, \n      {title: \"Tabasco\"}, \n      {title: \"Tamaulipas\"}, \n      {title: \"Tlaxcala\"}, \n      {title: \"Veracruz\"}, \n      {title: \"Yucatán\"}, \n      {title: \"Zacatecas\"}\n    ],\n    zone: \"America/Mexico_City\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Mexico_City\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Baja California\"}\n    ],\n    zone: \"America/Tijuana\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Tijuana\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Baja California Sur\"},\n      {title: \"Chihuahua\"},\n      {title: \"Nayarit\"},\n      {title: \"Sinaloa\"}\n    ],\n    zone: \"America/Mazatlan\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Mazatlan\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Quintana Roo\"}\n    ],\n    zone: \"America/Cancun\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Cancun\")\n  },\n  {\n    country: \"Mexico\",\n    subdiv: [\n      {title: \"Sonora\"},\n      {title: \"Revillagigedo Islands\"}\n    ],\n    zone: \"America/Hermosillo\",\n    flag: \"MX\",\n    cities: cityList.filter(city => city.country === \"MX\" && city.tz === \"America/Hermosillo\")\n  },\n  {\n    country: \"Nicaragua\",\n    zone: \"America/Managua\",\n    flag: \"NI\",\n    cities: cityList.filter(city => city.country === \"NI\" && city.tz === \"America/Managua\")\n  },\n  {\n    country: \"Panama\",\n    zone: \"America/Panama\",\n    flag: \"PA\",\n    cities: cityList.filter(city => city.country === \"PA\" && city.tz === \"America/Panama\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Akmola Region\"}, \n      {title: \"Almaty Region\"}, \n      {title: \"East Kazakhstan Region\"}, \n      {title: \"Jambyl Region\"}, \n      {title: \"Karaganda Region\"}, \n      {title: \"North Kazakhstan Region\"}, \n      {title: \"Pavlodar Region\"}, \n      {title: \"Turkistan Region\"}\n    ],\n    zone: \"Asia/Almaty\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Almaty\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Kostanay Region\"}\n    ],\n    zone: \"Asia/Qostanay\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Qostanay\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Kyzylorda Region\"}\n    ],\n    zone: \"Asia/Qyzylorda\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Qyzylorda\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Aktobe Region\"}\n    ],\n    zone: \"Asia/Aqtobe\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Aqtobe\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Atyrau Region\"}\n    ],\n    zone: \"Asia/Atyrau\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Atyrau\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"Mangystau Region\"}\n    ],\n    zone: \"Asia/Aqtau\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Aqtau\")\n  },\n  {\n    country: \"Kazakhstan\",\n    subdiv: [\n      {title: \"West Kazakhstan Region\"}\n    ],\n    zone: \"Asia/Oral\",\n    flag: \"KZ\",\n    cities: cityList.filter(city => city.country === \"KZ\" && city.tz === \"Asia/Oral\")\n  },\n  {\n    country: \"Kyrgyzstan\",\n    zone: \"Asia/Bishkek\",\n    flag: \"KG\",\n    cities: cityList.filter(city => city.country === \"KG\" && city.tz === \"Asia/Bishkek\")\n  },\n  {\n    country: \"Tajikistan\",\n    zone: \"Asia/Dushanbe\",\n    flag: \"TJ\",\n    cities: cityList.filter(city => city.country === \"TJ\" && city.tz === \"Asia/Dushanbe\")\n  },\n  {\n    country: \"Turkmenistan\",\n    zone: \"Asia/Ashgabat\",\n    flag: \"TM\",\n    cities: cityList.filter(city => city.country === \"TM\" && city.tz === \"Asia/Ashgabat\")\n  },\n  {\n    country: \"Uzbekistan\",\n    zone: \"Asia/Tashkent\",\n    flag: \"UZ\",\n    cities: cityList.filter(city => city.country === \"UZ\" && city.tz === \"Asia/Tashkent\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"China\",\n    zone: \"Asia/Shanghai\",\n    flag: \"CN\",\n    cities: cityList.filter(city => city.country === \"CN\" && city.tz === \"Asia/Shanghai\")\n  },\n  {\n    country: \"China\",\n    subdiv: [\n      {title: \"Xinjiang\"}\n    ],\n    zone: \"Asia/Urumqi\",\n    flag: \"CN\",\n    cities: cityList.filter(city => city.country === \"CN\" && city.tz === \"Asia/Urumqi\")\n  },\n  {\n    country: \"Hong Kong (China)\",\n    zone: \"Asia/Hong_Kong\",\n    flag: \"HK\",\n    cities: cityList.filter(city => city.country === \"HK\" && city.tz === \"Asia/Hong_Kong\")\n  },\n  {\n    country: \"Japan\",\n    zone: \"Asia/Tokyo\",\n    flag: \"JP\",\n    cities: cityList.filter(city => city.country === \"JP\" && city.tz === \"Asia/Tokyo\")\n  },\n  {\n    country: \"Macau (China)\",\n    zone: \"Asia/Macau\",\n    flag: \"MO\",\n    cities: cityList.filter(city => city.country === \"MO\" && city.tz === \"Asia/Macau\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Arkhangai\"}, \n      {title: \"Bayankhongor\"}, \n      {title: \"Bulgan\"}, \n      {title: \"Darkhan-Uul\"}, \n      {title: \"Dornogovi\"}, \n      {title: \"Dundgovi\"}, \n      {title: \"Govisümber\"}, \n      {title: \"Khentii\"}, \n      {title: \"Khövsgöl\"}, \n      {title: \"Orkhon\"}, \n      {title: \"Selenge\"}, \n      {title: \"Töv\"}, \n      {title: \"Ömnögovi\"}, \n      {title: \"Övörkhanghai\"}\n    ],\n    zone: \"Asia/Ulaanbaatar\",\n    flag: \"MN\",\n    cities: cityList.filter(city => city.country === \"MN\" && city.tz === \"Asia/Ulaanbaatar\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Dornod\"}, \n      {title: \"Sükhbaatar\"}\n    ],\n    zone: \"Asia/Choibalsan\",\n    flag: \"MN\",\n    cities: cityList.filter(city => city.country === \"MN\" && city.tz === \"Asia/Choibalsan\")\n  },\n  {\n    country: \"Mongolia\",\n    subdiv: [\n      {title: \"Bayan-Ölgii\"}, \n      {title: \"Govi-Altai\"}, \n      {title: \"Khovd\"}, \n      {title: \"Uvs\"}, \n      {title: \"Zavkhan\"}\n    ],\n    zone: \"Asia/Hovd\",\n    flag: \"MN\",\n    cities: cityList.filter(city => city.country === \"MN\" && city.tz === \"Asia/Hovd\")\n  },\n  {\n    country: \"North Korea\",\n    zone: \"Asia/Pyongyang\",\n    flag: \"KP\",\n    cities: cityList.filter(city => city.country === \"KP\" && city.tz === \"Asia/Pyongyang\")\n  },\n  {\n    country: \"South Korea\",\n    zone: \"Asia/Seoul\",\n    flag: \"KR\",\n    cities: cityList.filter(city => city.country === \"KR\" && city.tz === \"Asia/Seoul\")\n  },\n  {\n    country: \"Taiwan\",\n    zone: \"Asia/Taipei\",\n    flag: \"TW\",\n    cities: cityList.filter(city => city.country === \"TW\" && city.tz === \"Asia/Taipei\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Åland (Finland)\",\n    zone: \"Europe/Mariehamn\",\n    flag: \"AX\",\n    cities: cityList.filter(city => city.country === \"AX\" && city.tz === \"Europe/Mariehamn\")\n  },\n  {\n    country: \"Albania\",\n    zone: \"Europe/Tirane\",\n    flag: \"AL\",\n    cities: cityList.filter(city => city.country === \"AL\" && city.tz === \"Europe/Tirane\")\n  },\n  {\n    country: \"Andorra\",\n    zone: \"Europe/Andorra\",\n    flag: \"AD\",\n    cities: cityList.filter(city => city.country === \"AD\" && city.tz === \"Europe/Andorra\")\n  },\n  {\n    country: \"Austria\",\n    zone: \"Europe/Vienna\",\n    flag: \"AT\",\n    cities: cityList.filter(city => city.country === \"AT\" && city.tz === \"Europe/Vienna\")\n  },\n  {\n    country: \"Belarus\",\n    zone: \"Europe/Minsk\",\n    flag: \"BY\",\n    cities: cityList.filter(city => city.country === \"BY\" && city.tz === \"Europe/Minsk\")\n  },\n  {\n    country: \"Belgium\",\n    zone: \"Europe/Brussels\",\n    flag: \"BE\",\n    cities: cityList.filter(city => city.country === \"BE\" && city.tz === \"Europe/Brussels\")\n  },\n  {\n    country: \"Bosnia and Herzegovina\",\n    zone: \"Europe/Sarajevo\",\n    flag: \"BA\",\n    cities: cityList.filter(city => city.country === \"BA\" && city.tz === \"Europe/Sarajevo\")\n  },\n  {\n    country: \"Bulgaria\",\n    zone: \"Europe/Sofia\",\n    flag: \"BG\",\n    cities: cityList.filter(city => city.country === \"BG\" && city.tz === \"Europe/Sofia\")\n  },\n  {\n    country: \"Croatia\",\n    zone: \"Europe/Zagreb\",\n    flag: \"HR\",\n    cities: cityList.filter(city => city.country === \"HR\" && city.tz === \"Europe/Zagreb\")\n  },\n  {\n    country: \"Cyprus\",\n    subdiv: [\n      {title: \"Republic of Cyprus\"}\n    ],\n    zone: \"Asia/Nicosia\",\n    flag: \"CY\",\n    cities: cityList.filter(city => city.country === \"CY\" && city.tz === \"Asia/Nicosia\")\n  },\n  {\n    country: \"Cyprus\",\n    subdiv: [\n      {title: \"Turkish Republic of Northern Cyprus\"}\n    ],\n    zone: \"Asia/Famagusta\",\n    flag: \"CY\",\n    cities: cityList.filter(city => city.country === \"CY\" && city.tz === \"Asia/Famagusta\")\n  },\n  {\n    country: \"Czechia\",\n    zone: \"Europe/Prague\",\n    flag: \"CZ\",\n    cities: cityList.filter(city => city.country === \"CZ\" && city.tz === \"Europe/Prague\")\n  },\n  {\n    country: \"Denmark\",\n    subdiv: [\n      {title: \"Hovedstaden\"},\n      {title: \"Midtjylland\"},\n      {title: \"Nordjylland\"},\n      {title: \"Sjælland\"},\n      {title: \"Syddanmark\"},\n    ],\n    zone: \"Europe/Copenhagen\",\n    flag: \"DK\",\n    cities: cityList.filter(city => city.country === \"DK\" && city.tz === \"Europe/Copenhagen\")\n  },\n  {\n    country: \"Estonia\",\n    zone: \"Europe/Tallinn\",\n    flag: \"EE\",\n    cities: cityList.filter(city => city.country === \"EE\" && city.tz === \"Europe/Tallinn\")\n  },\n  {\n    country: \"Faroe Islands (Denmark)\",\n    zone: \"Atlantic/Faroe\",\n    flag: \"FO\",\n    cities: cityList.filter(city => city.country === \"FO\" && city.tz === \"Atlantic/Faroe\")\n  },\n  {\n    country: \"Finland\",\n    zone: \"Europe/Helsinki\",\n    flag: \"FI\",\n    cities: cityList.filter(city => city.country === \"FI\" && city.tz === \"Europe/Helsinki\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"Auvergne-Rhône-Alpes\"},\n      {title: \"Bourgogne-Franche-Comté\"},\n      {title: \"Bretagne\"},\n      {title: \"Centre-Val de Loire\"},\n      {title: \"Corse\"},\n      {title: \"Grand Est\"},\n      {title: \"Hauts-de-France\"},\n      {title: \"Île-de-France\"},\n      {title: \"Normandie\"},\n      {title: \"Nouvelle-Aquitaine\"},\n      {title: \"Occitanie\"},\n      {title: \"Pays de la Loire\"},\n      {title: \"Provence-Alpes-Côte d'Azur\"}\n    ],\n    zone: \"Europe/Paris\",\n    flag: \"FR\",\n    cities: cityList.filter(city => city.country === \"FR\" && city.tz === \"Europe/Paris\")\n  },\n  {\n    country: \"Germany\",\n    zone: \"Europe/Berlin\",\n    flag: \"DE\",\n    cities: cityList.filter(city => city.country === \"DE\" && city.tz === \"Europe/Berlin\")\n  },\n  {\n    country: \"Gibraltar (United Kingdom)\",\n    zone: \"Europe/Gibraltar\",\n    flag: \"GI\",\n    cities: cityList.filter(city => city.country === \"GI\" && city.tz === \"Europe/Gibraltar\")\n  },\n  {\n    country: \"Greece\",\n    zone: \"Europe/Athens\",\n    flag: \"GR\",\n    cities: cityList.filter(city => city.country === \"GR\" && city.tz === \"Europe/Athens\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Danmarkshavn\"}\n    ],\n    zone: \"America/Danmarkshavn\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Danmarkshavn\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Ittoqqortoormit\"}, \n      {title: \"Scoresbysund\"}\n    ],\n    zone: \"America/Scoresbysund\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Scoresbysund\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Thule\"}, \n      {title: \"Pituffik\"}\n    ],\n    zone: \"America/Thule\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Thule\")\n  },\n  {\n    country: \"Greenland (Denmark)\",\n    subdiv: [\n      {title: \"Western Greenland\"}\n    ],\n    zone: \"America/Godthab\",\n    flag: \"GL\",\n    cities: cityList.filter(city => city.country === \"GL\" && city.tz === \"America/Nuuk\")\n  },\n  {\n    country: \"Guernsey (United Kingdom)\",\n    zone: \"Europe/Guernsey\",\n    flag: \"GG\",\n    cities: cityList.filter(city => city.country === \"GG\" && city.tz === \"Europe/Guernsey\")\n  },\n  {\n    country: \"Hungary\",\n    zone: \"Europe/Budapest\",\n    flag: \"HU\",\n    cities: cityList.filter(city => city.country === \"HU\" && city.tz === \"Europe/Budapest\")\n  },\n  {\n    country: \"Iceland\",\n    zone: \"Atlantic/Reykjavik\",\n    flag: \"IS\",\n    cities: cityList.filter(city => city.country === \"IS\" && city.tz === \"Atlantic/Reykjavik\")\n  },\n  {\n    country: \"Ireland\",\n    zone: \"Europe/Dublin\",\n    flag: \"IE\",\n    cities: cityList.filter(city => city.country === \"IE\" && city.tz === \"Europe/Dublin\")\n  },\n  {\n    country: \"Isle of Man (United Kingdom)\",\n    zone: \"Europe/Isle_of_Man\",\n    flag: \"IM\",\n    cities: cityList.filter(city => city.country === \"IM\" && city.tz === \"Europe/Isle_of_Man\")\n  },\n  {\n    country: \"Italy\",\n    zone: \"Europe/Rome\",\n    flag: \"IT\",\n    cities: cityList.filter(city => city.country === \"IT\" && city.tz === \"Europe/Rome\")\n  },\n  {\n    country: \"Jersey (United Kingdom)\",\n    zone: \"Europe/Jersey\",\n    flag: \"JE\",\n    cities: cityList.filter(city => city.country === \"JE\" && city.tz === \"Europe/Jersey\")\n  },\n  {\n    country: \"Kosovo\",\n    zone: \"Europe/Belgrade\",  // no explicit timezone for Kosovo/Pristina\n    flag: \"XK\",\n    cities: cityList.filter(city => city.country === \"XK\" && city.tz === \"Europe/Belgrade\")\n  },\n  {\n    country: \"Latvia\",\n    zone: \"Europe/Riga\",\n    flag: \"LV\",\n    cities: cityList.filter(city => city.country === \"LV\" && city.tz === \"Europe/Riga\")\n  },\n  {\n    country: \"Liechtenstein\",\n    zone: \"Europe/Vaduz\",\n    flag: \"LI\",\n    cities: cityList.filter(city => city.country === \"LI\" && city.tz === \"Europe/Vaduz\")\n  },\n  {\n    country: \"Lithuania\",\n    zone: \"Europe/Vilnius\",\n    flag: \"LT\",\n    cities: cityList.filter(city => city.country === \"LT\" && city.tz === \"Europe/Vilnius\")\n  },\n  {\n    country: \"Luxembourg\",\n    zone: \"Europe/Luxembourg\",\n    flag: \"LU\",\n    cities: cityList.filter(city => city.country === \"LU\" && city.tz === \"Europe/Luxembourg\")\n  },\n  {\n    country: \"Malta\",\n    zone: \"Europe/Malta\",\n    flag: \"MT\",\n    cities: cityList.filter(city => city.country === \"MT\" && city.tz === \"Europe/Malta\")\n  },\n  {\n    country: \"Moldova\",\n    subdiv: [\n      {title: \"Bălți\"}, \n      {title: \"Chişinău\"}, \n      {title: \"Comrat\"}\n    ],\n    zone: \"Europe/Chisinau\",\n    flag: \"MD\",\n    cities: cityList.filter(city => city.country === \"MD\" && city.tz === \"Europe/Chisinau\")\n  },\n  {\n    country: \"Moldova\",\n    subdiv: [\n      {title: \"Bender\"}, \n      {title: \"Tiraspol\"}\n    ],\n    zone: \"Europe/Tiraspol\",\n    flag: \"MD\",\n    cities: cityList.filter(city => city.country === \"MD\" && city.tz === \"Europe/Tiraspol\")\n  },\n  {\n    country: \"Monaco\",\n    zone: \"Europe/Monaco\",\n    flag: \"MC\",\n    cities: cityList.filter(city => city.country === \"MC\" && city.tz === \"Europe/Monaco\")\n  },\n  {\n    country: \"Montenegro\",\n    zone: \"Europe/Podgorica\",\n    flag: \"ME\",\n    cities: cityList.filter(city => city.country === \"ME\" && city.tz === \"Europe/Podgorica\")\n  },\n  {\n    country: \"Netherlands\",\n    zone: \"Europe/Amsterdam\",\n    flag: \"NL\",\n    cities: cityList.filter(city => city.country === \"NL\" && city.tz === \"Europe/Amsterdam\")\n  },\n  {\n    country: \"North Macedonia\",\n    zone: \"Europe/Skopje\",\n    flag: \"MK\",\n    cities: cityList.filter(city => city.country === \"MK\" && city.tz === \"Europe/Skopje\")\n  },\n  {\n    country: \"Norway\",\n    subdiv: [\n      {title: \"Agder\"},\n      {title: \"Innlandet\"},\n      {title: \"Møre og Romsdal\"},\n      {title: \"Nordland\"},\n      {title: \"Oslo\"},\n      {title: \"Rogaland\"},\n      {title: \"Troms og Finnmark\"},\n      {title: \"Trøndelag\"},\n      {title: \"Vestfold og Telemark\"},\n      {title: \"Vestland\"},\n      {title: \"Viken\"},\n    ],\n    zone: \"Europe/Oslo\",\n    flag: \"NO\",\n    cities: cityList.filter(city => city.country === \"NO\" && city.tz === \"Europe/Oslo\")\n  },\n  {\n    country: \"Svalbard and Jan Mayen (Norway)\",\n    subdiv: [\n      {title: \"Jan Mayen\"}\n    ],\n    zone: \"Atlantic/Jan_Mayen\",\n    flag: \"NO\", // eigentlich SJ\n    cities: cityList.filter(city => city.country === \"SV\" && city.tz === \"Atlantic/Jan_Mayen\")\n  },\n  {\n    country: \"Svalbard and Jan Mayen (Norway)\",\n    subdiv: [\n      {title: \"Svalbard\"}\n    ],\n    zone: \"Arctic/Longyearbyen\",\n    flag: \"NO\", // eigentlich SJ\n    cities: cityList.filter(city => city.country === \"SV\" && city.tz === \"Arctic/Longyearbyen\")\n  },\n  {\n    country: \"Poland\",\n    zone: \"Europe/Warsaw\",\n    flag: \"PL\",\n    cities: cityList.filter(city => city.country === \"PL\" && city.tz === \"Europe/Warsaw\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Alentejo Region\"},\n      {title: \"Algarve\"},\n      {title: \"Central Portugal\"},\n      {title: \"Lisboa Region\"},\n      {title: \"Northern Portugal\"},\n    ],\n    zone: \"Europe/Lisbon\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.tz === \"Europe/Lisbon\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Madeira\"}\n    ],\n    zone: \"Atlantic/Madeira\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.tz === \"Atlantic/Madeira\")\n  },\n  {\n    country: \"Portugal\",\n    subdiv: [\n      {title: \"Azores\"}\n    ],\n    zone: \"Atlantic/Azores\",\n    flag: \"PT\",\n    cities: cityList.filter(city => city.country === \"PT\" && city.tz === \"Atlantic/Azores\")\n  },\n  {\n    country: \"Romania\",\n    zone: \"Europe/Bucharest\",\n    flag: \"RO\",\n    cities: cityList.filter(city => city.country === \"RO\" && city.tz === \"Europe/Bucharest\")\n  },\n  {\n    country: \"San Marino\",\n    zone: \"Europe/San_Marino\",\n    flag: \"SM\",\n    cities: cityList.filter(city => city.country === \"SM\" && city.tz === \"Europe/San_Marino\")\n  },\n  {\n    country: \"Serbia\",\n    zone: \"Europe/Belgrade\",\n    flag: \"RS\",\n    cities: cityList.filter(city => city.country === \"RS\" && city.tz === \"Europe/Belgrade\")\n  },\n  {\n    country: \"Slovakia\",\n    zone: \"Europe/Bratislava\",\n    flag: \"SK\",\n    cities: cityList.filter(city => city.country === \"SK\" && city.tz === \"Europe/Bratislava\")\n  },\n  {\n    country: \"Slovenia\",\n    zone: \"Europe/Ljubljana\",\n    flag: \"SI\"\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Andalusia\"},\n      {title: \"Aragon\"},\n      {title: \"Balearic Islands\"},\n      {title: \"Basque Country\"},\n      {title: \"Cantabria\"},\n      {title: \"Castile and León\"},\n      {title: \"Castilla-La Mancha\"},\n      {title: \"Catalonia\"},\n      {title: \"Chartered Community of Navarre\"},\n      {title: \"Community of Madrid\"},\n      {title: \"Extremadura\"},\n      {title: \"Galicia\"},\n      {title: \"La Rioja\"},\n      {title: \"Principality of Asturias\"},\n      {title: \"Region of Murcia\"},\n      {title: \"Valencian Community\"},\n    ],\n    zone: \"Europe/Madrid\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.tz === \"Europe/Madrid\")\n  },\n  {\n    country: \"Spain\",\n    subdiv: [\n      {title: \"Canary Islands\"}\n    ],\n    zone: \"Atlantic/Canary\",\n    flag: \"ES\",\n    cities: cityList.filter(city => city.country === \"ES\" && city.tz === \"Atlantic/Canary\")\n  },\n  {\n    country: \"Sweden\",\n    zone: \"Europe/Stockholm\",\n    flag: \"SE\",\n    cities: cityList.filter(city => city.country === \"SE\" && city.tz === \"Europe/Stockholm\")\n  },\n  {\n    country: \"Switzerland\",\n    zone: \"Europe/Zurich\",\n    flag: \"CH\",\n    cities: cityList.filter(city => city.country === \"CH\" && city.tz === \"Europe/Zurich\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"England\"}, \n      {title: \"Scotland\"}, \n      {title: \"Wales\"}\n    ],\n    zone: \"Europe/London\",\n    flag: \"GB\",\n    cities: cityList.filter(city => city.country === \"GB\" && city.tz === \"Europe/London\")\n  },\n  {\n    country: \"United Kingdom\",\n    subdiv: [\n      {title: \"Northern Ireland\"}\n    ],\n    zone: \"Europe/Belfast\",\n    flag: \"GB\",\n    cities: cityList.filter(city => city.country === \"GB\" && city.tz === \"Europe/Belfast\")\n  },\n  {\n    country: \"Ukraine\",\n    subdiv: [\n      {title: \"Cherkasy Oblast\"}, // 01\n      {title: \"Chernihiv Oblast\"}, // 02\n      {title: \"Chernivtsi Oblast\"}, // 03\n      {title: \"Dnipro Oblast\"}, // 04\n      {title: \"Donetsk Oblast\", extra: \"(only partly controlled by Ukraine)\"}, // 05\n      {title: \"Ivano-Frankivsk Oblast\"}, // 06\n      {title: \"Kharkiv Oblast\"}, // 07\n      {title: \"Kherson Oblast\"}, // 08\n      {title: \"Khmelnytskyy Oblast\"}, // 09\n      {title: \"Kirovohrad Oblast\"}, // 10\n      {title: \"Kyyiv\"}, // 12\n      {title: \"Kyiv Oblast\"}, // 13\n      {title: \"Luhansk Oblast\", extra: \"(only partly controlled by Ukraine)\"}, // 14\n      {title: \"Lviv Oblast\"}, // 15\n      {title: \"Mykolayiv Oblast\"}, // 16\n      {title: \"Odesa Oblast\"}, // 17\n      {title: \"Poltava Oblast\"}, // 18\n      {title: \"Rivne Oblast\"}, // 19\n      {title: \"Sumy Oblast\"}, // 21\n      {title: \"Ternopil Oblast\"}, // 22\n      {title: \"Vinnitsya Oblast\"}, // 23\n      {title: \"Volyn Oblast\"}, // 24\n      {title: \"Zakarpattya Oblast\"}, // 25\n      {title: \"Zaporizhzhya Oblast\"}, // 26\n      {title: \"Zhytomyr Oblast\"}, // 27\n    ],\n    zone: \"Europe/Kiev\",\n    flag: \"UA\",\n    cities: cityList.filter(city => city.country === \"UA\" && city.tz === \"Europe/Kiev\")\n  },\n  {\n    country: \"Ukraine\",\n    subdiv: [\n      {title: \"Sevastopol\", extra: \"(controlled by Russia)\"}, \n      {title: \"Crimea Autonomous Republic\", extra: \"(controlled by Russia)\"}\n    ],\n    zone: \"Europe/Simferopol\",\n    flag: \"UA\",\n    cities: cityList.filter(city => city.country === \"UA\" && city.tz === \"Europe/Simferopol\")\n  },\n  {\n    country: \"Vatican City\",\n    zone: \"Europe/Vatican\",\n    flag: \"VA\",\n    cities: cityList.filter(city => city.country === \"VA\" && city.tz === \"Europe/Vatican\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Bali\"}, \n      {title: \"East Kalimantan\"}, \n      {title: \"East Nusa Tenggara\"}, \n      {title: \"North Kalimantan\"}, \n      {title: \"South Kalimantan\"}, \n      {title: \"Sulawesi\"}, \n      {title: \"West Nusa Tenggara\"}\n    ],\n    zone: \"Asia/Makassar\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Makassar\")\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Java\"}, \n      {title: \"Sumatra\"}\n    ],\n    zone: \"Asia/Jakarta\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Jakarta\")\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Central Kalimantan\"}, \n      {title: \"West Kalimantan\"}\n    ],\n    zone: \"Asia/Pontianak\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Pontianak\")\n  },\n  {\n    country: \"Indonesia\",\n    subdiv: [\n      {title: \"Maluku\"}, \n      {title: \"North Maluku\"}, \n      {title: \"Papua\"}, \n      {title: \"West Papua\"}\n    ],\n    zone: \"Asia/Jayapura\",\n    flag: \"ID\",\n    cities: cityList.filter(city => city.country === \"ID\" && city.tz === \"Asia/Jayapura\")\n  },\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Afghanistan\",\n    zone: \"Asia/Kabul\",\n    flag: \"AF\",\n    cities: cityList.filter(city => city.country === \"AF\" && city.tz === \"Asia/Kabul\")\n  },\n  {\n    country: \"Armenia\",\n    zone: \"Asia/Yerevan\",\n    flag: \"AM\",\n    cities: cityList.filter(city => city.country === \"AM\" && city.tz === \"Asia/Yerevan\")\n  },\n  {\n    country: \"Azerbaijan\",\n    zone: \"Asia/Baku\",\n    flag: \"AZ\",\n    cities: cityList.filter(city => city.country === \"AZ\" && city.tz === \"Asia/Baku\")\n  },\n  {\n    country: \"Bahrain\",\n    zone: \"Asia/Bahrain\",\n    flag: \"BH\",\n    cities: cityList.filter(city => city.country === \"BH\" && city.tz === \"Asia/Bahrain\")\n  },\n  {\n    country: \"Georgia\",\n    zone: \"Asia/Tbilisi\",\n    flag: \"GE\",\n    cities: cityList.filter(city => city.country === \"GE\" && city.tz === \"Asia/Tbilisi\")\n  },\n  {\n    country: \"Iran\",\n    zone: \"Asia/Tehran\",\n    flag: \"IR\",\n    cities: cityList.filter(city => city.country === \"IR\" && city.tz === \"Asia/Tehran\")\n  },\n  {\n    country: \"Iraq\",\n    zone: \"Asia/Baghdad\",\n    flag: \"IQ\",\n    cities: cityList.filter(city => city.country === \"IQ\" && city.tz === \"Asia/Baghdad\")\n  },\n  {\n    country: \"Israel\",\n    zone: \"Asia/Jerusalem\",\n    flag: \"IL\",\n    cities: cityList.filter(city => city.country === \"IL\" && city.tz === \"Asia/Jerusalem\")\n  },\n  {\n    country: \"Jordan\",\n    zone: \"Asia/Amman\",\n    flag: \"JO\",\n    cities: cityList.filter(city => city.country === \"JO\" && city.tz === \"Asia/Amman\")\n  },\n  {\n    country: \"Kuwait\",\n    zone: \"Asia/Kuwait\",\n    flag: \"KW\",\n    cities: cityList.filter(city => city.country === \"KW\" && city.tz === \"Asia/Kuwait\")\n  },\n  {\n    country: \"Lebanon\",\n    zone: \"Asia/Beirut\",\n    flag: \"LB\",\n    cities: cityList.filter(city => city.country === \"LB\" && city.tz === \"Asia/Beirut\")\n  },\n  {\n    country: \"Oman\",\n    zone: \"Asia/Muscat\",\n    flag: \"OM\",\n    cities: cityList.filter(city => city.country === \"OM\" && city.tz === \"Asia/Muscat\")\n  },\n  {\n    country: \"Palestine\",\n    subdiv: [\n      {title: \"Gaza Strip\"}\n    ],\n    zone: \"Asia/Gaza\",\n    flag: \"PS\",\n    cities: cityList.filter(city => city.country === \"PS\" && city.tz === \"Asia/Gaza\")\n  },\n  {\n    country: \"Palestine\",\n    subdiv: [\n      {title: \"West Bank\"}\n    ],\n    zone: \"Asia/Hebron\",\n    flag: \"PS\",\n    cities: cityList.filter(city => city.country === \"PS\" && city.tz === \"Asia/Hebron\")\n  },\n  {\n    country: \"Qatar\",\n    zone: \"Asia/Qatar\",\n    flag: \"QA\",\n    cities: cityList.filter(city => city.country === \"QA\" && city.tz === \"Asia/Qatar\")\n  },\n  {\n    country: \"Saudi Arabia\",\n    zone: \"Asia/Riyadh\",\n    flag: \"SA\",\n    cities: cityList.filter(city => city.country === \"SA\" && city.tz === \"Asia/Riyadh\")\n  },\n  {\n    country: \"Syria\",\n    zone: \"Asia/Damascus\",\n    flag: \"SY\",\n    cities: cityList.filter(city => city.country === \"SY\" && city.tz === \"Asia/Damascus\")\n  },\n  {\n    country: \"Turkey\",\n    zone: \"Europe/Istanbul\",\n    flag: \"TR\",\n    cities: cityList.filter(city => {\n      if(city.country === \"TR\") {\n        switch(city.tz) {\n          case \"Asia/Istanbul\":\n          case \"Europe/Istanbul\":\n            return true\n          default:\n            return false\n        }\n      }\n      return false\n    })\n  },\n  {\n    country: \"United Arab Emirates\",\n    zone: \"Asia/Dubai\",\n    flag: \"AE\",\n    cities: cityList.filter(city => city.country === \"AE\" && city.tz === \"Asia/Dubai\")\n  },\n  {\n    country: \"Yemen\",\n    zone: \"Asia/Aden\",\n    flag: \"YE\",\n    cities: cityList.filter(city => city.country === \"YE\" && city.tz === \"Asia/Aden\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"American Samoa (United States)\",\n    zone: \"Pacific/Pago_Pago\",\n    flag: \"AS\",\n    cities: cityList.filter(city => city.country === \"AS\" && city.tz === \"Pacific/Pago_Pago\")\n  },\n  {\n    country: \"Cook Islands (New Zealand)\",\n    zone: \"Pacific/Rarotonga\",\n    flag: \"CK\",\n    cities: cityList.filter(city => city.country === \"CK\" && city.tz === \"Pacific/Rarotonga\")\n  },\n  {\n    country: \"Fiji\",\n    zone: \"Pacific/Fiji\",\n    flag: \"FJ\",\n    cities: cityList.filter(city => city.country === \"FJ\" && city.tz === \"Pacific/Fiji\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Austral Islands\"}, \n      {title: \"Society Islands\"}, \n      {title: \"Tuamotus\"}\n    ],\n    zone: \"Pacific/Tahiti\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.tz === \"Pacific/Tahiti\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Gambier Islands\"}\n    ],\n    zone: \"Pacific/Gambier\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.tz === \"Pacific/Gambier\")\n  },\n  {\n    country: \"French Polynesia (France)\",\n    subdiv: [\n      {title: \"Marquesas Islands\"}\n    ],\n    zone: \"Pacific/Marquesas\",\n    flag: \"PF\",\n    cities: cityList.filter(city => city.country === \"PF\" && city.tz === \"Pacific/Marquesas\")\n  },\n  {\n    country: \"Guam (United States)\",\n    zone: \"Pacific/Guam\",\n    flag: \"GU\",\n    cities: cityList.filter(city => city.country === \"GU\" && city.tz === \"Pacific/Guam\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Banaba\"}, \n      {title: \"Gilbert Islands\"}\n    ],\n    zone: \"Pacific/Tarawa\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.tz === \"Pacific/Tarawa\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Kiritimati\"}, \n      {title: \"Line Islands\"}\n    ],\n    zone: \"Pacific/Kiritimati\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.tz === \"Pacific/Kiritimati\")\n  },\n  {\n    country: \"Kiribati\",\n    subdiv: [\n      {title: \"Phoenix Islands\"}\n    ],\n    zone: \"Pacific/Enderbury\",\n    flag: \"KI\",\n    cities: cityList.filter(city => city.country === \"KI\" && city.tz === \"Pacific/Enderbury\")\n  },\n  {\n    country: \"Marshall Islands\",\n    subdiv: [\n      {title: \"Kwajalein Atoll\"}\n    ],\n    zone: \"Pacific/Kwajalein\",\n    flag: \"MH\",\n    cities: cityList.filter(city => city.country === \"MH\" && city.tz === \"Pacific/Kwajalein\")\n  },\n  {\n    country: \"Marshall Islands\",\n    subdiv: [\n      {title: \"Ailanglaplap Atoll\"},\n      {title: \"Ailuk Atoll\"},\n      {title: \"Arno Atoll\"},\n      {title: \"Aur Atoll\"},\n      {title: \"Ebon Atoll\"},\n      {title: \"Enewetok / Ujelang\"},\n      {title: \"Jabat Island\"},\n      {title: \"Jaluit Atoll\"},\n      {title: \"Kili / Bikini / Ejit\"},\n      {title: \"Lae Atoll\"},\n      {title: \"Lib Island\"},\n      {title: \"Likiep Atoll\"},\n      {title: \"Majuro Atoll\"},\n      {title: \"Maloelap Atoll\"},\n      {title: \"Mejit Island\"},\n      {title: \"Mili Atoll\"},\n      {title: \"Namorik Atoll\"},\n      {title: \"Namu Atoll\"},\n      {title: \"Rongelap Atoll\"},\n      {title: \"Ujae Atoll\"},\n      {title: \"Utirik Atoll\"},\n      {title: \"Wotho Atoll\"},\n      {title: \"Wotje Atoll\"}\n    ],\n    zone: \"Pacific/Majuro\",\n    flag: \"MH\",\n    cities: cityList.filter(city => city.country === \"MH\" && city.tz === \"Pacific/Majuro\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Chuuk\"}, \n      {title: \"Yap\"}\n    ],\n    zone: \"Pacific/Chuuk\",\n    flag: \"FM\",\n    cities: cityList.filter(city => city.country === \"FM\" && city.tz === \"Pacific/Chuuk\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Kosrae\"}\n    ],\n    zone: \"Pacific/Kosrae\",\n    flag: \"FM\",\n    cities: cityList.filter(city => city.country === \"FM\" && city.tz === \"Pacific/Kosrae\")\n  },\n  {\n    country: \"Micronesia\",\n    subdiv: [\n      {title: \"Pohnpei\"}\n    ],\n    zone: \"Pacific/Pohnpei\",\n    flag: \"FM\",\n    cities: cityList.filter(city => city.country === \"FM\" && city.tz === \"Pacific/Pohnpei\")\n  },\n  {\n    country: \"Nauru\",\n    zone: \"Pacific/Nauru\",\n    flag: \"NR\",\n    cities: cityList.filter(city => city.country === \"NR\" && city.tz === \"Pacific/Nauru\")\n  },\n  {\n    country: \"New Caledonia (France)\",\n    zone: \"Pacific/Noumea\",\n    flag: \"NC\",\n    cities: cityList.filter(city => city.country === \"NC\" && city.tz === \"Pacific/Noumea\")\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Auckland\"},\n      {title: \"Bay of Plenty\"},\n      {title: \"Canterbury\"},\n      {title: \"Gisborne\"},\n      {title: \"Hawke's Bay\"},\n      {title: \"Manawatu-Wanganui\"},\n      {title: \"Marlborough\"},\n      {title: \"Nelson\"},\n      {title: \"Northland\"},\n      {title: \"Otago\"},\n      {title: \"Southland\"},\n      {title: \"Taranaki\"},\n      {title: \"Tasman\"},\n      {title: \"Waikato\"},\n      {title: \"West Coast\"},\n      {title: \"Wellington\"}\n    ],\n    zone: \"Pacific/Auckland\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => city.country === \"NZ\" && city.tz === \"Pacific/Auckland\")\n  },\n  {\n    country: \"New Zealand\",\n    subdiv: [\n      {title: \"Chatham Islands\"}\n    ],\n    zone: \"Pacific/Chatham\",\n    flag: \"NZ\",\n    cities: cityList.filter(city => city.country === \"NZ\" && city.tz === \"Pacific/Chatham\")\n  },\n  {\n    country: \"Niue (New Zealand)\",\n    zone: \"Pacific/Niue\",\n    flag: \"NU\",\n    cities: cityList.filter(city => city.country === \"NU\" && city.tz === \"Pacific/Niue\")\n  },\n  {\n    country: \"Northern Mariana Islands (United States)\",\n    zone: \"Pacific/Saipan\",\n    flag: \"MP\",\n    cities: cityList.filter(city => city.country === \"MP\" && city.tz === \"Pacific/Saipan\")\n  },\n  {\n    country: \"Palau\",\n    zone: \"Pacific/Palau\",\n    flag: \"PW\",\n    cities: cityList.filter(city => city.country === \"PW\" && city.tz === \"Pacific/Palau\")\n  },\n  {\n    country: \"Papua New Guinea\",\n    subdiv: [\n      {title: \"Bougainville\"}\n    ],\n    zone: \"Pacific/Bougainville\",\n    flag: \"PG\",\n    cities: cityList.filter(city => city.country === \"PG\" && city.tz === \"Pacific/Bougainville\")\n  },\n  {\n    country: \"Papua New Guinea\",\n    subdiv: [\n      {title: \"Central\"},\n      {title: \"Chimbu\"},\n      {title: \"Eastern Highlands\"},\n      {title: \"East New Britain\"},\n      {title: \"East Sepik\"},\n      {title: \"Enga\"},\n      {title: \"Guff\"},\n      {title: \"Hela\"},\n      {title: \"Jiwaka\"},\n      {title: \"Madang\"},\n      {title: \"Manus\"},\n      {title: \"Milne Bay\"},\n      {title: \"Morobe\"},\n      {title: \"National Capital District\"},\n      {title: \"New Ireland\"},\n      {title: \"Northern\"},\n      {title: \"Southern Highlands\"},\n      {title: \"Western Highlands\"},\n      {title: \"Western Province\"},\n      {title: \"West New Britain\"},\n      {title: \"West Sepik\"},\n    ],\n    zone: \"Pacific/Port_Moresby\",\n    flag: \"PG\",\n    cities: cityList.filter(city => city.country === \"PG\" && city.tz === \"Pacific/Port_Moresby\")\n  },\n  {\n    country: \"Pitcairn Islands (United Kingdom)\",\n    zone: \"Pacific/Pitcairn\",\n    flag: \"PN\",\n    cities: cityList.filter(city => city.country === \"PN\" && city.tz === \"Pacific/Pitcairn\")\n  },\n  {\n    country: \"Samoa\",\n    zone: \"Pacific/Apia\",\n    flag: \"WS\",\n    cities: cityList.filter(city => city.country === \"WS\" && city.tz === \"Pacific/Apia\")\n  },\n  {\n    country: \"Solomon Islands\",\n    zone: \"Pacific/Guadalcanal\",\n    flag: \"SB\",\n    cities: cityList.filter(city => city.country === \"SB\" && city.tz === \"Pacific/Guadalcanal\")\n  },\n  {\n    country: \"Tokelau (New Zealand)\",\n    zone: \"Pacific/Fakaofo\",\n    flag: \"TK\",\n    cities: cityList.filter(city => city.country === \"TK\" && city.tz === \"Pacific/Fakaofo\")\n  },\n  {\n    country: \"Tonga\",\n    zone: \"Pacific/Tongatapu\",\n    flag: \"TO\",\n    cities: cityList.filter(city => city.country === \"TO\" && city.tz === \"Pacific/Tongatapu\")\n  },\n  {\n    country: \"Tuvalu\",\n    zone: \"Pacific/Funafuti\",\n    flag: \"TV\",\n    cities: cityList.filter(city => city.country === \"TV\" && city.tz === \"Pacific/Funafuti\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Hawaii\"}\n    ],\n    zone: \"Pacific/Honolulu\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"Pacific/Honolulu\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Johnston Atoll\"}\n    ],\n    zone: \"Pacific/Johnston\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.tz === \"Pacific/Johnston\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Midway Islands\"}, \n      {title: \"Palmyra Atoll\"}\n    ],\n    zone: \"Pacific/Midway\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.tz === \"Pacific/Midway\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Wake\"}\n    ],\n    zone: \"Pacific/Wake\",\n    flag: \"US\", // eigentlich UM\n    cities: cityList.filter(city => city.country === \"UM\" && city.tz === \"Pacific/Wake\")\n  },\n  {\n    country: \"Vanuatu\",\n    zone: \"Pacific/Efate\",\n    flag: \"VU\",\n    cities: cityList.filter(city => city.country === \"VU\" && city.tz === \"Pacific/Efate\")\n  },\n  {\n    country: \"Wallis and Futuna (France)\",\n    zone: \"Pacific/Wallis\",\n    flag: \"WF\",\n    cities: cityList.filter(city => city.country === \"WF\" && city.tz === \"Pacific/Wallis\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kaliningrad Oblast\"}\n    ],\n    zone: \"Europe/Kaliningrad\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Kaliningrad\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Moscow\"}, \n      {title: \"Saint Petersburg\"}, \n      {title: \"Karelia\"}, \n      {title: \"Komi\"}, \n      {title: \"Arkhangelsk Oblast\"}, \n      {title: \"Bryansk Oblast\"}, \n      {title: \"Ivanovo Oblast\"}, \n      {title: \"Kaluga Oblast\"}, \n      {title: \"Kostroma Oblast\"}, \n      {title: \"Leningrad Oblast\"}, \n      {title: \"Moscow Oblast\"}, \n      {title: \"Murmansk Oblast\"}, \n      {title: \"Novgorod Oblast\"}, \n      {title: \"Oryol Oblast\"}, \n      {title: \"Pskov Oblast\"}, \n      {title: \"Ryazan Oblast\"}, \n      {title: \"Smolensk Oblast\"}, \n      {title: \"Tula Oblast\"}, \n      {title: \"Tver Oblast\"}, \n      {title: \"Vladimir Oblast\"}, \n      {title: \"Vologda Oblast\"}, \n      {title: \"Yaroslavl Oblast\"}, \n      {title: \"Nenets Autonomous Okrug\"}\n    ],\n    zone: \"Europe/Moscow\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Moscow\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Adygea\"}, \n      {title: \"Chechnya\"}, \n      {title: \"Dagestan\"}, \n      {title: \"Ingushetia\"}, \n      {title: \"Kabardino-Balkaria\"}, \n      {title: \"Kalmykia\"}, \n      {title: \"Karachay-Cherkessia\"}, \n      {title: \"North Ossetia-Alania\"}, \n      {title: \"Krasnodar Region\"}, \n      {title: \"Stavropol Region\"}, \n      {title: \"Astrakhan Oblast\"}, \n      {title: \"Rostov Oblast\"}, \n      {title: \"Volgograd Oblast\"}\n    ],\n    zone: \"Europe/Astrakhan\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Astrakhan\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Chuvashia\"}, \n      {title: \"Tatarstan\"}, \n      {title: \"Mari El\"}, \n      {title: \"Mordovia\"}, \n      {title: \"Kirov Oblast\"}, \n      {title: \"Nizhnyi Novgorod Oblast\"}\n    ],\n    zone: \"Europe/Kirov\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Kirov\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Belgorod Oblast\"}, \n      {title: \"Kursk Oblast\"}, \n      {title: \"Lipetsk Oblast\"}, \n      {title: \"Penza Oblast\"}, \n      {title: \"Saratov Oblast\"}, \n      {title: \"Tambov Oblast\"}, \n      {title: \"Voronezh Oblast\"}\n    ],\n    zone: \"Europe/Saratov\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Saratov\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Udmurtia\"}, \n      {title: \"Samara Oblast\"}, \n      {title: \"Ulyanovsk Oblast\"}\n    ],\n    zone: \"Europe/Samara\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Europe/Samara\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Bashkortostan\"}, \n      {title: \"Perm Region\"}, \n      {title: \"Chelyabinsk Oblast\"}, \n      {title: \"Kurgan Oblast\"}, \n      {title: \"Orenburg Oblast\"}, \n      {title: \"Sverdlovsk Oblast\"}, \n      {title: \"Tyumen Oblast\"}, \n      {title: \"Khanty-Mansi Autonomous Okrug\"}, \n      {title: \"Yamalo-Nenets Autonomous Okrug\"}\n    ],\n    zone: \"Asia/Yekaterinburg\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Yekaterinburg\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Omsk Oblast\"}\n    ],\n    zone: \"Asia/Omsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Omsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Altai Republic\"}, \n      {title: \"Altai Region\"}\n    ],\n    zone: \"Asia/Barnaul\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Barnaul\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Khakassia\"}, \n      {title: \"Tuva Republic\"}, \n      {title: \"Krasnoyarsk Region\"}\n    ],\n    zone: \"Asia/Krasnoyarsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Krasnoyarsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kemerovo Oblast\"}\n    ],\n    zone: \"Asia/Novokuznetsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Novokuznetsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Novosibirsk Oblast\"}\n    ],\n    zone: \"Asia/Novosibirsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Novosibirsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Tomsk Oblast\"}\n    ],\n    zone: \"Asia/Tomsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Tomsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Buryatia\"}, \n      {title: \"Irkutsk Oblast\"}\n    ],\n    zone: \"Asia/Irkutsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Irkutsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(western part)\"}, \n      {title: \"Amur Oblast\"}\n    ],\n    zone: \"Asia/Yakutsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Yakutsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Zabaykalsky Krai\"}\n    ],\n    zone: \"Asia/Chita\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Chita\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Khabarovsk Region\"}, \n      {title: \"Primorsky Krai\"}, \n      {title: \"Jewish Autonomous Oblast\"}\n    ],\n    zone: \"Asia/Vladivostok\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Vladivostok\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(central part)\"}\n    ],\n    zone: \"Asia/Ust-Nera\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Ust-Nera\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakha\", extra: \"(eastern part)\"}\n    ],\n    zone: \"Asia/Srednekolymsk\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Srednekolymsk\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Magadan Oblast\"}\n    ],\n    zone: \"Asia/Magadan\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Magadan\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Sakhalin Oblast\"}\n    ],\n    zone: \"Asia/Sakhalin\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Sakhalin\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Kamchatka\"}\n    ],\n    zone: \"Asia/Kamchatka\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Kamchatka\")\n  },\n  {\n    country: \"Russia\",\n    subdiv: [\n      {title: \"Chukotka Autonomous Okrug\"}\n    ],\n    zone: \"Asia/Anadyr\",\n    flag: \"RU\",\n    cities: cityList.filter(city => city.country === \"RU\" && city.tz === \"Asia/Anadyr\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Argentina\",\n    zone: \"America/Argentina/Buenos_Aires\",\n    flag: \"AR\",\n    cities: cityList.filter(city => city.country === \"AR\" && city.tz.startsWith(\"America/Argentina\"))\n  },\n  {\n    country: \"Bolivia\",\n    zone: \"America/La_Paz\",\n    flag: \"BO\",\n    cities: cityList.filter(city => city.country === \"BO\" && city.tz === \"America/La_Paz\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Acre\"}\n    ],\n    zone: \"America/Rio_Branco\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Rio_Branco\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amazonas\", extra: \"(western part)\"}\n    ],\n    zone: \"America/Eirunepe\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Eirunepe\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Distrito Federal\"}, \n      {title: \"Espírito Santo\"}, \n      {title: \"Goiás\"}, \n      {title: \"Minas Gerais\"}, \n      {title: \"Paraná\"}, \n      {title: \"Rio de Janeiro\"}, \n      {title: \"Rio Grande do Sul\"}, \n      {title: \"Santa Catarina\"}, \n      {title: \"São Paulo\"}\n    ],\n    zone: \"America/Sao_Paulo\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Sao_Paulo\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Alagoas\"}, \n      {title: \"Sergipe\"}\n    ],\n    zone: \"America/Maceio\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Maceio\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amapá\"}\n    ],\n    zone: \"America/Belem\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Belem\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Bahia\"}\n    ],\n    zone: \"America/Bahia\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Bahia\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Ceará\"}, \n      {title: \"Maranhão\"}, \n      {title: \"Paraíba\"}, \n      {title: \"Piauí\"}, \n      {title: \"Rio Grande do Norte\"}\n    ],\n    zone: \"America/Fortaleza\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Fortaleza\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Pará\"}\n    ],\n    zone: \"America/Santarem\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Santarem\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Pernambuco\"}\n    ],\n    zone: \"America/Recife\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Recife\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Tocantins\"}\n    ],\n    zone: \"America/Araguaina\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Araguaina\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Amazonas\", extra: \"(eastern part)\"}\n    ],\n    zone: \"America/Manaus\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Manaus\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Mato Grosso\"}\n    ],\n    zone: \"America/Cuiaba\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Cuiaba\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Mato Grosso do Sul\"}\n    ],\n    zone: \"America/Campo_Grande\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Campo_Grande\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Rondônia\"}\n    ],\n    zone: \"America/Porto_Velho\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Porto_Velho\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Roraima\"}\n    ],\n    zone: \"America/Boa_Vista\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Boa_Vista\")\n  },\n  {\n    country: \"Brazil\",\n    subdiv: [\n      {title: \"Atol das Rocas\"}, \n      {title: \"Fernando de Noronha\"}, \n      {title: \"Martim Vaz\"}, \n      {title: \"Trinidade\"}, \n      {title: \"Saint Peter and Saint Paul Archipelago\"}\n    ],\n    zone: \"America/Noronha\",\n    flag: \"BR\",\n    cities: cityList.filter(city => city.country === \"BR\" && city.tz === \"America/Noronha\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Easter Island\"}\n    ],\n    zone: \"Pacific/Easter\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"Pacific/Easter\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Aisén\"},\n      {title: \"Antofagasta\"},\n      {title: \"Araucanía\"},\n      {title: \"Arica and Parinacota\"},\n      {title: \"Atacama\"},\n      {title: \"Biobío\"},\n      {title: \"Coquimbo\"},\n      {title: \"Los Lagos\"},\n      {title: \"Los Ríos\"},\n      {title: \"Maule\"},\n      {title: \"Ñuble\"},\n      {title: \"Región del Libertador Bernardo O'Higgins\"},\n      {title: \"Santiago\"},\n      {title: \"Tarapacá\"},\n      {title: \"Valparaíso\", extra: \"(continental part)\"},\n    ],\n    zone: \"America/Santiago\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"America/Santiago\")\n  },\n  {\n    country: \"Chile\",\n    subdiv: [\n      {title: \"Magallanes and Antártica Chilena Region\"}\n    ],\n    zone: \"America/Punta_Arenas\",\n    flag: \"CL\",\n    cities: cityList.filter(city => city.country === \"CL\" && city.tz === \"America/Punta_Arenas\")\n  },\n  {\n    country: \"Colombia\",\n    zone: \"America/Bogota\",\n    flag: \"CO\",\n    cities: cityList.filter(city => city.country === \"CO\" && city.tz === \"America/Bogota\")\n  },\n  {\n    country: \"Ecuador\",\n    subdiv: [\n      {title: \"Azuay\"},\n      {title: \"Bolívar\"},\n      {title: \"Cañar\"},\n      {title: \"Carchi\"},\n      {title: \"Chimborazo\"},\n      {title: \"Cotopaxi\"},\n      {title: \"El Oro\"},\n      {title: \"Esmeraldas\"},\n      {title: \"Guayas\"},\n      {title: \"Imbabura\"},\n      {title: \"Loja\"},\n      {title: \"Los Ríos\"},\n      {title: \"Manabí\"},\n      {title: \"Morona Santiago\"},\n      {title: \"Napo\"},\n      {title: \"Orellana\"},\n      {title: \"Pastaza\"},\n      {title: \"Pichincha\"},\n      {title: \"Santa Elena\"},\n      {title: \"Santo Domingo de los Tsáchilas\"},\n      {title: \"Sucumbíos\"},\n      {title: \"Tungurahua\"},\n      {title: \"Zamora Chinchipe\"}\n    ],\n    zone: \"America/Guayaquil\",\n    flag: \"EC\",\n    cities: cityList.filter(city => city.country === \"EC\" && city.tz === \"America/Guayaquil\")\n  },\n  {\n    country: \"Ecuador\",\n    subdiv: [\n      {title: \"Galápagos\"}\n    ],\n    zone: \"Pacific/Galapagos\",\n    flag: \"EC\",\n    cities: cityList.filter(city => city.country === \"EC\" && city.tz === \"America/Galapagos\")\n  },\n  {\n    country: \"Falkland Islands (United Kingdom)\",\n    zone: \"Atlantic/Stanley\",\n    flag: \"FK\",\n    cities: cityList.filter(city => city.country === \"FK\" && city.tz === \"Atlantic/Stanley\")\n  },\n  {\n    country: \"France\",\n    subdiv: [\n      {title: \"French Guiana\"}\n    ],\n    zone: \"America/Cayenne\",\n    flag: \"FR\", // eigentlich GF\n    cities: cityList.filter(city => city.country === \"GF\" && city.tz === \"America/Cayenne\")\n  },\n  {\n    country: \"Guyana\",\n    zone: \"America/Guyana\",\n    flag: \"GY\",\n    cities: cityList.filter(city => city.country === \"GY\" && city.tz === \"America/Guyana\")\n  },\n  {\n    country: \"Paraguay\",\n    zone: \"America/Asuncion\",\n    flag: \"PY\",\n    cities: cityList.filter(city => city.country === \"PY\" && city.tz === \"America/Asuncion\")\n  },\n  {\n    country: \"Peru\",\n    zone: \"America/Lima\",\n    flag: \"PE\",\n    cities: cityList.filter(city => city.country === \"PE\" && city.tz === \"America/Lima\")\n  },\n  {\n    country: \"South Georgia and the South Sandwich Islands (United Kingdom)\",\n    zone: \"Atlantic/South_Georgia\",\n    flag: \"GS\",\n    cities: cityList.filter(city => city.country === \"GS\" && city.tz === \"Atlantic/South_Georgia\")\n  },\n  {\n    country: \"Suriname\",\n    zone: \"America/Paramaribo\",\n    flag: \"SR\",\n    cities: cityList.filter(city => city.country === \"SR\" && city.tz === \"America/Paramaribo\")\n  },\n  {\n    country: \"Uruguay\",\n    zone: \"America/Montevideo\",\n    flag: \"UY\",\n    cities: cityList.filter(city => city.country === \"UY\" && city.tz === \"America/Montevideo\")\n  },\n  {\n    country: \"Venezuela\",\n    zone: \"America/Caracas\",\n    flag: \"VE\",\n    cities: cityList.filter(city => city.country === \"VE\" && city.tz === \"America/Caracas\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Bangladesh\",\n    zone: \"Asia/Dhaka\",\n    flag: \"BD\",\n    cities: cityList.filter(city => city.country === \"BD\" && city.tz === \"Asia/Dhaka\")\n  },\n  {\n    country: \"Bhutan\",\n    zone: \"Asia/Thimphu\",\n    flag: \"BT\",\n    cities: cityList.filter(city => city.country === \"BT\" && city.tz === \"Asia/Thimphu\")\n  },\n  {\n    country: \"British Indian Ocean Territory (United Kingdom)\",\n    zone: \"Indian/Chagos\",\n    flag: \"IO\",\n    cities: cityList.filter(city => city.country === \"IO\" && city.tz === \"Indian/Chagos\")\n  },\n  {\n    country: \"Cocos Islands (Australia)\",\n    zone: \"Indian/Cocos\",\n    flag: \"CC\",\n    cities: cityList.filter(city => city.country === \"CC\" && city.tz === \"Indian/Cocos\")\n  },\n  {\n    country: \"India\",\n    zone: \"Asia/Kolkata\",\n    flag: \"IN\",\n    cities: cityList.filter(city => city.country === \"IN\" && city.tz === \"Asia/Kolkata\")\n  },\n  {\n    country: \"Myanmar\",\n    zone: \"Asia/Yangon\",\n    flag: \"MM\",\n    cities: cityList.filter(city => city.country === \"MM\" && city.tz === \"Asia/Yangon\")\n  },\n  {\n    country: \"Nepal\",\n    zone: \"Asia/Kathmandu\",\n    flag: \"NP\",\n    cities: cityList.filter(city => city.country === \"NP\" && city.tz === \"Asia/Kathmandu\")\n  },\n  {\n    country: \"Maldives\",\n    zone: \"Indian/Maldives\",\n    flag: \"MV\",\n    cities: cityList.filter(city => city.country === \"MV\" && city.tz === \"Indian/Maldives\")\n  },\n  {\n    country: \"Pakistan\",\n    zone: \"Asia/Karachi\",\n    flag: \"PK\",\n    cities: cityList.filter(city => city.country === \"PK\" && city.tz === \"Asia/Karachi\")\n  },\n  {\n    country: \"Sri Lanka\",\n    zone: \"Asia/Colombo\",\n    flag: \"LK\",\n    cities: cityList.filter(city => city.country === \"LK\" && city.tz === \"Asia/Colombo\")\n  }\n]\n","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"Brunei\",\n    zone: \"Asia/Brunei\",\n    flag: \"BN\",\n    cities: cityList.filter(city => city.country === \"BN\" && city.tz === \"Asia/Brunei\"),\n  },\n  {\n    country: \"Cambodia\",\n    zone: \"Asia/Phnom_Penh\",\n    flag: \"KH\",\n    cities: cityList.filter(city => city.country === \"KH\" && city.tz === \"Asia/Phnom_Penh\")\n  },\n  {\n    country: \"Christmas Island (Australia)\",\n    zone: \"Indian/Christmas\",\n    flag: \"CX\",\n    cities: cityList.filter(city => city.country === \"CX\" && city.tz === \"Indian/Christmas\")\n  },\n  {\n    country: \"Laos\",\n    zone: \"Asia/Vientiane\",\n    flag: \"LA\",\n    cities: cityList.filter(city => city.country === \"LA\" && city.tz === \"Asia/Vientiane\")\n  },\n  {\n    country: \"Malaysia\",\n    subdiv: [\n      {title: \"Johor\"},\n      {title: \"Kedah\"},\n      {title: \"Kelantan\"},\n      {title: \"Kuala Lumpur\"},\n      {title: \"Malacca\"},\n      {title: \"Negeri Sembilan\"},\n      {title: \"Pahang\"},\n      {title: \"Penang\"},\n      {title: \"Perak\"},\n      {title: \"Perlis\"},\n      {title: \"Putrajaya\"},\n      {title: \"Selangor\"},\n      {title: \"Terengganu\"},\n    ],\n    zone: \"Asia/Kuala_Lumpur\",\n    flag: \"MY\",\n    cities: cityList.filter(city => city.country === \"MY\" && city.tz === \"Asia/Kuala_Lumpur\")\n  },\n  {\n    country: \"Malaysia\",\n    subdiv: [\n      {title: \"Labuan\"},\n      {title: \"Sabah\"}, \n      {title: \"Sarawak\"}\n    ],\n    zone: \"Asia/Kuching\",\n    flag: \"MY\",\n    cities: cityList.filter(city => city.country === \"MY\" && city.tz === \"Asia/Kuching\")\n  },\n  {\n    country: \"Philippines\",\n    zone: \"Asia/Manila\",\n    flag: \"PH\",\n    cities: cityList.filter(city => city.country === \"PH\" && city.tz === \"Asia/Manila\")\n  },\n  {\n    country: \"Singapore\",\n    zone: \"Asia/Singapore\",\n    flag: \"SG\",\n    cities: cityList.filter(city => city.country === \"SG\" && city.tz === \"Asia/Singapore\")\n  },\n  {\n    country: \"Thailand\",\n    zone: \"Asia/Bangkok\",\n    flag: \"TH\",\n    cities: cityList.filter(city => city.country === \"TH\" && city.tz === \"Asia/Bangkok\")\n  },\n  {\n    country: \"Timor-Leste\",\n    zone: \"Asia/Dili\",\n    flag: \"TL\",\n    cities: cityList.filter(city => city.country === \"TL\" && city.tz === \"Asia/Dili\")\n  },\n  {\n    country: \"Vietnam\",\n    zone: \"Asia/Ho_Chi_Minh\",\n    flag: \"VN\",\n    cities: cityList.filter(city => city.country === \"VN\" && city.tz === \"Asia/Ho_Chi_Minh\")\n  }\n]","import cityList from \"./cityList\"\n\nexport default [\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Alabama\"}, \n      {title: \"Arkansas\"}, \n      {title: \"Florida\", extra: \"(west of Appalachicola River)\"}, \n      {title: \"Illinois\"}, \n      {title: \"Iowa\"}, \n      {title: \"Kansas\", extra: \"(most of state)\"}, \n      {title: \"Kentucky\", extra: \"(western 40%)\"}, \n      {title: \"Louisiana\"}, \n      {title: \"Minnesota\"}, \n      {title: \"Mississippi\"}, \n      {title: \"Missouri\"}, \n      {title: \"Nebraska\", extra: \"(most of state)\"}, \n      {title: \"Oklahoma\"}, \n      {title: \"South Dakota\", extra: \"(eastern half)\"}, \n      {title: \"Tennessee\", extra: \"(most of state)\"}, \n      {title: \"Texas\", extra: \"(most of state)\"}, \n      {title: \"Wisconsin\"}\n    ],\n    zone: \"America/Chicago\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Chicago\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(west of 169°30' W)\"}\n    ],\n    zone: \"America/Adak\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Adak\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Alaska\", extra: \"(east of 169°30' W)\"}\n    ],\n    zone: \"America/Anchorage\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Anchorage\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Arizona\", extra: \"(except Navajo Nation Reservation)\"}\n    ],\n    zone: \"America/Phoenix\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Phoenix\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Arizona\", extra: \"(Navajo Nation Reservation)\"}\n    ],\n    zone: \"America/Shiprock\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Shiprock\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"California\"}, \n      {title: \"Nevada\", extra: \"(most of state)\"}, \n      {title: \"Oregon\", extra: \"(most of state)\"}, \n      {title: \"Washington\"}\n    ],\n    zone: \"America/Los_Angeles\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Los_Angeles\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Colorado\"}, \n      {title: \"Kansas\", extra: \"(western border counties)\"}, \n      {title: \"Montana\"}, \n      {title: \"Nebraska\", extra: \"(western third)\"}, \n      {title: \"Nevada\", extra: \"(West Wendover)\"}, \n      {title: \"New Mexico\"}, \n      {title: \"North Dakota\", extra: \"(southwestern part)\"}, \n      {title: \"South Dakota\", extra: \"(western half)\"}, \n      {title: \"Texas\", extra: \"(El Paso, Hudspeth)\"}, \n      {title: \"Utah\"}, \n      {title: \"Wyoming\"}\n    ],\n    zone: \"America/Denver\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Denver\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Connecticut\"}, \n      {title: \"Delaware\"}, \n      {title: \"District of Columbia\"}, \n      {title: \"Florida\", extra: \"(east of Appalachicola River)\"}, \n      {title: \"Georgia\"}, \n      {title: \"Maine\"}, \n      {title: \"Maryland\"}, \n      {title: \"Massachusetts\"}, \n      {title: \"New Hampshire\"}, \n      {title: \"New Jersey\"}, \n      {title: \"New York\"}, \n      {title: \"North Carolina\"}, \n      {title: \"Ohio\"}, \n      {title: \"Pennsylvania\"}, \n      {title: \"Rhode Island\"}, \n      {title: \"South Carolina\"}, \n      {title: \"Tennessee\", extra: \"(eastern part)\"}, \n      {title: \"Vermont\"}, \n      {title: \"Virginia\"}, \n      {title: \"West Virginia\"}\n    ],\n    zone: \"America/New_York\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/New_York\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Idaho\", extra: \"(most of state)\"}, \n      {title: \"Oregon\", extra: \"(Malheur County)\"}\n    ],\n    zone: \"America/Boise\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Boise\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Indiana\", extra: \"(most of state)\"}\n    ],\n    zone: \"America/Indiana/Indianapolis\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Indiana/Indianapolis\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Indiana\", extra: \"(northwest and southwest)\"}\n    ],\n    zone: \"America/Indiana/Knox\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Indiana/Knox\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Kentucky\", extra: \"(eastern 60%)\"}\n    ],\n    zone: \"America/Kentucky/Louisville\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Kentucky/Louisville\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Michigan\", extra: \"(most of state)\"}\n    ],\n    zone: \"America/Detroit\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Detroit\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"Michigan\", extra: \"(counties bordering Wisconsin)\"}\n    ],\n    zone: \"America/Menominee\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/Menominee\")\n  },\n  {\n    country: \"United States\",\n    subdiv: [\n      {title: \"North Dakota\", extra: \"(most of state)\"}\n    ],\n    zone: \"America/North_Dakota/Center\",\n    flag: \"US\",\n    cities: cityList.filter(city => city.country === \"US\" && city.tz === \"America/North_Dakota/Center\")\n  },\n]\n","import Africa from \"./timezones/Africa\"\nimport Antarctica from \"./timezones/Antarctica\"\nimport Australia from \"./timezones/Australia\"\nimport Canada from \"./timezones/Canada\"\nimport Caribbean from \"./timezones/Caribbean\"\nimport CentralAmerica from \"./timezones/CentralAmerica\"\nimport CentralAsia from \"./timezones/CentralAsia\"\nimport EastAsia from \"./timezones/EastAsia\"\nimport Europe from \"./timezones/Europe\"\nimport Indonesia from \"./timezones/Indonesia\"\nimport MiddleEast from \"./timezones/MiddleEast\"\nimport Oceania from \"./timezones/Oceania\"\nimport Russia from \"./timezones/Russia\"\nimport SouthAmerica from \"./timezones/SouthAmerica\"\nimport SouthAsia from \"./timezones/SouthAsia\"\nimport SouthEastAsia from \"./timezones/SouthEastAsia\"\nimport UnitedStates from \"./timezones/UnitedStates\"\n\nexport default [\n  ...Africa, \n  ...Antarctica,\n  ...Australia,\n  ...Canada,\n  ...Caribbean,\n  ...CentralAmerica,\n  ...CentralAsia, \n  ...EastAsia, \n  ...Europe, \n  ...Indonesia,\n  ...MiddleEast,\n  ...Oceania, \n  ...Russia, \n  ...SouthAmerica,\n  ...SouthAsia,\n  ...SouthEastAsia,\n  ...UnitedStates\n]\n","import React, { useEffect } from \"react\";\nimport { useDebugState } from \"use-named-state\";\nimport Clock from \"../components/Clock\";\nimport timezonesRaw from \"../components/data\"\nimport { findTimeZone, getZonedTime } from \"timezone-support\"\nimport \"../styles/App.css\";\n\nconst pad = (num) => (num < 10 ? `0${num}` : `${num}`)\n\nconst getOffset = (number) => {\n  const sign = (number > 0) ? \"+\" : \"-\"\n  const offset = Math.abs(number)\n  const hours = pad(Math.floor(offset/60))\n  const minutes = pad(offset % 60)\n  return `${sign}${hours}:${minutes}`\n}\n\nexport default function Home() {\n  const [allStates] = useDebugState(\"allStates\", timezonesRaw)\n  const [filtVal, setFiltVal] = useDebugState(\"filterValue\", \"\")\n  const [timezones, setTimezones] = useDebugState(\"timezones\", null)\n  const prepareZones = (filterVal) => {\n    const unsortedStates = allStates.map(tz => {\n      const {country, zone, flag, subdiv = [], cities = [] } = tz\n      const timezone = findTimeZone(zone)\n      const now = getZonedTime(Date.now(), timezone)\n      const numericOffset = -1 * now.zone.offset\n      const offset = getOffset(numericOffset)\n      return { country, zone, flag, offset, numericOffset, subdiv, cities }\n    })\n    const sortedStates = unsortedStates.sort((a,b) => (a.numericOffset - b.numericOffset))\n    const timezoneObject = sortedStates.reduce((acc, curr) => {\n      const obj = {...acc}\n      const { flag: code, offset, country: title, zone, numericOffset, subdiv = [], cities = [] } = curr\n      const city = \"UTC\" + offset\n      const flag = { code, title, subdiv }\n      if (obj.hasOwnProperty(city)) {\n        obj[city].flags.push(flag)\n        obj[city].cities = obj[city].cities.concat(cities)\n      } else {\n        obj[city] = { city, numericOffset, zone, flags: [flag], cities }\n      }\n      return obj\n    }, {})\n    const timezoneArray = Object.values(timezoneObject).sort((a,b) => (a.numericOffset - b.numericOffset))\n    const filterValue = filterVal ? filterVal : filtVal\n    const filteredStates = filterValue !== \"\"  ? timezoneArray.filter(tz => {\n      const { flags, cities } = tz\n      const filteredFlags = flags.filter(flag => {\n        const { title: country, subdiv = [] } = flag\n        const title = subdiv.length > 0 ? `${country}: ${subdiv.map(item => item.title).join(\", \")}` : country\n        if(filterValue !== \"\"){\n          if(title.toLowerCase().includes(filterValue.toLowerCase())) return true\n          return false\n        }\n        return true\n      })\n      if(filteredFlags.length > 0) return true\n      const filteredCities = cities.filter(city => city.asciiname.toLowerCase().includes(filterValue.toLowerCase()))\n      if(filteredCities.length > 0) return true\n      return false\n    }) : timezoneArray\n    setTimezones(filteredStates)\n  }\n  useEffect(() => {\n    prepareZones()\n    setInterval(1000,prepareZones)\n  }, [])\n  return (\n    <div className=\"app\">\n      <div style={{ textAlign: \"center\", marginBottom: \"24px\", marginTop: \"24px\" }}>\n        <input type=\"text\" placeholder=\"Filter countries\" onChange={(e) => {\n          setFiltVal(e.target.value)\n          prepareZones(e.target.value)\n          }} />\n      </div>\n      <div className=\"row album sk-album\"> \n      {timezones && timezones.length > 0 && timezones.map((time, index) => <Clock key={index} flags={time.flags} city={time.city} zone={time.zone} cities={time.cities} />)}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}